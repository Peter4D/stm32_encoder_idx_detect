
simonS_index_sig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002880  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800298c  0800298c  0001298c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002a14  08002a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08002a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ec  20000020  08002a3c  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000010c  08002a3c  0002010c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012631  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025fa  00000000  00000000  0003267a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c18  00000000  00000000  00034c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af0  00000000  00000000  00035890  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005e1f  00000000  00000000  00036380  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000037b7  00000000  00000000  0003c19f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003f956  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000030a0  00000000  00000000  0003f9d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002974 	.word	0x08002974

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002974 	.word	0x08002974

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4a38      	ldr	r2, [pc, #224]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000172:	4b38      	ldr	r3, [pc, #224]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000174:	699b      	ldr	r3, [r3, #24]
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b35      	ldr	r3, [pc, #212]	; (8000254 <MX_GPIO_Init+0xf8>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4a32      	ldr	r2, [pc, #200]	; (8000254 <MX_GPIO_Init+0xf8>)
 800018a:	4b32      	ldr	r3, [pc, #200]	; (8000254 <MX_GPIO_Init+0xf8>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4a2c      	ldr	r2, [pc, #176]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001a2:	4b2c      	ldr	r3, [pc, #176]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b29      	ldr	r3, [pc, #164]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001be:	4826      	ldr	r0, [pc, #152]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001c0:	f000 fe12 	bl	8000de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, out0_Pin|out1_Pin|out2_Pin|out3_Pin, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	210f      	movs	r1, #15
 80001c8:	4824      	ldr	r0, [pc, #144]	; (800025c <MX_GPIO_Init+0x100>)
 80001ca:	f000 fe0d 	bl	8000de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 80001ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001d4:	2311      	movs	r3, #17
 80001d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001dc:	2302      	movs	r3, #2
 80001de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	4619      	mov	r1, r3
 80001e6:	481c      	ldr	r0, [pc, #112]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001e8:	f000 fca0 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = out0_Pin|out1_Pin|out2_Pin|out3_Pin;
 80001ec:	230f      	movs	r3, #15
 80001ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f0:	2301      	movs	r3, #1
 80001f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f4:	2300      	movs	r3, #0
 80001f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f8:	2302      	movs	r3, #2
 80001fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001fc:	f107 0310 	add.w	r3, r7, #16
 8000200:	4619      	mov	r1, r3
 8000202:	4816      	ldr	r0, [pc, #88]	; (800025c <MX_GPIO_Init+0x100>)
 8000204:	f000 fc92 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = END_SW0_Pin|END_SW1_Pin|END_SW2_Pin|END_SW3_Pin;
 8000208:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800020c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000212:	2301      	movs	r3, #1
 8000214:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4810      	ldr	r0, [pc, #64]	; (8000260 <MX_GPIO_Init+0x104>)
 800021e:	f000 fc85 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = idx_int0_Pin|idx_int1_Pin|idx_int2_Pin|idx_int3_Pin;
 8000222:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_GPIO_Init+0x108>)
 800022a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800022c:	2301      	movs	r3, #1
 800022e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	480a      	ldr	r0, [pc, #40]	; (8000260 <MX_GPIO_Init+0x104>)
 8000238:	f000 fc78 	bl	8000b2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2017      	movs	r0, #23
 8000242:	f000 fbc0 	bl	80009c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000246:	2017      	movs	r0, #23
 8000248:	f000 fbd9 	bl	80009fe <HAL_NVIC_EnableIRQ>

}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40021000 	.word	0x40021000
 8000258:	40011000 	.word	0x40011000
 800025c:	40010800 	.word	0x40010800
 8000260:	40010c00 	.word	0x40010c00
 8000264:	10210000 	.word	0x10210000

08000268 <taskTimer_cb>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void taskTimer_cb(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
    //static uint32_t cnt = 0; 

    HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800026c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000270:	4807      	ldr	r0, [pc, #28]	; (8000290 <taskTimer_cb+0x28>)
 8000272:	f000 fdd1 	bl	8000e18 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit_IT(&huart1, uart_test_msg, sizeof(uart_test_msg));
 8000276:	2214      	movs	r2, #20
 8000278:	4906      	ldr	r1, [pc, #24]	; (8000294 <taskTimer_cb+0x2c>)
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <taskTimer_cb+0x30>)
 800027c:	f001 fe12 	bl	8001ea4 <HAL_UART_Transmit_IT>

    /* set timer for new cycle */
    swTimer.set(&xTaskTimer, TASK_PERIODE);
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <taskTimer_cb+0x34>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f242 7110 	movw	r1, #10000	; 0x2710
 8000288:	4805      	ldr	r0, [pc, #20]	; (80002a0 <taskTimer_cb+0x38>)
 800028a:	4798      	blx	r3
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40011000 	.word	0x40011000
 8000294:	20000000 	.word	0x20000000
 8000298:	200000a0 	.word	0x200000a0
 800029c:	080029f8 	.word	0x080029f8
 80002a0:	2000003c 	.word	0x2000003c

080002a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    /* drive software timers: resolition is 0.1 ms */
    swTimer_tick();
 80002ac:	f002 fa46 	bl	800273c <swTimer_tick>
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	80fb      	strh	r3, [r7, #6]
    /* test external interrupt */
    static uint8_t ext_int_msg[10] = {0};
    static uint8_t pinNum_str[5] = {0};
    uint8_t i = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	73fb      	strb	r3, [r7, #15]

    for (i = 0; i < 15; ++i){
 80002c6:	2300      	movs	r3, #0
 80002c8:	73fb      	strb	r3, [r7, #15]
 80002ca:	e008      	b.n	80002de <HAL_GPIO_EXTI_Callback+0x26>
        if(GPIO_Pin == 1) {
 80002cc:	88fb      	ldrh	r3, [r7, #6]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d009      	beq.n	80002e6 <HAL_GPIO_EXTI_Callback+0x2e>
            break;
        }
        GPIO_Pin >>= 1;
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	085b      	lsrs	r3, r3, #1
 80002d6:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 15; ++i){
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	3301      	adds	r3, #1
 80002dc:	73fb      	strb	r3, [r7, #15]
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	2b0e      	cmp	r3, #14
 80002e2:	d9f3      	bls.n	80002cc <HAL_GPIO_EXTI_Callback+0x14>
 80002e4:	e000      	b.n	80002e8 <HAL_GPIO_EXTI_Callback+0x30>
            break;
 80002e6:	bf00      	nop
    }

    strcpy(ext_int_msg, "Pin: ");
 80002e8:	4b12      	ldr	r3, [pc, #72]	; (8000334 <HAL_GPIO_EXTI_Callback+0x7c>)
 80002ea:	4a13      	ldr	r2, [pc, #76]	; (8000338 <HAL_GPIO_EXTI_Callback+0x80>)
 80002ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f0:	6018      	str	r0, [r3, #0]
 80002f2:	3304      	adds	r3, #4
 80002f4:	8019      	strh	r1, [r3, #0]
    num2str(i, pinNum_str);
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	4910      	ldr	r1, [pc, #64]	; (800033c <HAL_GPIO_EXTI_Callback+0x84>)
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 f980 	bl	8002600 <num2str>
    strcat(ext_int_msg, pinNum_str);
 8000300:	490e      	ldr	r1, [pc, #56]	; (800033c <HAL_GPIO_EXTI_Callback+0x84>)
 8000302:	480c      	ldr	r0, [pc, #48]	; (8000334 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000304:	f002 fb26 	bl	8002954 <strcat>
    strcat(ext_int_msg, "\n\r");
 8000308:	480a      	ldr	r0, [pc, #40]	; (8000334 <HAL_GPIO_EXTI_Callback+0x7c>)
 800030a:	f7ff ff1f 	bl	800014c <strlen>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000314:	4413      	add	r3, r2
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <HAL_GPIO_EXTI_Callback+0x88>)
 8000318:	8811      	ldrh	r1, [r2, #0]
 800031a:	7892      	ldrb	r2, [r2, #2]
 800031c:	8019      	strh	r1, [r3, #0]
 800031e:	709a      	strb	r2, [r3, #2]

    HAL_UART_Transmit_IT(&huart1, ext_int_msg, sizeof(ext_int_msg));
 8000320:	220a      	movs	r2, #10
 8000322:	4904      	ldr	r1, [pc, #16]	; (8000334 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000324:	4807      	ldr	r0, [pc, #28]	; (8000344 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000326:	f001 fdbd 	bl	8001ea4 <HAL_UART_Transmit_IT>

}
 800032a:	bf00      	nop
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2000004c 	.word	0x2000004c
 8000338:	0800298c 	.word	0x0800298c
 800033c:	20000058 	.word	0x20000058
 8000340:	08002994 	.word	0x08002994
 8000344:	200000a0 	.word	0x200000a0

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034c:	f000 fa08 	bl	8000760 <HAL_Init>

  /* USER CODE BEGIN Init */

  swTimer_init(&xTaskTimer);
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <main+0x3c>)
 8000352:	f002 fa2f 	bl	80027b4 <swTimer_init>
  swTimer.attach_callBack(&xTaskTimer, taskTimer_cb);
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <main+0x40>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	490c      	ldr	r1, [pc, #48]	; (800038c <main+0x44>)
 800035c:	4809      	ldr	r0, [pc, #36]	; (8000384 <main+0x3c>)
 800035e:	4798      	blx	r3
  swTimer.set(&xTaskTimer, TASK_PERIODE);
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <main+0x40>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f242 7110 	movw	r1, #10000	; 0x2710
 8000368:	4806      	ldr	r0, [pc, #24]	; (8000384 <main+0x3c>)
 800036a:	4798      	blx	r3

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f812 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f7ff fef4 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000374:	f000 f976 	bl	8000664 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000378:	f000 f904 	bl	8000584 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800037c:	4804      	ldr	r0, [pc, #16]	; (8000390 <main+0x48>)
 800037e:	f001 f9c2 	bl	8001706 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000382:	e7fe      	b.n	8000382 <main+0x3a>
 8000384:	2000003c 	.word	0x2000003c
 8000388:	080029f8 	.word	0x080029f8
 800038c:	08000269 	.word	0x08000269
 8000390:	20000060 	.word	0x20000060

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b090      	sub	sp, #64	; 0x40
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0318 	add.w	r3, r7, #24
 800039e:	2228      	movs	r2, #40	; 0x28
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 face 	bl	8002944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b6:	2302      	movs	r3, #2
 80003b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ba:	2301      	movs	r3, #1
 80003bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003be:	2310      	movs	r3, #16
 80003c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fd4e 	bl	8000e6c <HAL_RCC_OscConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003d6:	f000 f818 	bl	800040a <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003da:	230f      	movs	r3, #15
 80003dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 ff9e 	bl	8001334 <HAL_RCC_ClockConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003fe:	f000 f804 	bl	800040a <Error_Handler>
  }
}
 8000402:	bf00      	nop
 8000404:	3740      	adds	r7, #64	; 0x40
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
	...

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	4a15      	ldr	r2, [pc, #84]	; (8000474 <HAL_MspInit+0x5c>)
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <HAL_MspInit+0x5c>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <HAL_MspInit+0x5c>)
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <HAL_MspInit+0x5c>)
 800043a:	69db      	ldr	r3, [r3, #28]
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_MspInit+0x60>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <HAL_MspInit+0x60>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000
 8000478:	40010000 	.word	0x40010000

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <HardFault_Handler+0x4>

0800048e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <MemManage_Handler+0x4>

08000494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <BusFault_Handler+0x4>

0800049a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <UsageFault_Handler+0x4>

080004a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c8:	f000 f990 	bl	80007ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //swTimer_tick();

  /* USER CODE END SysTick_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80004d4:	2040      	movs	r0, #64	; 0x40
 80004d6:	f000 fcb1 	bl	8000e3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80004da:	2080      	movs	r0, #128	; 0x80
 80004dc:	f000 fcae 	bl	8000e3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80004e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80004e4:	f000 fcaa 	bl	8000e3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80004e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004ec:	f000 fca6 	bl	8000e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <TIM2_IRQHandler+0x10>)
 80004fa:	f001 f91e 	bl	800173a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000060 	.word	0x20000060

08000508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <USART1_IRQHandler+0x10>)
 800050e:	f001 fd0d 	bl	8001f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200000a0 	.word	0x200000a0

0800051c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000520:	4a15      	ldr	r2, [pc, #84]	; (8000578 <SystemInit+0x5c>)
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <SystemInit+0x5c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800052c:	4912      	ldr	r1, [pc, #72]	; (8000578 <SystemInit+0x5c>)
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <SystemInit+0x5c>)
 8000530:	685a      	ldr	r2, [r3, #4]
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <SystemInit+0x60>)
 8000534:	4013      	ands	r3, r2
 8000536:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000538:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <SystemInit+0x5c>)
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <SystemInit+0x5c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000546:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000548:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <SystemInit+0x5c>)
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <SystemInit+0x5c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000552:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000554:	4a08      	ldr	r2, [pc, #32]	; (8000578 <SystemInit+0x5c>)
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <SystemInit+0x5c>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800055e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <SystemInit+0x5c>)
 8000562:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000566:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <SystemInit+0x64>)
 800056a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800056e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000
 800057c:	f8ff0000 	.word	0xf8ff0000
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80005a0:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <MX_TIM2_Init+0x94>)
 80005a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <MX_TIM2_Init+0x94>)
 80005aa:	2208      	movs	r2, #8
 80005ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ae:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <MX_TIM2_Init+0x94>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_CNT;
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <MX_TIM2_Init+0x94>)
 80005b6:	2264      	movs	r2, #100	; 0x64
 80005b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <MX_TIM2_Init+0x94>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <MX_TIM2_Init+0x94>)
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005c6:	4814      	ldr	r0, [pc, #80]	; (8000618 <MX_TIM2_Init+0x94>)
 80005c8:	f001 f872 	bl	80016b0 <HAL_TIM_Base_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80005d2:	f7ff ff1a 	bl	800040a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	4619      	mov	r1, r3
 80005e2:	480d      	ldr	r0, [pc, #52]	; (8000618 <MX_TIM2_Init+0x94>)
 80005e4:	f001 f9b1 	bl	800194a <HAL_TIM_ConfigClockSource>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80005ee:	f7ff ff0c 	bl	800040a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <MX_TIM2_Init+0x94>)
 8000600:	f001 fbad 	bl	8001d5e <HAL_TIMEx_MasterConfigSynchronization>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800060a:	f7ff fefe 	bl	800040a <Error_Handler>
  }

}
 800060e:	bf00      	nop
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000060 	.word	0x20000060

0800061c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800062c:	d113      	bne.n	8000656 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800062e:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <HAL_TIM_Base_MspInit+0x44>)
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_TIM_Base_MspInit+0x44>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_TIM_Base_MspInit+0x44>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	201c      	movs	r0, #28
 800064c:	f000 f9bb 	bl	80009c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000650:	201c      	movs	r0, #28
 8000652:	f000 f9d4 	bl	80009fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART1_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800069c:	f001 fbb5 	bl	8001e0a <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f7ff feb0 	bl	800040a <Error_Handler>
  }

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000a0 	.word	0x200000a0
 80006b4:	40013800 	.word	0x40013800

080006b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a20      	ldr	r2, [pc, #128]	; (8000754 <HAL_UART_MspInit+0x9c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d139      	bne.n	800074c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d8:	4a1f      	ldr	r2, [pc, #124]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4a19      	ldr	r2, [pc, #100]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	480f      	ldr	r0, [pc, #60]	; (800075c <HAL_UART_MspInit+0xa4>)
 800071e:	f000 fa05 	bl	8000b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	4619      	mov	r1, r3
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <HAL_UART_MspInit+0xa4>)
 8000738:	f000 f9f8 	bl	8000b2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2025      	movs	r0, #37	; 0x25
 8000742:	f000 f940 	bl	80009c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000746:	2025      	movs	r0, #37	; 0x25
 8000748:	f000 f959 	bl	80009fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40013800 	.word	0x40013800
 8000758:	40021000 	.word	0x40021000
 800075c:	40010800 	.word	0x40010800

08000760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000764:	4a08      	ldr	r2, [pc, #32]	; (8000788 <HAL_Init+0x28>)
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_Init+0x28>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f91d 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000776:	2000      	movs	r0, #0
 8000778:	f000 f808 	bl	800078c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077c:	f7ff fe4c 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40022000 	.word	0x40022000

0800078c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x54>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x58>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f935 	bl	8000a1a <HAL_SYSTICK_Config>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00e      	b.n	80007d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d80a      	bhi.n	80007d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c0:	2200      	movs	r2, #0
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f000 f8fd 	bl	80009c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <HAL_InitTick+0x5c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e000      	b.n	80007d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000014 	.word	0x20000014
 80007e4:	2000001c 	.word	0x2000001c
 80007e8:	20000018 	.word	0x20000018

080007ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_IncTick+0x1c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x20>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a03      	ldr	r2, [pc, #12]	; (800080c <HAL_IncTick+0x20>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	2000001c 	.word	0x2000001c
 800080c:	200000e0 	.word	0x200000e0

08000810 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;
 8000814:	4b02      	ldr	r3, [pc, #8]	; (8000820 <HAL_GetTick+0x10>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	200000e0 	.word	0x200000e0

08000824 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	; (8000868 <NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <NVIC_EnableIRQ+0x2c>)
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	095b      	lsrs	r3, r3, #5
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	f002 021f 	and.w	r2, r2, #31
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	da0b      	bge.n	80008e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	490d      	ldr	r1, [pc, #52]	; (8000904 <NVIC_SetPriority+0x4c>)
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	3b04      	subs	r3, #4
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e2:	e009      	b.n	80008f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	4908      	ldr	r1, [pc, #32]	; (8000908 <NVIC_SetPriority+0x50>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00
 8000908:	e000e100 	.word	0xe000e100

0800090c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	2b04      	cmp	r3, #4
 8000928:	bf28      	it	cs
 800092a:	2304      	movcs	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	2b06      	cmp	r3, #6
 8000934:	d902      	bls.n	800093c <NVIC_EncodePriority+0x30>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3b03      	subs	r3, #3
 800093a:	e000      	b.n	800093e <NVIC_EncodePriority+0x32>
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	2201      	movs	r2, #1
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	401a      	ands	r2, r3
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000952:	2101      	movs	r1, #1
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	1e59      	subs	r1, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	4313      	orrs	r3, r2
         );
}
 8000962:	4618      	mov	r0, r3
 8000964:	3724      	adds	r7, #36	; 0x24
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f7ff ff92 	bl	80008b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff33 	bl	8000824 <NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d8:	f7ff ff48 	bl	800086c <NVIC_GetPriorityGrouping>
 80009dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff ff92 	bl	800090c <NVIC_EncodePriority>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff61 	bl	80008b8 <NVIC_SetPriority>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff3b 	bl	8000888 <NVIC_EnableIRQ>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ffa2 	bl	800096c <SysTick_Config>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d005      	beq.n	8000a56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e057      	b.n	8000b06 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	6812      	ldr	r2, [r2, #0]
 8000a5e:	6812      	ldr	r2, [r2, #0]
 8000a60:	f022 020e 	bic.w	r2, r2, #14
 8000a64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	6812      	ldr	r2, [r2, #0]
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	f022 0201 	bic.w	r2, r2, #1
 8000a74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a76:	4a26      	ldr	r2, [pc, #152]	; (8000b10 <HAL_DMA_Abort_IT+0xdc>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <HAL_DMA_Abort_IT+0xe0>)
 8000a80:	4299      	cmp	r1, r3
 8000a82:	d02e      	beq.n	8000ae2 <HAL_DMA_Abort_IT+0xae>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <HAL_DMA_Abort_IT+0xe4>)
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	d026      	beq.n	8000ade <HAL_DMA_Abort_IT+0xaa>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <HAL_DMA_Abort_IT+0xe8>)
 8000a98:	4299      	cmp	r1, r3
 8000a9a:	d01d      	beq.n	8000ad8 <HAL_DMA_Abort_IT+0xa4>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <HAL_DMA_Abort_IT+0xec>)
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d014      	beq.n	8000ad2 <HAL_DMA_Abort_IT+0x9e>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <HAL_DMA_Abort_IT+0xf0>)
 8000ab0:	4299      	cmp	r1, r3
 8000ab2:	d00b      	beq.n	8000acc <HAL_DMA_Abort_IT+0x98>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_DMA_Abort_IT+0xf4>)
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d102      	bne.n	8000ac6 <HAL_DMA_Abort_IT+0x92>
 8000ac0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ac4:	e00e      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xb0>
 8000ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aca:	e00b      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xb0>
 8000acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad0:	e008      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xb0>
 8000ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad6:	e005      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xb0>
 8000ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000adc:	e002      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xb0>
 8000ade:	2310      	movs	r3, #16
 8000ae0:	e000      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xb0>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	4798      	blx	r3
    } 
  }
  return status;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020008 	.word	0x40020008
 8000b18:	4002001c 	.word	0x4002001c
 8000b1c:	40020030 	.word	0x40020030
 8000b20:	40020044 	.word	0x40020044
 8000b24:	40020058 	.word	0x40020058
 8000b28:	4002006c 	.word	0x4002006c

08000b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4e:	e127      	b.n	8000da0 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000b50:	2201      	movs	r2, #1
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	4013      	ands	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	f040 8116 	bne.w	8000d9a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2b12      	cmp	r3, #18
 8000b74:	d034      	beq.n	8000be0 <HAL_GPIO_Init+0xb4>
 8000b76:	2b12      	cmp	r3, #18
 8000b78:	d80d      	bhi.n	8000b96 <HAL_GPIO_Init+0x6a>
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d02b      	beq.n	8000bd6 <HAL_GPIO_Init+0xaa>
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d804      	bhi.n	8000b8c <HAL_GPIO_Init+0x60>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d031      	beq.n	8000bea <HAL_GPIO_Init+0xbe>
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d01c      	beq.n	8000bc4 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b8a:	e048      	b.n	8000c1e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	d043      	beq.n	8000c18 <HAL_GPIO_Init+0xec>
 8000b90:	2b11      	cmp	r3, #17
 8000b92:	d01b      	beq.n	8000bcc <HAL_GPIO_Init+0xa0>
          break;
 8000b94:	e043      	b.n	8000c1e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000b96:	4a87      	ldr	r2, [pc, #540]	; (8000db4 <HAL_GPIO_Init+0x288>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d026      	beq.n	8000bea <HAL_GPIO_Init+0xbe>
 8000b9c:	4a85      	ldr	r2, [pc, #532]	; (8000db4 <HAL_GPIO_Init+0x288>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d806      	bhi.n	8000bb0 <HAL_GPIO_Init+0x84>
 8000ba2:	4a85      	ldr	r2, [pc, #532]	; (8000db8 <HAL_GPIO_Init+0x28c>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d020      	beq.n	8000bea <HAL_GPIO_Init+0xbe>
 8000ba8:	4a84      	ldr	r2, [pc, #528]	; (8000dbc <HAL_GPIO_Init+0x290>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d01d      	beq.n	8000bea <HAL_GPIO_Init+0xbe>
          break;
 8000bae:	e036      	b.n	8000c1e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000bb0:	4a83      	ldr	r2, [pc, #524]	; (8000dc0 <HAL_GPIO_Init+0x294>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d019      	beq.n	8000bea <HAL_GPIO_Init+0xbe>
 8000bb6:	4a83      	ldr	r2, [pc, #524]	; (8000dc4 <HAL_GPIO_Init+0x298>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d016      	beq.n	8000bea <HAL_GPIO_Init+0xbe>
 8000bbc:	4a82      	ldr	r2, [pc, #520]	; (8000dc8 <HAL_GPIO_Init+0x29c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d013      	beq.n	8000bea <HAL_GPIO_Init+0xbe>
          break;
 8000bc2:	e02c      	b.n	8000c1e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	623b      	str	r3, [r7, #32]
          break;
 8000bca:	e028      	b.n	8000c1e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	623b      	str	r3, [r7, #32]
          break;
 8000bd4:	e023      	b.n	8000c1e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	3308      	adds	r3, #8
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e01e      	b.n	8000c1e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	330c      	adds	r3, #12
 8000be6:	623b      	str	r3, [r7, #32]
          break;
 8000be8:	e019      	b.n	8000c1e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d102      	bne.n	8000bf8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	623b      	str	r3, [r7, #32]
          break;
 8000bf6:	e012      	b.n	8000c1e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d105      	bne.n	8000c0c <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c00:	2308      	movs	r3, #8
 8000c02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	611a      	str	r2, [r3, #16]
          break;
 8000c0a:	e008      	b.n	8000c1e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	615a      	str	r2, [r3, #20]
          break;
 8000c16:	e002      	b.n	8000c1e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	2bff      	cmp	r3, #255	; 0xff
 8000c22:	d801      	bhi.n	8000c28 <HAL_GPIO_Init+0xfc>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	e001      	b.n	8000c2c <HAL_GPIO_Init+0x100>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	2bff      	cmp	r3, #255	; 0xff
 8000c32:	d802      	bhi.n	8000c3a <HAL_GPIO_Init+0x10e>
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	e002      	b.n	8000c40 <HAL_GPIO_Init+0x114>
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	3b08      	subs	r3, #8
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	210f      	movs	r1, #15
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	401a      	ands	r2, r3
 8000c52:	6a39      	ldr	r1, [r7, #32]
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 8096 	beq.w	8000d9a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6e:	4a57      	ldr	r2, [pc, #348]	; (8000dcc <HAL_GPIO_Init+0x2a0>)
 8000c70:	4b56      	ldr	r3, [pc, #344]	; (8000dcc <HAL_GPIO_Init+0x2a0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <HAL_GPIO_Init+0x2a0>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000c86:	4a52      	ldr	r2, [pc, #328]	; (8000dd0 <HAL_GPIO_Init+0x2a4>)
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c92:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a49      	ldr	r2, [pc, #292]	; (8000dd4 <HAL_GPIO_Init+0x2a8>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d013      	beq.n	8000cda <HAL_GPIO_Init+0x1ae>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a48      	ldr	r2, [pc, #288]	; (8000dd8 <HAL_GPIO_Init+0x2ac>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d00d      	beq.n	8000cd6 <HAL_GPIO_Init+0x1aa>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a47      	ldr	r2, [pc, #284]	; (8000ddc <HAL_GPIO_Init+0x2b0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d007      	beq.n	8000cd2 <HAL_GPIO_Init+0x1a6>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a46      	ldr	r2, [pc, #280]	; (8000de0 <HAL_GPIO_Init+0x2b4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_GPIO_Init+0x1a2>
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e006      	b.n	8000cdc <HAL_GPIO_Init+0x1b0>
 8000cce:	2304      	movs	r3, #4
 8000cd0:	e004      	b.n	8000cdc <HAL_GPIO_Init+0x1b0>
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	e002      	b.n	8000cdc <HAL_GPIO_Init+0x1b0>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <HAL_GPIO_Init+0x1b0>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cde:	f002 0203 	and.w	r2, r2, #3
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	4093      	lsls	r3, r2
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000cec:	4938      	ldr	r1, [pc, #224]	; (8000dd0 <HAL_GPIO_Init+0x2a4>)
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d06:	4937      	ldr	r1, [pc, #220]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d08:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]
 8000d12:	e006      	b.n	8000d22 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d14:	4933      	ldr	r1, [pc, #204]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d006      	beq.n	8000d3c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d2e:	492d      	ldr	r1, [pc, #180]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d30:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	604b      	str	r3, [r1, #4]
 8000d3a:	e006      	b.n	8000d4a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d3c:	4929      	ldr	r1, [pc, #164]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d3e:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4013      	ands	r3, r2
 8000d48:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d56:	4923      	ldr	r1, [pc, #140]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	608b      	str	r3, [r1, #8]
 8000d62:	e006      	b.n	8000d72 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d64:	491f      	ldr	r1, [pc, #124]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	4013      	ands	r3, r2
 8000d70:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d006      	beq.n	8000d8c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d7e:	4919      	ldr	r1, [pc, #100]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60cb      	str	r3, [r1, #12]
 8000d8a:	e006      	b.n	8000d9a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d8c:	4915      	ldr	r1, [pc, #84]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4013      	ands	r3, r2
 8000d98:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	2b0f      	cmp	r3, #15
 8000da4:	f67f aed4 	bls.w	8000b50 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000da8:	bf00      	nop
 8000daa:	372c      	adds	r7, #44	; 0x2c
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	10210000 	.word	0x10210000
 8000db8:	10110000 	.word	0x10110000
 8000dbc:	10120000 	.word	0x10120000
 8000dc0:	10310000 	.word	0x10310000
 8000dc4:	10320000 	.word	0x10320000
 8000dc8:	10220000 	.word	0x10220000
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40011400 	.word	0x40011400
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
 8000df4:	4613      	mov	r3, r2
 8000df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000df8:	787b      	ldrb	r3, [r7, #1]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dfe:	887a      	ldrh	r2, [r7, #2]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e04:	e003      	b.n	8000e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	041a      	lsls	r2, r3, #16
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	611a      	str	r2, [r3, #16]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	405a      	eors	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	60da      	str	r2, [r3, #12]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
	...

08000e3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e48:	695a      	ldr	r2, [r3, #20]
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d006      	beq.n	8000e60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fa2c 	bl	80002b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40010400 	.word	0x40010400

08000e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 8087 	beq.w	8000f94 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e86:	4b92      	ldr	r3, [pc, #584]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d00c      	beq.n	8000eac <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e92:	4b8f      	ldr	r3, [pc, #572]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d112      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x58>
 8000e9e:	4b8c      	ldr	r3, [pc, #560]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eaa:	d10b      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eac:	4b88      	ldr	r3, [pc, #544]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d06c      	beq.n	8000f92 <HAL_RCC_OscConfig+0x126>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d168      	bne.n	8000f92 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e22d      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ecc:	d106      	bne.n	8000edc <HAL_RCC_OscConfig+0x70>
 8000ece:	4a80      	ldr	r2, [pc, #512]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000ed0:	4b7f      	ldr	r3, [pc, #508]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e02e      	b.n	8000f3a <HAL_RCC_OscConfig+0xce>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10c      	bne.n	8000efe <HAL_RCC_OscConfig+0x92>
 8000ee4:	4a7a      	ldr	r2, [pc, #488]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000ee6:	4b7a      	ldr	r3, [pc, #488]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4a77      	ldr	r2, [pc, #476]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000ef2:	4b77      	ldr	r3, [pc, #476]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e01d      	b.n	8000f3a <HAL_RCC_OscConfig+0xce>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f06:	d10c      	bne.n	8000f22 <HAL_RCC_OscConfig+0xb6>
 8000f08:	4a71      	ldr	r2, [pc, #452]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000f0a:	4b71      	ldr	r3, [pc, #452]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4a6e      	ldr	r2, [pc, #440]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000f16:	4b6e      	ldr	r3, [pc, #440]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	e00b      	b.n	8000f3a <HAL_RCC_OscConfig+0xce>
 8000f22:	4a6b      	ldr	r2, [pc, #428]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000f24:	4b6a      	ldr	r3, [pc, #424]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4a68      	ldr	r2, [pc, #416]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000f30:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d013      	beq.n	8000f6a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f42:	f7ff fc65 	bl	8000810 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fc61 	bl	8000810 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b64      	cmp	r3, #100	; 0x64
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e1e1      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5c:	4b5c      	ldr	r3, [pc, #368]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0xde>
 8000f68:	e014      	b.n	8000f94 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fc51 	bl	8000810 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f72:	f7ff fc4d 	bl	8000810 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b64      	cmp	r3, #100	; 0x64
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e1cd      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f84:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f0      	bne.n	8000f72 <HAL_RCC_OscConfig+0x106>
 8000f90:	e000      	b.n	8000f94 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d063      	beq.n	8001068 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fa0:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00b      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fac:	4b48      	ldr	r3, [pc, #288]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d11c      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x186>
 8000fb8:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d116      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc4:	4b42      	ldr	r3, [pc, #264]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_RCC_OscConfig+0x170>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d001      	beq.n	8000fdc <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e1a1      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fdc:	493c      	ldr	r1, [pc, #240]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000fde:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff0:	e03a      	b.n	8001068 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d020      	beq.n	800103c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <HAL_RCC_OscConfig+0x268>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fc06 	bl	8000810 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001008:	f7ff fc02 	bl	8000810 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e182      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001026:	492a      	ldr	r1, [pc, #168]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
 800103a:	e015      	b.n	8001068 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <HAL_RCC_OscConfig+0x268>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fbe5 	bl	8000810 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800104a:	f7ff fbe1 	bl	8000810 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e161      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d039      	beq.n	80010e8 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d019      	beq.n	80010b0 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001082:	f7ff fbc5 	bl	8000810 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800108a:	f7ff fbc1 	bl	8000810 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e141      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_RCC_OscConfig+0x264>)
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f0      	beq.n	800108a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 fae3 	bl	8001674 <RCC_Delay>
 80010ae:	e01b      	b.n	80010e8 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fbab 	bl	8000810 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010bc:	e00e      	b.n	80010dc <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010be:	f7ff fba7 	bl	8000810 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d907      	bls.n	80010dc <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e127      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
 80010d0:	40021000 	.word	0x40021000
 80010d4:	42420000 	.word	0x42420000
 80010d8:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010dc:	4b92      	ldr	r3, [pc, #584]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ea      	bne.n	80010be <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80a6 	beq.w	8001242 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fa:	4b8b      	ldr	r3, [pc, #556]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10d      	bne.n	8001122 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4a88      	ldr	r2, [pc, #544]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 8001108:	4b87      	ldr	r3, [pc, #540]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b85      	ldr	r3, [pc, #532]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800111e:	2301      	movs	r3, #1
 8001120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001122:	4b82      	ldr	r3, [pc, #520]	; (800132c <HAL_RCC_OscConfig+0x4c0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	2b00      	cmp	r3, #0
 800112c:	d118      	bne.n	8001160 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112e:	4a7f      	ldr	r2, [pc, #508]	; (800132c <HAL_RCC_OscConfig+0x4c0>)
 8001130:	4b7e      	ldr	r3, [pc, #504]	; (800132c <HAL_RCC_OscConfig+0x4c0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800113a:	f7ff fb69 	bl	8000810 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001142:	f7ff fb65 	bl	8000810 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b64      	cmp	r3, #100	; 0x64
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e0e5      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001154:	4b75      	ldr	r3, [pc, #468]	; (800132c <HAL_RCC_OscConfig+0x4c0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d106      	bne.n	8001176 <HAL_RCC_OscConfig+0x30a>
 8001168:	4a6f      	ldr	r2, [pc, #444]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 800116a:	4b6f      	ldr	r3, [pc, #444]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6213      	str	r3, [r2, #32]
 8001174:	e02d      	b.n	80011d2 <HAL_RCC_OscConfig+0x366>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0x32c>
 800117e:	4a6a      	ldr	r2, [pc, #424]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 8001180:	4b69      	ldr	r3, [pc, #420]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	6213      	str	r3, [r2, #32]
 800118a:	4a67      	ldr	r2, [pc, #412]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 800118c:	4b66      	ldr	r3, [pc, #408]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	f023 0304 	bic.w	r3, r3, #4
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	e01c      	b.n	80011d2 <HAL_RCC_OscConfig+0x366>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d10c      	bne.n	80011ba <HAL_RCC_OscConfig+0x34e>
 80011a0:	4a61      	ldr	r2, [pc, #388]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80011a2:	4b61      	ldr	r3, [pc, #388]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6213      	str	r3, [r2, #32]
 80011ac:	4a5e      	ldr	r2, [pc, #376]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80011ae:	4b5e      	ldr	r3, [pc, #376]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	e00b      	b.n	80011d2 <HAL_RCC_OscConfig+0x366>
 80011ba:	4a5b      	ldr	r2, [pc, #364]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80011bc:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	6213      	str	r3, [r2, #32]
 80011c6:	4a58      	ldr	r2, [pc, #352]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80011c8:	4b57      	ldr	r3, [pc, #348]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f023 0304 	bic.w	r3, r3, #4
 80011d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d015      	beq.n	8001206 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011da:	f7ff fb19 	bl	8000810 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e0:	e00a      	b.n	80011f8 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e2:	f7ff fb15 	bl	8000810 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e093      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f8:	4b4b      	ldr	r3, [pc, #300]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0ee      	beq.n	80011e2 <HAL_RCC_OscConfig+0x376>
 8001204:	e014      	b.n	8001230 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fb03 	bl	8000810 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120c:	e00a      	b.n	8001224 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff faff 	bl	8000810 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	f241 3288 	movw	r2, #5000	; 0x1388
 800121c:	4293      	cmp	r3, r2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e07d      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001224:	4b40      	ldr	r3, [pc, #256]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1ee      	bne.n	800120e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d105      	bne.n	8001242 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001236:	4a3c      	ldr	r2, [pc, #240]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 8001238:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d069      	beq.n	800131e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b08      	cmp	r3, #8
 8001254:	d061      	beq.n	800131a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d146      	bne.n	80012ec <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125e:	4b34      	ldr	r3, [pc, #208]	; (8001330 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fad4 	bl	8000810 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff fad0 	bl	8000810 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e050      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001292:	d108      	bne.n	80012a6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001294:	4924      	ldr	r1, [pc, #144]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a6:	4820      	ldr	r0, [pc, #128]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a19      	ldr	r1, [r3, #32]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	430b      	orrs	r3, r1
 80012ba:	4313      	orrs	r3, r2
 80012bc:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff faa4 	bl	8000810 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff faa0 	bl	8000810 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e020      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x460>
 80012ea:	e018      	b.n	800131e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fa8d 	bl	8000810 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fa89 	bl	8000810 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e009      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_RCC_OscConfig+0x4bc>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f0      	bne.n	80012fa <HAL_RCC_OscConfig+0x48e>
 8001318:	e001      	b.n	800131e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000
 800132c:	40007000 	.word	0x40007000
 8001330:	42420060 	.word	0x42420060

08001334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001342:	4b7e      	ldr	r3, [pc, #504]	; (800153c <HAL_RCC_ClockConfig+0x208>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0207 	and.w	r2, r3, #7
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d210      	bcs.n	8001372 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001350:	497a      	ldr	r1, [pc, #488]	; (800153c <HAL_RCC_ClockConfig+0x208>)
 8001352:	4b7a      	ldr	r3, [pc, #488]	; (800153c <HAL_RCC_ClockConfig+0x208>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 0207 	bic.w	r2, r3, #7
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001360:	4b76      	ldr	r3, [pc, #472]	; (800153c <HAL_RCC_ClockConfig+0x208>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0207 	and.w	r2, r3, #7
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d001      	beq.n	8001372 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e0e0      	b.n	8001534 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d020      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800138a:	4a6d      	ldr	r2, [pc, #436]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 800138c:	4b6c      	ldr	r3, [pc, #432]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001394:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013a2:	4a67      	ldr	r2, [pc, #412]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 80013a4:	4b66      	ldr	r3, [pc, #408]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013ac:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ae:	4964      	ldr	r1, [pc, #400]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 80013b0:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d06a      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d4:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d115      	bne.n	800140c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0a7      	b.n	8001534 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d107      	bne.n	80013fc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ec:	4b54      	ldr	r3, [pc, #336]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e09b      	b.n	8001534 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	4b50      	ldr	r3, [pc, #320]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e093      	b.n	8001534 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140c:	494c      	ldr	r1, [pc, #304]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 800140e:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f023 0203 	bic.w	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800141e:	f7ff f9f7 	bl	8000810 <HAL_GetTick>
 8001422:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d112      	bne.n	8001452 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142e:	f7ff f9ef 	bl	8000810 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e077      	b.n	8001534 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001444:	4b3e      	ldr	r3, [pc, #248]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b04      	cmp	r3, #4
 800144e:	d1ee      	bne.n	800142e <HAL_RCC_ClockConfig+0xfa>
 8001450:	e027      	b.n	80014a2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d11d      	bne.n	8001496 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145c:	f7ff f9d8 	bl	8000810 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	; 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e060      	b.n	8001534 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b08      	cmp	r3, #8
 800147c:	d1ee      	bne.n	800145c <HAL_RCC_ClockConfig+0x128>
 800147e:	e010      	b.n	80014a2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001480:	f7ff f9c6 	bl	8000810 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	; 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e04e      	b.n	8001534 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ee      	bne.n	8001480 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_RCC_ClockConfig+0x208>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0207 	and.w	r2, r3, #7
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d910      	bls.n	80014d2 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b0:	4922      	ldr	r1, [pc, #136]	; (800153c <HAL_RCC_ClockConfig+0x208>)
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_RCC_ClockConfig+0x208>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 0207 	bic.w	r2, r3, #7
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_RCC_ClockConfig+0x208>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0207 	and.w	r2, r3, #7
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e030      	b.n	8001534 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d008      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014de:	4918      	ldr	r1, [pc, #96]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d009      	beq.n	8001510 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014fc:	4910      	ldr	r1, [pc, #64]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001510:	f000 f81c 	bl	800154c <HAL_RCC_GetSysClockFreq>
 8001514:	4601      	mov	r1, r0
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_RCC_ClockConfig+0x20c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_RCC_ClockConfig+0x210>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	fa21 f303 	lsr.w	r3, r1, r3
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_RCC_ClockConfig+0x214>)
 800152a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff f92d 	bl	800078c <HAL_InitTick>
  
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40022000 	.word	0x40022000
 8001540:	40021000 	.word	0x40021000
 8001544:	080029e0 	.word	0x080029e0
 8001548:	20000014 	.word	0x20000014

0800154c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	b490      	push	{r4, r7}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001554:	1d3c      	adds	r4, r7, #4
 8001556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800155c:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_RCC_GetSysClockFreq+0xb4>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001576:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b04      	cmp	r3, #4
 8001584:	d002      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x40>
 8001586:	2b08      	cmp	r3, #8
 8001588:	d003      	beq.n	8001592 <HAL_RCC_GetSysClockFreq+0x46>
 800158a:	e02d      	b.n	80015e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <HAL_RCC_GetSysClockFreq+0xbc>)
 800158e:	623b      	str	r3, [r7, #32]
      break;
 8001590:	e02d      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800159e:	4413      	add	r3, r2
 80015a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	0c5b      	lsrs	r3, r3, #17
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015be:	4413      	add	r3, r2
 80015c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015c4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015ca:	fb02 f203 	mul.w	r2, r2, r3
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	e004      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	4a0c      	ldr	r2, [pc, #48]	; (800160c <HAL_RCC_GetSysClockFreq+0xc0>)
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	623b      	str	r3, [r7, #32]
      break;
 80015e6:	e002      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015ea:	623b      	str	r3, [r7, #32]
      break;
 80015ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ee:	6a3b      	ldr	r3, [r7, #32]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc90      	pop	{r4, r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	08002998 	.word	0x08002998
 8001600:	080029a8 	.word	0x080029a8
 8001604:	40021000 	.word	0x40021000
 8001608:	007a1200 	.word	0x007a1200
 800160c:	003d0900 	.word	0x003d0900

08001610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <HAL_RCC_GetHCLKFreq+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000014 	.word	0x20000014

08001624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001628:	f7ff fff2 	bl	8001610 <HAL_RCC_GetHCLKFreq>
 800162c:	4601      	mov	r1, r0
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	4a03      	ldr	r2, [pc, #12]	; (8001648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001640:	4618      	mov	r0, r3
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	080029f0 	.word	0x080029f0

0800164c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001650:	f7ff ffde 	bl	8001610 <HAL_RCC_GetHCLKFreq>
 8001654:	4601      	mov	r1, r0
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	0adb      	lsrs	r3, r3, #11
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	4a03      	ldr	r2, [pc, #12]	; (8001670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001662:	5cd3      	ldrb	r3, [r2, r3]
 8001664:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001668:	4618      	mov	r0, r3
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	080029f0 	.word	0x080029f0

08001674 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <RCC_Delay+0x34>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <RCC_Delay+0x38>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0a5b      	lsrs	r3, r3, #9
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	fb02 f303 	mul.w	r3, r2, r3
 800168e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001690:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1e5a      	subs	r2, r3, #1
 8001696:	60fa      	str	r2, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f9      	bne.n	8001690 <RCC_Delay+0x1c>
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000014 	.word	0x20000014
 80016ac:	10624dd3 	.word	0x10624dd3

080016b0 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e01d      	b.n	80016fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7fe ffa0 	bl	800061c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3304      	adds	r3, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4610      	mov	r0, r2
 80016f0:	f000 fa2a 	bl	8001b48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	68d2      	ldr	r2, [r2, #12]
 8001718:	f042 0201 	orr.w	r2, r2, #1
 800171c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b02      	cmp	r3, #2
 800174e:	d122      	bne.n	8001796 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b02      	cmp	r3, #2
 800175c:	d11b      	bne.n	8001796 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f06f 0202 	mvn.w	r2, #2
 8001766:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f9c8 	bl	8001b12 <HAL_TIM_IC_CaptureCallback>
 8001782:	e005      	b.n	8001790 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f9bb 	bl	8001b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f9ca 	bl	8001b24 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d122      	bne.n	80017ea <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d11b      	bne.n	80017ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f06f 0204 	mvn.w	r2, #4
 80017ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f99e 	bl	8001b12 <HAL_TIM_IC_CaptureCallback>
 80017d6:	e005      	b.n	80017e4 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f991 	bl	8001b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f9a0 	bl	8001b24 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d122      	bne.n	800183e <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b08      	cmp	r3, #8
 8001804:	d11b      	bne.n	800183e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f06f 0208 	mvn.w	r2, #8
 800180e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2204      	movs	r2, #4
 8001814:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f974 	bl	8001b12 <HAL_TIM_IC_CaptureCallback>
 800182a:	e005      	b.n	8001838 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f967 	bl	8001b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f976 	bl	8001b24 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b10      	cmp	r3, #16
 800184a:	d122      	bne.n	8001892 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b10      	cmp	r3, #16
 8001858:	d11b      	bne.n	8001892 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f06f 0210 	mvn.w	r2, #16
 8001862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2208      	movs	r2, #8
 8001868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f94a 	bl	8001b12 <HAL_TIM_IC_CaptureCallback>
 800187e:	e005      	b.n	800188c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f93d 	bl	8001b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f94c 	bl	8001b24 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d10e      	bne.n	80018be <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d107      	bne.n	80018be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f06f 0201 	mvn.w	r2, #1
 80018b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7fe fcf3 	bl	80002a4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c8:	2b80      	cmp	r3, #128	; 0x80
 80018ca:	d10e      	bne.n	80018ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	2b80      	cmp	r3, #128	; 0x80
 80018d8:	d107      	bne.n	80018ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018e2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 fa87 	bl	8001df8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f4:	2b40      	cmp	r3, #64	; 0x40
 80018f6:	d10e      	bne.n	8001916 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001902:	2b40      	cmp	r3, #64	; 0x40
 8001904:	d107      	bne.n	8001916 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800190e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f910 	bl	8001b36 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b20      	cmp	r3, #32
 8001922:	d10e      	bne.n	8001942 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	2b20      	cmp	r3, #32
 8001930:	d107      	bne.n	8001942 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f06f 0220 	mvn.w	r2, #32
 800193a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 fa52 	bl	8001de6 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_TIM_ConfigClockSource+0x1c>
 8001962:	2302      	movs	r3, #2
 8001964:	e0c8      	b.n	8001af8 <HAL_TIM_ConfigClockSource+0x1ae>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001984:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800198c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b40      	cmp	r3, #64	; 0x40
 800199c:	d077      	beq.n	8001a8e <HAL_TIM_ConfigClockSource+0x144>
 800199e:	2b40      	cmp	r3, #64	; 0x40
 80019a0:	d80e      	bhi.n	80019c0 <HAL_TIM_ConfigClockSource+0x76>
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	f000 808a 	beq.w	8001abc <HAL_TIM_ConfigClockSource+0x172>
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	d802      	bhi.n	80019b2 <HAL_TIM_ConfigClockSource+0x68>
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d07e      	beq.n	8001aae <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80019b0:	e099      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	f000 8089 	beq.w	8001aca <HAL_TIM_ConfigClockSource+0x180>
 80019b8:	2b30      	cmp	r3, #48	; 0x30
 80019ba:	f000 808d 	beq.w	8001ad8 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 80019be:	e092      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80019c0:	2b70      	cmp	r3, #112	; 0x70
 80019c2:	d016      	beq.n	80019f2 <HAL_TIM_ConfigClockSource+0xa8>
 80019c4:	2b70      	cmp	r3, #112	; 0x70
 80019c6:	d804      	bhi.n	80019d2 <HAL_TIM_ConfigClockSource+0x88>
 80019c8:	2b50      	cmp	r3, #80	; 0x50
 80019ca:	d040      	beq.n	8001a4e <HAL_TIM_ConfigClockSource+0x104>
 80019cc:	2b60      	cmp	r3, #96	; 0x60
 80019ce:	d04e      	beq.n	8001a6e <HAL_TIM_ConfigClockSource+0x124>
    break;
 80019d0:	e089      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80019d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d6:	d003      	beq.n	80019e0 <HAL_TIM_ConfigClockSource+0x96>
 80019d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019dc:	d024      	beq.n	8001a28 <HAL_TIM_ConfigClockSource+0xde>
    break;
 80019de:	e082      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	6892      	ldr	r2, [r2, #8]
 80019ea:	f022 0207 	bic.w	r2, r2, #7
 80019ee:	609a      	str	r2, [r3, #8]
    break;
 80019f0:	e079      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6899      	ldr	r1, [r3, #8]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f000 f98b 	bl	8001d1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	609a      	str	r2, [r3, #8]
    break;
 8001a26:	e05e      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6899      	ldr	r1, [r3, #8]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f000 f970 	bl	8001d1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	6892      	ldr	r2, [r2, #8]
 8001a46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a4a:	609a      	str	r2, [r3, #8]
    break;
 8001a4c:	e04b      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6859      	ldr	r1, [r3, #4]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f000 f8da 	bl	8001c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2150      	movs	r1, #80	; 0x50
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f939 	bl	8001cde <TIM_ITRx_SetConfig>
    break;
 8001a6c:	e03b      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6859      	ldr	r1, [r3, #4]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f000 f8fc 	bl	8001c78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2160      	movs	r1, #96	; 0x60
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f929 	bl	8001cde <TIM_ITRx_SetConfig>
    break;
 8001a8c:	e02b      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6859      	ldr	r1, [r3, #4]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f000 f8ba 	bl	8001c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2140      	movs	r1, #64	; 0x40
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f919 	bl	8001cde <TIM_ITRx_SetConfig>
    break;
 8001aac:	e01b      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 f912 	bl	8001cde <TIM_ITRx_SetConfig>
    break;
 8001aba:	e014      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2110      	movs	r1, #16
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f90b 	bl	8001cde <TIM_ITRx_SetConfig>
    break;
 8001ac8:	e00d      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2120      	movs	r1, #32
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f904 	bl	8001cde <TIM_ITRx_SetConfig>
    break;
 8001ad6:	e006      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2130      	movs	r1, #48	; 0x30
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f8fd 	bl	8001cde <TIM_ITRx_SetConfig>
    break;
 8001ae4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a2a      	ldr	r2, [pc, #168]	; (8001c08 <TIM_Base_SetConfig+0xc0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d00b      	beq.n	8001b7c <TIM_Base_SetConfig+0x34>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6a:	d007      	beq.n	8001b7c <TIM_Base_SetConfig+0x34>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a27      	ldr	r2, [pc, #156]	; (8001c0c <TIM_Base_SetConfig+0xc4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d003      	beq.n	8001b7c <TIM_Base_SetConfig+0x34>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <TIM_Base_SetConfig+0xc8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d108      	bne.n	8001b8e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <TIM_Base_SetConfig+0xc0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00b      	beq.n	8001bae <TIM_Base_SetConfig+0x66>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9c:	d007      	beq.n	8001bae <TIM_Base_SetConfig+0x66>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a1a      	ldr	r2, [pc, #104]	; (8001c0c <TIM_Base_SetConfig+0xc4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d003      	beq.n	8001bae <TIM_Base_SetConfig+0x66>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <TIM_Base_SetConfig+0xc8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d108      	bne.n	8001bc0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bc6:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <TIM_Base_SetConfig+0xc0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d103      	bne.n	8001bf8 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	615a      	str	r2, [r3, #20]
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	40012c00 	.word	0x40012c00
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40000800 	.word	0x40000800

08001c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	f023 0201 	bic.w	r2, r3, #1
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	f023 030a 	bic.w	r3, r3, #10
 8001c58:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	621a      	str	r2, [r3, #32]
}
 8001c6e:	bf00      	nop
 8001c70:	371c      	adds	r7, #28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f023 0210 	bic.w	r2, r3, #16
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001caa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	031b      	lsls	r3, r3, #12
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	621a      	str	r2, [r3, #32]
}
 8001cd4:	bf00      	nop
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cfa:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	f043 0307 	orr.w	r3, r3, #7
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	609a      	str	r2, [r3, #8]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	021a      	lsls	r2, r3, #8
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	609a      	str	r2, [r3, #8]
}
 8001d54:	bf00      	nop
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e032      	b.n	8001ddc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2202      	movs	r2, #2
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	6852      	ldr	r2, [r2, #4]
 8001d90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d94:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	6851      	ldr	r1, [r2, #4]
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	6892      	ldr	r2, [r2, #8]
 8001db2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db6:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	6891      	ldr	r1, [r2, #8]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	6852      	ldr	r2, [r2, #4]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e03f      	b.n	8001e9c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d106      	bne.n	8001e36 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7fe fc41 	bl	80006b8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2224      	movs	r2, #36	; 0x24
 8001e3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	68d2      	ldr	r2, [r2, #12]
 8001e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e4c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 faa2 	bl	8002398 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	6912      	ldr	r2, [r2, #16]
 8001e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	6952      	ldr	r2, [r2, #20]
 8001e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e72:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	68d2      	ldr	r2, [r2, #12]
 8001e7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e82:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d130      	bne.n	8001f20 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL) || (Size == 0U)) 
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_UART_Transmit_IT+0x26>
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e029      	b.n	8001f22 <HAL_UART_Transmit_IT+0x7e>
    }
    /* Process Locked */
    __HAL_LOCK(huart);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_UART_Transmit_IT+0x38>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e022      	b.n	8001f22 <HAL_UART_Transmit_IT+0x7e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	88fa      	ldrh	r2, [r7, #6]
 8001eee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	88fa      	ldrh	r2, [r7, #6]
 8001ef4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2221      	movs	r2, #33	; 0x21
 8001f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	68d2      	ldr	r2, [r2, #12]
 8001f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f1a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e000      	b.n	8001f22 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10d      	bne.n	8001f7e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_UART_IRQHandler+0x52>
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f98c 	bl	8002294 <UART_Receive_IT>
      return;
 8001f7c:	e0cc      	b.n	8002118 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80ab 	beq.w	80020dc <HAL_UART_IRQHandler+0x1b0>
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_UART_IRQHandler+0x70>
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80a0 	beq.w	80020dc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_UART_IRQHandler+0x90>
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_UART_IRQHandler+0xb0>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd4:	f043 0202 	orr.w	r2, r3, #2
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_UART_IRQHandler+0xd0>
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff4:	f043 0204 	orr.w	r2, r3, #4
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_UART_IRQHandler+0xf0>
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	f043 0208 	orr.w	r2, r3, #8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d078      	beq.n	8002116 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_UART_IRQHandler+0x112>
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f92b 	bl	8002294 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <HAL_UART_IRQHandler+0x13a>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d031      	beq.n	80020ca <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f877 	bl	800215a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d023      	beq.n	80020c2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	6952      	ldr	r2, [r2, #20]
 8002084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002088:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208e:	2b00      	cmp	r3, #0
 8002090:	d013      	beq.n	80020ba <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	4a22      	ldr	r2, [pc, #136]	; (8002120 <HAL_UART_IRQHandler+0x1f4>)
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fcc8 	bl	8000a34 <HAL_DMA_Abort_IT>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d016      	beq.n	80020d8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020b4:	4610      	mov	r0, r2
 80020b6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b8:	e00e      	b.n	80020d8 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f844 	bl	8002148 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c0:	e00a      	b.n	80020d8 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f840 	bl	8002148 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c8:	e006      	b.n	80020d8 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f83c 	bl	8002148 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80020d6:	e01e      	b.n	8002116 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d8:	bf00      	nop
    return;
 80020da:	e01c      	b.n	8002116 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_UART_IRQHandler+0x1cc>
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f863 	bl	80021bc <UART_Transmit_IT>
    return;
 80020f6:	e00f      	b.n	8002118 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_UART_IRQHandler+0x1ec>
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f8a9 	bl	8002264 <UART_EndTransmit_IT>
    return;
 8002112:	bf00      	nop
 8002114:	e000      	b.n	8002118 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002116:	bf00      	nop
  }
}
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	08002195 	.word	0x08002195

08002124 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	68d2      	ldr	r2, [r2, #12]
 800216c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002170:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	6952      	ldr	r2, [r2, #20]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff ffca 	bl	8002148 <HAL_UART_ErrorCallback>
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b21      	cmp	r3, #33	; 0x21
 80021ce:	d143      	bne.n	8002258 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d8:	d119      	bne.n	800220e <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	8812      	ldrh	r2, [r2, #0]
 80021e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021ec:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	1c9a      	adds	r2, r3, #2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	621a      	str	r2, [r3, #32]
 8002200:	e00e      	b.n	8002220 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	621a      	str	r2, [r3, #32]
 800220c:	e008      	b.n	8002220 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	1c58      	adds	r0, r3, #1
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	6208      	str	r0, [r1, #32]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29b      	uxth	r3, r3
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4619      	mov	r1, r3
 800222e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10f      	bne.n	8002254 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	68d2      	ldr	r2, [r2, #12]
 800223e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002242:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	68d2      	ldr	r2, [r2, #12]
 800224e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002252:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
  }
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	68d2      	ldr	r2, [r2, #12]
 8002276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800227a:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff4d 	bl	8002124 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b22      	cmp	r3, #34	; 0x22
 80022a6:	d171      	bne.n	800238c <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b0:	d123      	bne.n	80022fa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10e      	bne.n	80022de <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	1c9a      	adds	r2, r3, #2
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
 80022dc:	e029      	b.n	8002332 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
 80022f8:	e01b      	b.n	8002332 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	1c59      	adds	r1, r3, #1
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6291      	str	r1, [r2, #40]	; 0x28
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	6852      	ldr	r2, [r2, #4]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	e00c      	b.n	8002332 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	1c59      	adds	r1, r3, #1
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6291      	str	r1, [r2, #40]	; 0x28
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	6852      	ldr	r2, [r2, #4]
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29b      	uxth	r3, r3
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	4619      	mov	r1, r3
 8002340:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002342:	2b00      	cmp	r3, #0
 8002344:	d120      	bne.n	8002388 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	68d2      	ldr	r2, [r2, #12]
 8002350:	f022 0220 	bic.w	r2, r2, #32
 8002354:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	68d2      	ldr	r2, [r2, #12]
 8002360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002364:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	6952      	ldr	r2, [r2, #20]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fed9 	bl	8002136 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e002      	b.n	800238e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
  }
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	6912      	ldr	r2, [r2, #16]
 80023ae:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68d2      	ldr	r2, [r2, #12]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023de:	f023 030c 	bic.w	r3, r3, #12
 80023e2:	68f9      	ldr	r1, [r7, #12]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	6952      	ldr	r2, [r2, #20]
 80023f2:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6992      	ldr	r2, [r2, #24]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6f      	ldr	r2, [pc, #444]	; (80025c0 <UART_SetConfig+0x228>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d16b      	bne.n	80024e0 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681c      	ldr	r4, [r3, #0]
 800240c:	f7ff f91e 	bl	800164c <HAL_RCC_GetPCLK2Freq>
 8002410:	4602      	mov	r2, r0
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	009a      	lsls	r2, r3, #2
 800241a:	441a      	add	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	4a67      	ldr	r2, [pc, #412]	; (80025c4 <UART_SetConfig+0x22c>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	011d      	lsls	r5, r3, #4
 8002430:	f7ff f90c 	bl	800164c <HAL_RCC_GetPCLK2Freq>
 8002434:	4602      	mov	r2, r0
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	009a      	lsls	r2, r3, #2
 800243e:	441a      	add	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	fbb2 f6f3 	udiv	r6, r2, r3
 800244a:	f7ff f8ff 	bl	800164c <HAL_RCC_GetPCLK2Freq>
 800244e:	4602      	mov	r2, r0
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	009a      	lsls	r2, r3, #2
 8002458:	441a      	add	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	4a57      	ldr	r2, [pc, #348]	; (80025c4 <UART_SetConfig+0x22c>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2264      	movs	r2, #100	; 0x64
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	1af3      	subs	r3, r6, r3
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	3332      	adds	r3, #50	; 0x32
 8002478:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <UART_SetConfig+0x22c>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002484:	441d      	add	r5, r3
 8002486:	f7ff f8e1 	bl	800164c <HAL_RCC_GetPCLK2Freq>
 800248a:	4602      	mov	r2, r0
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	009a      	lsls	r2, r3, #2
 8002494:	441a      	add	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	fbb2 f6f3 	udiv	r6, r2, r3
 80024a0:	f7ff f8d4 	bl	800164c <HAL_RCC_GetPCLK2Freq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009a      	lsls	r2, r3, #2
 80024ae:	441a      	add	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ba:	4a42      	ldr	r2, [pc, #264]	; (80025c4 <UART_SetConfig+0x22c>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	2264      	movs	r2, #100	; 0x64
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	1af3      	subs	r3, r6, r3
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	3332      	adds	r3, #50	; 0x32
 80024ce:	4a3d      	ldr	r2, [pc, #244]	; (80025c4 <UART_SetConfig+0x22c>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	442b      	add	r3, r5
 80024dc:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80024de:	e06a      	b.n	80025b6 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681c      	ldr	r4, [r3, #0]
 80024e4:	f7ff f89e 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	009a      	lsls	r2, r3, #2
 80024f2:	441a      	add	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	4a31      	ldr	r2, [pc, #196]	; (80025c4 <UART_SetConfig+0x22c>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	011d      	lsls	r5, r3, #4
 8002508:	f7ff f88c 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 800250c:	4602      	mov	r2, r0
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009a      	lsls	r2, r3, #2
 8002516:	441a      	add	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002522:	f7ff f87f 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 8002526:	4602      	mov	r2, r0
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	009a      	lsls	r2, r3, #2
 8002530:	441a      	add	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	4a21      	ldr	r2, [pc, #132]	; (80025c4 <UART_SetConfig+0x22c>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2264      	movs	r2, #100	; 0x64
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	1af3      	subs	r3, r6, r3
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	3332      	adds	r3, #50	; 0x32
 8002550:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <UART_SetConfig+0x22c>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800255c:	441d      	add	r5, r3
 800255e:	f7ff f861 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 8002562:	4602      	mov	r2, r0
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	009a      	lsls	r2, r3, #2
 800256c:	441a      	add	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fbb2 f6f3 	udiv	r6, r2, r3
 8002578:	f7ff f854 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 800257c:	4602      	mov	r2, r0
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	009a      	lsls	r2, r3, #2
 8002586:	441a      	add	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <UART_SetConfig+0x22c>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	2264      	movs	r2, #100	; 0x64
 800259c:	fb02 f303 	mul.w	r3, r2, r3
 80025a0:	1af3      	subs	r3, r6, r3
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	3332      	adds	r3, #50	; 0x32
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <UART_SetConfig+0x22c>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	442b      	add	r3, r5
 80025b4:	60a3      	str	r3, [r4, #8]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025be:	bf00      	nop
 80025c0:	40013800 	.word	0x40013800
 80025c4:	51eb851f 	.word	0x51eb851f

080025c8 <assert_failed>:
    }

#else
    // empty function !
    void assert_failed(uint8_t * file, uint32_t line) 
    {
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
        (void)file;
        (void)line;
    }
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <_2nd_complement>:
 * @param num 
 */
static void _2nd_complement(int32_t* num);


static void _2nd_complement(int32_t* num) {
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	int32_t temp = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
	temp = (~(*num) + 1); 
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	425b      	negs	r3, r3
 80025ee:	60fb      	str	r3, [r7, #12]
	*num = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	601a      	str	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <num2str>:


uint8_t num2str(int32_t num_in, uint8_t *const pStr_out) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	77fb      	strb	r3, [r7, #31]
	uint8_t i2 = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	77bb      	strb	r3, [r7, #30]
	uint8_t num_cnt = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	777b      	strb	r3, [r7, #29]
	uint8_t sign_offset = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	773b      	strb	r3, [r7, #28]
	uint8_t temp_str[15];
	
	if (num_in == 0){
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <num2str+0x34>
		pStr_out[0] = '0';
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2230      	movs	r2, #48	; 0x30
 8002624:	701a      	strb	r2, [r3, #0]
		pStr_out[1] = 0; // zero termination
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
        num_cnt = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	777b      	strb	r3, [r7, #29]
 8002632:	e053      	b.n	80026dc <num2str+0xdc>
	} else {

		if (num_in < 0)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	da08      	bge.n	800264c <num2str+0x4c>
		{
			pStr_out[0] = '-';
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	222d      	movs	r2, #45	; 0x2d
 800263e:	701a      	strb	r2, [r3, #0]
			sign_offset = 1;
 8002640:	2301      	movs	r3, #1
 8002642:	773b      	strb	r3, [r7, #28]
			_2nd_complement(&num_in);
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ffc8 	bl	80025dc <_2nd_complement>
		}
		for (i = 0; num_in > 0; i++)
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
 8002650:	e01f      	b.n	8002692 <num2str+0x92>
		{
            /* @todo try to replace % operator (assumsion is that this is slow on 8bit) */
			temp_str[i] = (uint8_t)((num_in % 10) + '0'); // ascii shift for numbers 0 -> 48(dec)
 8002652:	7ff8      	ldrb	r0, [r7, #31]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4b25      	ldr	r3, [pc, #148]	; (80026ec <num2str+0xec>)
 8002658:	fb83 1302 	smull	r1, r3, r3, r2
 800265c:	1099      	asrs	r1, r3, #2
 800265e:	17d3      	asrs	r3, r2, #31
 8002660:	1ac9      	subs	r1, r1, r3
 8002662:	460b      	mov	r3, r1
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	1ad1      	subs	r1, r2, r3
 800266c:	b2cb      	uxtb	r3, r1
 800266e:	3330      	adds	r3, #48	; 0x30
 8002670:	b2da      	uxtb	r2, r3
 8002672:	f107 0320 	add.w	r3, r7, #32
 8002676:	4403      	add	r3, r0
 8002678:	f803 2c14 	strb.w	r2, [r3, #-20]
			num_in = num_in / 10;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <num2str+0xec>)
 8002680:	fb82 1203 	smull	r1, r2, r2, r3
 8002684:	1092      	asrs	r2, r2, #2
 8002686:	17db      	asrs	r3, r3, #31
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	607b      	str	r3, [r7, #4]
		for (i = 0; num_in > 0; i++)
 800268c:	7ffb      	ldrb	r3, [r7, #31]
 800268e:	3301      	adds	r3, #1
 8002690:	77fb      	strb	r3, [r7, #31]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	dcdc      	bgt.n	8002652 <num2str+0x52>
		}
		num_cnt = i;
 8002698:	7ffb      	ldrb	r3, [r7, #31]
 800269a:	777b      	strb	r3, [r7, #29]
		i += sign_offset;
 800269c:	7ffa      	ldrb	r2, [r7, #31]
 800269e:	7f3b      	ldrb	r3, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	77fb      	strb	r3, [r7, #31]
		// add null termination at the end of string
		pStr_out[i] = 0;
 80026a4:	7ffb      	ldrb	r3, [r7, #31]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
		// revers array
		for (i2 = 0; i2 < num_cnt; i2++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	77bb      	strb	r3, [r7, #30]
 80026b2:	e00f      	b.n	80026d4 <num2str+0xd4>
		{
			i--;
 80026b4:	7ffb      	ldrb	r3, [r7, #31]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	77fb      	strb	r3, [r7, #31]
			pStr_out[i] = temp_str[i2];
 80026ba:	7ffb      	ldrb	r3, [r7, #31]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	7fba      	ldrb	r2, [r7, #30]
 80026c2:	f107 0120 	add.w	r1, r7, #32
 80026c6:	440a      	add	r2, r1
 80026c8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80026cc:	701a      	strb	r2, [r3, #0]
		for (i2 = 0; i2 < num_cnt; i2++)
 80026ce:	7fbb      	ldrb	r3, [r7, #30]
 80026d0:	3301      	adds	r3, #1
 80026d2:	77bb      	strb	r3, [r7, #30]
 80026d4:	7fba      	ldrb	r2, [r7, #30]
 80026d6:	7f7b      	ldrb	r3, [r7, #29]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3eb      	bcc.n	80026b4 <num2str+0xb4>
		}
	}

    /* return string size */
	return (uint8_t)(num_cnt + sign_offset);
 80026dc:	7f7a      	ldrb	r2, [r7, #29]
 80026de:	7f3b      	ldrb	r3, [r7, #28]
 80026e0:	4413      	add	r3, r2
 80026e2:	b2db      	uxtb	r3, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	66666667 	.word	0x66666667

080026f0 <sw_tm_getNewSlot>:
sw_timer_t *pSw_timers[SW_TM_INST_MAX]; 

/* track number of sw timer instances */
static uint8_t sw_tm_slot_id = 0;

static uint8_t sw_tm_getNewSlot(sw_timer_t* pThis) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	
	if (sw_tm_slot_id >= SW_TM_INST_MAX)
 80026f8:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <sw_tm_getNewSlot+0x40>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b09      	cmp	r3, #9
 80026fe:	d905      	bls.n	800270c <sw_tm_getNewSlot+0x1c>
	{
        assert(0);
 8002700:	213a      	movs	r1, #58	; 0x3a
 8002702:	480c      	ldr	r0, [pc, #48]	; (8002734 <sw_tm_getNewSlot+0x44>)
 8002704:	f7ff ff60 	bl	80025c8 <assert_failed>
		return 1; // max number of counter reached
 8002708:	2301      	movs	r3, #1
 800270a:	e00d      	b.n	8002728 <sw_tm_getNewSlot+0x38>
	} else {
		pSw_timers[sw_tm_slot_id] = pThis;	
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <sw_tm_getNewSlot+0x40>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <sw_tm_getNewSlot+0x48>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		// count number of software_timers
		++sw_tm_slot_id;
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <sw_tm_getNewSlot+0x40>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <sw_tm_getNewSlot+0x40>)
 8002724:	701a      	strb	r2, [r3, #0]
		return 0;
 8002726:	2300      	movs	r3, #0
	}	
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	2000005d 	.word	0x2000005d
 8002734:	080029ac 	.word	0x080029ac
 8002738:	200000e4 	.word	0x200000e4

0800273c <swTimer_tick>:


void swTimer_tick() {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	71fb      	strb	r3, [r7, #7]
    sw_timer_t *pTimer;

	for (i; i < sw_tm_slot_id; ++i) {
 8002746:	e027      	b.n	8002798 <swTimer_tick+0x5c>
        pTimer = pSw_timers[i]; 
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	4a18      	ldr	r2, [pc, #96]	; (80027ac <swTimer_tick+0x70>)
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	603b      	str	r3, [r7, #0]
		if (pTimer->_status == SWTM_RUNNING) {
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	7a1b      	ldrb	r3, [r3, #8]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d11b      	bne.n	8002792 <swTimer_tick+0x56>
			pTimer->_cnt++;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	601a      	str	r2, [r3, #0]
			
			if (pTimer->_cnt >= pTimer->_set_value && pTimer->_set_value != SWTM_CON_RUN) {
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d310      	bcc.n	8002792 <swTimer_tick+0x56>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00c      	beq.n	8002792 <swTimer_tick+0x56>
				pTimer->_status = SWTM_ELAPSED;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2203      	movs	r2, #3
 800277c:	721a      	strb	r2, [r3, #8]
				pTimer->_cnt = 0;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
				
				if (pTimer->_callback_fptr != NULL) {
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <swTimer_tick+0x56>
					pTimer->_callback_fptr(); 
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4798      	blx	r3
	for (i; i < sw_tm_slot_id; ++i) {
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	3301      	adds	r3, #1
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <swTimer_tick+0x74>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	79fa      	ldrb	r2, [r7, #7]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d3d2      	bcc.n	8002748 <swTimer_tick+0xc>
				}
			}
		} 		
	}
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200000e4 	.word	0x200000e4
 80027b0:	2000005d 	.word	0x2000005d

080027b4 <swTimer_init>:

/* constructor */
void swTimer_init(sw_timer_t* pThis) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	sw_tm_getNewSlot(pThis);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff97 	bl	80026f0 <sw_tm_getNewSlot>
	
	pThis->_status = SWTM_STOP;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	721a      	strb	r2, [r3, #8]
	pThis->_cnt = 0;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
	pThis->_set_value = 0;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
	pThis->_callback_fptr = NULL;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <set_method>:


static void set_method(sw_timer_t* pThis, uint32_t set_value){
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
	pThis->_set_value = set_value;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	605a      	str	r2, [r3, #4]
	pThis->_status = SWTM_RUNNING;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	721a      	strb	r2, [r3, #8]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <reSet_method>:

static void reSet_method(sw_timer_t* pThis, uint32_t set_value) {
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
	pThis->_set_value = set_value;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	605a      	str	r2, [r3, #4]
	pThis->_status = SWTM_RUNNING;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	721a      	strb	r2, [r3, #8]
	pThis->_cnt = 0;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <flush_method>:

static void flush_method(sw_timer_t* pThis) {
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	pThis->_cnt = 0;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
	pThis->_status = SWTM_STOP;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	721a      	strb	r2, [r3, #8]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <getTime_method>:

static uint32_t getTime_method(sw_timer_t* pThis) {
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
    return (pThis->_cnt);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <pause_method>:

static void pause_method(sw_timer_t* pThis) {
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	pThis->_status = SWTM_PAUSE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	721a      	strb	r2, [r3, #8]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <isElapsed_method>:

static bool isElapsed_method(sw_timer_t* pThis) {
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	if (pThis->_status == SWTM_ELAPSED)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7a1b      	ldrb	r3, [r3, #8]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d101      	bne.n	8002888 <isElapsed_method+0x14>
	{ 
		return true;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <isElapsed_method+0x16>
	} else {
		return false;
 8002888:	2300      	movs	r3, #0
	}
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <attach_callBack_method>:

static void attach_callBack_method(sw_timer_t* pThis, pF_swTm callback) {
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
	pThis->_callback_fptr = callback;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	60da      	str	r2, [r3, #12]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
	...

080028b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80028b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80028b2:	e003      	b.n	80028bc <LoopCopyDataInit>

080028b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80028b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80028b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80028ba:	3104      	adds	r1, #4

080028bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80028bc:	480a      	ldr	r0, [pc, #40]	; (80028e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80028c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80028c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80028c4:	d3f6      	bcc.n	80028b4 <CopyDataInit>
  ldr r2, =_sbss
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80028c8:	e002      	b.n	80028d0 <LoopFillZerobss>

080028ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80028cc:	f842 3b04 	str.w	r3, [r2], #4

080028d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80028d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80028d4:	d3f9      	bcc.n	80028ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028d6:	f7fd fe21 	bl	800051c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028da:	f000 f80f 	bl	80028fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028de:	f7fd fd33 	bl	8000348 <main>
  bx lr
 80028e2:	4770      	bx	lr
  ldr r3, =_sidata
 80028e4:	08002a1c 	.word	0x08002a1c
  ldr r0, =_sdata
 80028e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028ec:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 80028f0:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 80028f4:	2000010c 	.word	0x2000010c

080028f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028f8:	e7fe      	b.n	80028f8 <ADC1_2_IRQHandler>
	...

080028fc <__libc_init_array>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	2500      	movs	r5, #0
 8002900:	4e0c      	ldr	r6, [pc, #48]	; (8002934 <__libc_init_array+0x38>)
 8002902:	4c0d      	ldr	r4, [pc, #52]	; (8002938 <__libc_init_array+0x3c>)
 8002904:	1ba4      	subs	r4, r4, r6
 8002906:	10a4      	asrs	r4, r4, #2
 8002908:	42a5      	cmp	r5, r4
 800290a:	d109      	bne.n	8002920 <__libc_init_array+0x24>
 800290c:	f000 f832 	bl	8002974 <_init>
 8002910:	2500      	movs	r5, #0
 8002912:	4e0a      	ldr	r6, [pc, #40]	; (800293c <__libc_init_array+0x40>)
 8002914:	4c0a      	ldr	r4, [pc, #40]	; (8002940 <__libc_init_array+0x44>)
 8002916:	1ba4      	subs	r4, r4, r6
 8002918:	10a4      	asrs	r4, r4, #2
 800291a:	42a5      	cmp	r5, r4
 800291c:	d105      	bne.n	800292a <__libc_init_array+0x2e>
 800291e:	bd70      	pop	{r4, r5, r6, pc}
 8002920:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002924:	4798      	blx	r3
 8002926:	3501      	adds	r5, #1
 8002928:	e7ee      	b.n	8002908 <__libc_init_array+0xc>
 800292a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800292e:	4798      	blx	r3
 8002930:	3501      	adds	r5, #1
 8002932:	e7f2      	b.n	800291a <__libc_init_array+0x1e>
 8002934:	08002a14 	.word	0x08002a14
 8002938:	08002a14 	.word	0x08002a14
 800293c:	08002a14 	.word	0x08002a14
 8002940:	08002a18 	.word	0x08002a18

08002944 <memset>:
 8002944:	4603      	mov	r3, r0
 8002946:	4402      	add	r2, r0
 8002948:	4293      	cmp	r3, r2
 800294a:	d100      	bne.n	800294e <memset+0xa>
 800294c:	4770      	bx	lr
 800294e:	f803 1b01 	strb.w	r1, [r3], #1
 8002952:	e7f9      	b.n	8002948 <memset+0x4>

08002954 <strcat>:
 8002954:	4602      	mov	r2, r0
 8002956:	b510      	push	{r4, lr}
 8002958:	4613      	mov	r3, r2
 800295a:	781c      	ldrb	r4, [r3, #0]
 800295c:	3201      	adds	r2, #1
 800295e:	2c00      	cmp	r4, #0
 8002960:	d1fa      	bne.n	8002958 <strcat+0x4>
 8002962:	3b01      	subs	r3, #1
 8002964:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002968:	f803 2f01 	strb.w	r2, [r3, #1]!
 800296c:	2a00      	cmp	r2, #0
 800296e:	d1f9      	bne.n	8002964 <strcat+0x10>
 8002970:	bd10      	pop	{r4, pc}
	...

08002974 <_init>:
 8002974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002976:	bf00      	nop
 8002978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297a:	bc08      	pop	{r3}
 800297c:	469e      	mov	lr, r3
 800297e:	4770      	bx	lr

08002980 <_fini>:
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	bf00      	nop
 8002984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002986:	bc08      	pop	{r3}
 8002988:	469e      	mov	lr, r3
 800298a:	4770      	bx	lr

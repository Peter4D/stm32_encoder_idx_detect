
simonS_index_sig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002eac  08002eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000fc  20000000  08002eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000011c  200000fc  08002fb0  000200fc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000218  08002fb0  00020218  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001298d  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002662  00000000  00000000  00032ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c68  00000000  00000000  00035118  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b40  00000000  00000000  00035d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005f1d  00000000  00000000  000368c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000398a  00000000  00000000  0003c7dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00040167  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000031b8  00000000  00000000  000401e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dec 	.word	0x08002dec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	08002dec 	.word	0x08002dec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4a38      	ldr	r2, [pc, #224]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000172:	4b38      	ldr	r3, [pc, #224]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000174:	699b      	ldr	r3, [r3, #24]
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b35      	ldr	r3, [pc, #212]	; (8000254 <MX_GPIO_Init+0xf8>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4a32      	ldr	r2, [pc, #200]	; (8000254 <MX_GPIO_Init+0xf8>)
 800018a:	4b32      	ldr	r3, [pc, #200]	; (8000254 <MX_GPIO_Init+0xf8>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4a2c      	ldr	r2, [pc, #176]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001a2:	4b2c      	ldr	r3, [pc, #176]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b29      	ldr	r3, [pc, #164]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001be:	4826      	ldr	r0, [pc, #152]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001c0:	f000 ffcd 	bl	800115e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, out0_Pin|out1_Pin|out2_Pin|out3_Pin, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	210f      	movs	r1, #15
 80001c8:	4824      	ldr	r0, [pc, #144]	; (800025c <MX_GPIO_Init+0x100>)
 80001ca:	f000 ffc8 	bl	800115e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 80001ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001d4:	2311      	movs	r3, #17
 80001d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001dc:	2302      	movs	r3, #2
 80001de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	4619      	mov	r1, r3
 80001e6:	481c      	ldr	r0, [pc, #112]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001e8:	f000 fe44 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = out0_Pin|out1_Pin|out2_Pin|out3_Pin;
 80001ec:	230f      	movs	r3, #15
 80001ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f0:	2301      	movs	r3, #1
 80001f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f4:	2300      	movs	r3, #0
 80001f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f8:	2302      	movs	r3, #2
 80001fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001fc:	f107 0310 	add.w	r3, r7, #16
 8000200:	4619      	mov	r1, r3
 8000202:	4816      	ldr	r0, [pc, #88]	; (800025c <MX_GPIO_Init+0x100>)
 8000204:	f000 fe36 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = END_SW0_Pin|END_SW1_Pin|END_SW2_Pin|END_SW3_Pin;
 8000208:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800020c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000212:	2301      	movs	r3, #1
 8000214:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4810      	ldr	r0, [pc, #64]	; (8000260 <MX_GPIO_Init+0x104>)
 800021e:	f000 fe29 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = idx_int0_Pin|idx_int1_Pin|idx_int2_Pin|idx_int3_Pin;
 8000222:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_GPIO_Init+0x108>)
 800022a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800022c:	2301      	movs	r3, #1
 800022e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	480a      	ldr	r0, [pc, #40]	; (8000260 <MX_GPIO_Init+0x104>)
 8000238:	f000 fe1c 	bl	8000e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2017      	movs	r0, #23
 8000242:	f000 fd64 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000246:	2017      	movs	r0, #23
 8000248:	f000 fd7d 	bl	8000d46 <HAL_NVIC_EnableIRQ>

}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40021000 	.word	0x40021000
 8000258:	40011000 	.word	0x40011000
 800025c:	40010800 	.word	0x40010800
 8000260:	40010c00 	.word	0x40010c00
 8000264:	10210000 	.word	0x10210000

08000268 <taskTimer_cb>:
void SM_goToIdle(struct _idx_ch_desc_t *ch);

void TASK_serial_cmd_decode(void);


void taskTimer_cb(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
    #if ( DEBUG_MSG_ENABLE == 1 )
        /* debug */
        HAL_UART_Transmit_IT(&huart1, uart_test_msg, sizeof(uart_test_msg));
    #endif
    /* set timer for new cycle */
    swTimer.set(&xTaskTimer, TASK_PERIODE);
 800026c:	4b03      	ldr	r3, [pc, #12]	; (800027c <taskTimer_cb+0x14>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f242 7110 	movw	r1, #10000	; 0x2710
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <taskTimer_cb+0x18>)
 8000276:	4798      	blx	r3
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	08002e90 	.word	0x08002e90
 8000280:	20000118 	.word	0x20000118

08000284 <blink_onboard_led>:

void blink_onboard_led(uint32_t time_ms) {
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

    HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, LED_SET);
 800028c:	2200      	movs	r2, #0
 800028e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000292:	4806      	ldr	r0, [pc, #24]	; (80002ac <blink_onboard_led+0x28>)
 8000294:	f000 ff63 	bl	800115e <HAL_GPIO_WritePin>
    
    swTimer.set(&xLed_tm, time_ms);
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <blink_onboard_led+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6879      	ldr	r1, [r7, #4]
 800029e:	4805      	ldr	r0, [pc, #20]	; (80002b4 <blink_onboard_led+0x30>)
 80002a0:	4798      	blx	r3
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40011000 	.word	0x40011000
 80002b0:	08002e90 	.word	0x08002e90
 80002b4:	20000128 	.word	0x20000128

080002b8 <led_tm_cb>:

void led_tm_cb(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, LED_RESET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c2:	4802      	ldr	r0, [pc, #8]	; (80002cc <led_tm_cb+0x14>)
 80002c4:	f000 ff4b 	bl	800115e <HAL_GPIO_WritePin>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40011000 	.word	0x40011000

080002d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
    /* drive software timers: resolition is 0.1 ms */
    swTimer_tick();
 80002d8:	f002 fc7c 	bl	8002bd4 <swTimer_tick>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	80fb      	strh	r3, [r7, #6]
    static uint8_t ext_int_msg[15] = {0};
    static uint8_t pinNum_str[6] = {0};

    struct _idx_ch_desc_t *p_ch;

    switch (GPIO_Pin)
 80002ee:	88fb      	ldrh	r3, [r7, #6]
 80002f0:	2b80      	cmp	r3, #128	; 0x80
 80002f2:	d00e      	beq.n	8000312 <HAL_GPIO_EXTI_Callback+0x2e>
 80002f4:	2b80      	cmp	r3, #128	; 0x80
 80002f6:	dc02      	bgt.n	80002fe <HAL_GPIO_EXTI_Callback+0x1a>
 80002f8:	2b40      	cmp	r3, #64	; 0x40
 80002fa:	d007      	beq.n	800030c <HAL_GPIO_EXTI_Callback+0x28>
 80002fc:	e012      	b.n	8000324 <HAL_GPIO_EXTI_Callback+0x40>
 80002fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000302:	d009      	beq.n	8000318 <HAL_GPIO_EXTI_Callback+0x34>
 8000304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000308:	d009      	beq.n	800031e <HAL_GPIO_EXTI_Callback+0x3a>
 800030a:	e00b      	b.n	8000324 <HAL_GPIO_EXTI_Callback+0x40>
        {
            #if ( DEBUG_MSG_ENABLE == 1 )
                /* #debug */
                strcpy(pinNum_str, "int_0");
            #endif
            p_ch = &idx_ch_array[0];
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <HAL_GPIO_EXTI_Callback+0x6c>)
 800030e:	60fb      	str	r3, [r7, #12]
            break;
 8000310:	e010      	b.n	8000334 <HAL_GPIO_EXTI_Callback+0x50>
        {
            #if ( DEBUG_MSG_ENABLE == 1 )
                /* #debug */
                strcpy(pinNum_str, "int_1");
            #endif
            p_ch = &idx_ch_array[1];
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <HAL_GPIO_EXTI_Callback+0x70>)
 8000314:	60fb      	str	r3, [r7, #12]
            break;
 8000316:	e00d      	b.n	8000334 <HAL_GPIO_EXTI_Callback+0x50>
        {
            #if ( DEBUG_MSG_ENABLE == 1 )
                /* #debug */
                strcpy(pinNum_str, "int_2");
            #endif
            p_ch = &idx_ch_array[2];
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <HAL_GPIO_EXTI_Callback+0x74>)
 800031a:	60fb      	str	r3, [r7, #12]
            break;
 800031c:	e00a      	b.n	8000334 <HAL_GPIO_EXTI_Callback+0x50>
        {
            #if ( DEBUG_MSG_ENABLE == 1 )
                /* #debug */
                strcpy(pinNum_str, "int_3");
            #endif
            p_ch = &idx_ch_array[3];
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <HAL_GPIO_EXTI_Callback+0x78>)
 8000320:	60fb      	str	r3, [r7, #12]
            break;
 8000322:	e007      	b.n	8000334 <HAL_GPIO_EXTI_Callback+0x50>
        }
        default:
        {
            p_ch = &idx_ch_array[0];
 8000324:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000326:	60fb      	str	r3, [r7, #12]
            assert(0);
 8000328:	f240 1109 	movw	r1, #265	; 0x109
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <HAL_GPIO_EXTI_Callback+0x7c>)
 800032e:	f002 fb3f 	bl	80029b0 <assert_failed>
            break;
 8000332:	bf00      	nop
        }
    }

    swTimer.set(&p_ch->swtimer, p_ch->delayTm);
 8000334:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <HAL_GPIO_EXTI_Callback+0x80>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	f102 0024 	add.w	r0, r2, #36	; 0x24
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000342:	4611      	mov	r1, r2
 8000344:	4798      	blx	r3

        HAL_UART_Transmit_IT(&huart1, ext_int_msg, sizeof(ext_int_msg));
    #endif
    //==========================================================================

}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000
 8000354:	2000003c 	.word	0x2000003c
 8000358:	20000078 	.word	0x20000078
 800035c:	200000b4 	.word	0x200000b4
 8000360:	08002e04 	.word	0x08002e04
 8000364:	08002e90 	.word	0x08002e90

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    static uint32_t tick_old = 0;
    uint8_t nCh = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000372:	f000 fb99 	bl	8000aa8 <HAL_Init>

  /* USER CODE BEGIN Init */

    /* set application heartBeat and serial debug printout task */
    swTimer_init(&xTaskTimer);
 8000376:	483a      	ldr	r0, [pc, #232]	; (8000460 <main+0xf8>)
 8000378:	f002 fc68 	bl	8002c4c <swTimer_init>
    swTimer.attach_callBack(&xTaskTimer, taskTimer_cb);
 800037c:	4b39      	ldr	r3, [pc, #228]	; (8000464 <main+0xfc>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4939      	ldr	r1, [pc, #228]	; (8000468 <main+0x100>)
 8000382:	4837      	ldr	r0, [pc, #220]	; (8000460 <main+0xf8>)
 8000384:	4798      	blx	r3
    swTimer.set(&xTaskTimer, TASK_PERIODE);
 8000386:	4b37      	ldr	r3, [pc, #220]	; (8000464 <main+0xfc>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f242 7110 	movw	r1, #10000	; 0x2710
 800038e:	4834      	ldr	r0, [pc, #208]	; (8000460 <main+0xf8>)
 8000390:	4798      	blx	r3

    /* sw timer that control how long will led be on */
    swTimer_init(&xLed_tm);
 8000392:	4836      	ldr	r0, [pc, #216]	; (800046c <main+0x104>)
 8000394:	f002 fc5a 	bl	8002c4c <swTimer_init>
    swTimer.attach_callBack(&xLed_tm, led_tm_cb);
 8000398:	4b32      	ldr	r3, [pc, #200]	; (8000464 <main+0xfc>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4934      	ldr	r1, [pc, #208]	; (8000470 <main+0x108>)
 800039e:	4833      	ldr	r0, [pc, #204]	; (800046c <main+0x104>)
 80003a0:	4798      	blx	r3

    /* calculate numner of channels used in application */
    nCh = sizeof(idx_ch_array)/sizeof(idx_ch_array[0]);
 80003a2:	2304      	movs	r3, #4
 80003a4:	71bb      	strb	r3, [r7, #6]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a6:	f000 f877 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003aa:	f7ff fed7 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003ae:	f000 fafd 	bl	80009ac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80003b2:	f000 fa8b 	bl	80008cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003b6:	482f      	ldr	r0, [pc, #188]	; (8000474 <main+0x10c>)
 80003b8:	f001 fb4f 	bl	8001a5a <HAL_TIM_Base_Start_IT>

  swTimer_init(&idx_ch_array[0].swtimer);
 80003bc:	482e      	ldr	r0, [pc, #184]	; (8000478 <main+0x110>)
 80003be:	f002 fc45 	bl	8002c4c <swTimer_init>
  swTimer_init(&idx_ch_array[1].swtimer);
 80003c2:	482e      	ldr	r0, [pc, #184]	; (800047c <main+0x114>)
 80003c4:	f002 fc42 	bl	8002c4c <swTimer_init>
  swTimer_init(&idx_ch_array[2].swtimer);
 80003c8:	482d      	ldr	r0, [pc, #180]	; (8000480 <main+0x118>)
 80003ca:	f002 fc3f 	bl	8002c4c <swTimer_init>
  swTimer_init(&idx_ch_array[3].swtimer);
 80003ce:	482d      	ldr	r0, [pc, #180]	; (8000484 <main+0x11c>)
 80003d0:	f002 fc3c 	bl	8002c4c <swTimer_init>
  
  swTimer.attach_callBack(&idx_ch_array[0].swtimer, idx_ch_array[0].sw_tmr_cb);
 80003d4:	4b23      	ldr	r3, [pc, #140]	; (8000464 <main+0xfc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a2b      	ldr	r2, [pc, #172]	; (8000488 <main+0x120>)
 80003da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80003dc:	4611      	mov	r1, r2
 80003de:	4826      	ldr	r0, [pc, #152]	; (8000478 <main+0x110>)
 80003e0:	4798      	blx	r3
  swTimer.attach_callBack(&idx_ch_array[1].swtimer, idx_ch_array[1].sw_tmr_cb);
 80003e2:	4b20      	ldr	r3, [pc, #128]	; (8000464 <main+0xfc>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a28      	ldr	r2, [pc, #160]	; (8000488 <main+0x120>)
 80003e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80003ea:	4611      	mov	r1, r2
 80003ec:	4823      	ldr	r0, [pc, #140]	; (800047c <main+0x114>)
 80003ee:	4798      	blx	r3
  swTimer.attach_callBack(&idx_ch_array[2].swtimer, idx_ch_array[2].sw_tmr_cb);
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <main+0xfc>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a24      	ldr	r2, [pc, #144]	; (8000488 <main+0x120>)
 80003f6:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80003fa:	4611      	mov	r1, r2
 80003fc:	4820      	ldr	r0, [pc, #128]	; (8000480 <main+0x118>)
 80003fe:	4798      	blx	r3
  swTimer.attach_callBack(&idx_ch_array[3].swtimer, idx_ch_array[3].sw_tmr_cb);
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <main+0xfc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a20      	ldr	r2, [pc, #128]	; (8000488 <main+0x120>)
 8000406:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800040a:	4611      	mov	r1, r2
 800040c:	481d      	ldr	r0, [pc, #116]	; (8000484 <main+0x11c>)
 800040e:	4798      	blx	r3

  /* enable Serial receive */
  HAL_UART_Receive_IT(&huart1, &SM_Rx.Rx_char, 1);
 8000410:	2201      	movs	r2, #1
 8000412:	491e      	ldr	r1, [pc, #120]	; (800048c <main+0x124>)
 8000414:	481e      	ldr	r0, [pc, #120]	; (8000490 <main+0x128>)
 8000416:	f001 ff33 	bl	8002280 <HAL_UART_Receive_IT>
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        if( (HAL_GetTick() - tick_old) > CH_PULL_READ_PER){
 800041a:	f000 fb9d 	bl	8000b58 <HAL_GetTick>
 800041e:	4602      	mov	r2, r0
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <main+0x12c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	2b01      	cmp	r3, #1
 8000428:	d9f7      	bls.n	800041a <main+0xb2>
            uint8_t i = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	71fb      	strb	r3, [r7, #7]
            
            /* channels polling read of limit switches */
            for(;i < nCh; ++i) {
 800042e:	e00c      	b.n	800044a <main+0xe2>
                handle_channels(&idx_ch_array[i]);
 8000430:	79fa      	ldrb	r2, [r7, #7]
 8000432:	4613      	mov	r3, r2
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	4a13      	ldr	r2, [pc, #76]	; (8000488 <main+0x120>)
 800043c:	4413      	add	r3, r2
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f865 	bl	800050e <handle_channels>
            for(;i < nCh; ++i) {
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	3301      	adds	r3, #1
 8000448:	71fb      	strb	r3, [r7, #7]
 800044a:	79fa      	ldrb	r2, [r7, #7]
 800044c:	79bb      	ldrb	r3, [r7, #6]
 800044e:	429a      	cmp	r2, r3
 8000450:	d3ee      	bcc.n	8000430 <main+0xc8>
            }

            tick_old = HAL_GetTick();
 8000452:	f000 fb81 	bl	8000b58 <HAL_GetTick>
 8000456:	4602      	mov	r2, r0
 8000458:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <main+0x12c>)
 800045a:	601a      	str	r2, [r3, #0]
        if( (HAL_GetTick() - tick_old) > CH_PULL_READ_PER){
 800045c:	e7dd      	b.n	800041a <main+0xb2>
 800045e:	bf00      	nop
 8000460:	20000118 	.word	0x20000118
 8000464:	08002e90 	.word	0x08002e90
 8000468:	08000269 	.word	0x08000269
 800046c:	20000128 	.word	0x20000128
 8000470:	080002b9 	.word	0x080002b9
 8000474:	2000016c 	.word	0x2000016c
 8000478:	20000024 	.word	0x20000024
 800047c:	20000060 	.word	0x20000060
 8000480:	2000009c 	.word	0x2000009c
 8000484:	200000d8 	.word	0x200000d8
 8000488:	20000000 	.word	0x20000000
 800048c:	20000158 	.word	0x20000158
 8000490:	200001ac 	.word	0x200001ac
 8000494:	2000015c 	.word	0x2000015c

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b090      	sub	sp, #64	; 0x40
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0318 	add.w	r3, r7, #24
 80004a2:	2228      	movs	r2, #40	; 0x28
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 fc98 	bl	8002ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ba:	2302      	movs	r3, #2
 80004bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004be:	2301      	movs	r3, #1
 80004c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c2:	2310      	movs	r3, #16
 80004c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ca:	f107 0318 	add.w	r3, r7, #24
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 fe76 	bl	80011c0 <HAL_RCC_OscConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004da:	f000 f93b 	bl	8000754 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	230f      	movs	r3, #15
 80004e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 f8c6 	bl	8001688 <HAL_RCC_ClockConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000502:	f000 f927 	bl	8000754 <Error_Handler>
  }
}
 8000506:	bf00      	nop
 8000508:	3740      	adds	r7, #64	; 0x40
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <handle_channels>:

void TASK_serial_cmd_decode(void) {

}

void handle_channels(struct _idx_ch_desc_t *ch){
 800050e:	b580      	push	{r7, lr}
 8000510:	b084      	sub	sp, #16
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
    uint32_t limit_sw_state = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]

    limit_sw_state = HAL_GPIO_ReadPin(ch->gpio_io_input.port, ch->gpio_io_input.pin);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	691a      	ldr	r2, [r3, #16]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	8a9b      	ldrh	r3, [r3, #20]
 8000522:	4619      	mov	r1, r3
 8000524:	4610      	mov	r0, r2
 8000526:	f000 fe03 	bl	8001130 <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	60fb      	str	r3, [r7, #12]
    if(limit_sw_state == INPUT_ON && ch->stateMchine == IDLE){
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d110      	bne.n	8000556 <handle_channels+0x48>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d10b      	bne.n	8000556 <handle_channels+0x48>
        ch->stateMchine = WAIT_IDX;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2201      	movs	r2, #1
 8000542:	f883 2020 	strb.w	r2, [r3, #32]
        /*set output; external interrupt will set off channel ! */
        HAL_GPIO_WritePin(ch->gpio_io_out.port, ch->gpio_io_out.pin, GPIO_PIN_SET);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6998      	ldr	r0, [r3, #24]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	8b9b      	ldrh	r3, [r3, #28]
 800054e:	2201      	movs	r2, #1
 8000550:	4619      	mov	r1, r3
 8000552:	f000 fe04 	bl	800115e <HAL_GPIO_WritePin>
    }
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <ch0_swTmr_cb>:

//=========================================================
/* software timers callback functions */
void ch0_swTmr_cb(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
    
    SM_goToIdle(&idx_ch_array[0]);
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <ch0_swTmr_cb+0x10>)
 8000566:	f000 f823 	bl	80005b0 <SM_goToIdle>
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000000 	.word	0x20000000

08000574 <ch1_swTmr_cb>:

void ch1_swTmr_cb(void){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

    SM_goToIdle(&idx_ch_array[1]);
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <ch1_swTmr_cb+0x10>)
 800057a:	f000 f819 	bl	80005b0 <SM_goToIdle>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000003c 	.word	0x2000003c

08000588 <ch2_swTmr_cb>:

void ch2_swTmr_cb(void){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0

    SM_goToIdle(&idx_ch_array[2]);
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <ch2_swTmr_cb+0x10>)
 800058e:	f000 f80f 	bl	80005b0 <SM_goToIdle>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000078 	.word	0x20000078

0800059c <ch3_swTmr_cb>:

void ch3_swTmr_cb(void){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    
    SM_goToIdle(&idx_ch_array[3]);
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <ch3_swTmr_cb+0x10>)
 80005a2:	f000 f805 	bl	80005b0 <SM_goToIdle>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000b4 	.word	0x200000b4

080005b0 <SM_goToIdle>:

//=========================================================

void SM_goToIdle(struct _idx_ch_desc_t *ch) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ch->gpio_io_out.port, ch->gpio_io_out.pin, GPIO_PIN_RESET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6998      	ldr	r0, [r3, #24]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	8b9b      	ldrh	r3, [r3, #28]
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	f000 fdcb 	bl	800115e <HAL_GPIO_WritePin>
    ch->stateMchine = IDLE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2020 	strb.w	r2, [r3, #32]
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <Rx_cmd_decode>:

void Rx_cmd_decode(struct _SM_Rx_desc_t *SM_Rx){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    uint8_t *p_str = &SM_Rx->Rx_buff[0];
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
    uint8_t ch_sel = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	74fb      	strb	r3, [r7, #19]
    int32_t delay_val = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
    static uint8_t ack_msg[10] = {0};
    uint8_t ack_msg_size = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	74bb      	strb	r3, [r7, #18]

    if(p_str[0] == 'c'){
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b63      	cmp	r3, #99	; 0x63
 80005f8:	d140      	bne.n	800067c <Rx_cmd_decode+0xa4>
        if(p_str[1] >= '0' && p_str[1] <= '3') {
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b2f      	cmp	r3, #47	; 0x2f
 8000602:	d93b      	bls.n	800067c <Rx_cmd_decode+0xa4>
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	3301      	adds	r3, #1
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b33      	cmp	r3, #51	; 0x33
 800060c:	d836      	bhi.n	800067c <Rx_cmd_decode+0xa4>
            ch_sel = p_str[1] - '0';
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	3b30      	subs	r3, #48	; 0x30
 8000616:	74fb      	strb	r3, [r7, #19]
            if(str2num(&p_str[3], &delay_val) == 0) {
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	3303      	adds	r3, #3
 800061c:	f107 020c 	add.w	r2, r7, #12
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fa58 	bl	8002ad8 <str2num>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d126      	bne.n	800067c <Rx_cmd_decode+0xa4>
                /* value is number OK*/
                /* @todo in final version this need to be written into NVM */
                idx_ch_array[ch_sel].delayTm = delay_val;
 800062e:	7cfa      	ldrb	r2, [r7, #19]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4618      	mov	r0, r3
 8000634:	4913      	ldr	r1, [pc, #76]	; (8000684 <Rx_cmd_decode+0xac>)
 8000636:	4613      	mov	r3, r2
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	440b      	add	r3, r1
 8000640:	3334      	adds	r3, #52	; 0x34
 8000642:	6018      	str	r0, [r3, #0]
                /*#debug*/
                blink_onboard_led(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000648:	f7ff fe1c 	bl	8000284 <blink_onboard_led>
                /* #debug message */
                num2str(delay_val, ack_msg);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	490e      	ldr	r1, [pc, #56]	; (8000688 <Rx_cmd_decode+0xb0>)
 8000650:	4618      	mov	r0, r3
 8000652:	f002 f9c9 	bl	80029e8 <num2str>
                ack_msg_size = strlen(ack_msg);
 8000656:	480c      	ldr	r0, [pc, #48]	; (8000688 <Rx_cmd_decode+0xb0>)
 8000658:	f7ff fd78 	bl	800014c <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	74bb      	strb	r3, [r7, #18]
                ack_msg[++ack_msg_size] = '\n';
 8000660:	7cbb      	ldrb	r3, [r7, #18]
 8000662:	3301      	adds	r3, #1
 8000664:	74bb      	strb	r3, [r7, #18]
 8000666:	7cbb      	ldrb	r3, [r7, #18]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <Rx_cmd_decode+0xb0>)
 800066a:	210a      	movs	r1, #10
 800066c:	54d1      	strb	r1, [r2, r3]
                HAL_UART_Transmit_IT(&huart1, ack_msg, ack_msg_size);
 800066e:	7cbb      	ldrb	r3, [r7, #18]
 8000670:	b29b      	uxth	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	4904      	ldr	r1, [pc, #16]	; (8000688 <Rx_cmd_decode+0xb0>)
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <Rx_cmd_decode+0xb4>)
 8000678:	f001 fdbe 	bl	80021f8 <HAL_UART_Transmit_IT>
            /* channel select error */
        }
    }else{
        /* command error */
    }
}
 800067c:	bf00      	nop
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	20000160 	.word	0x20000160
 800068c:	200001ac 	.word	0x200001ac

08000690 <HAL_UART_RxCpltCallback>:
//idx_ch_array


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
    
    switch (SM_Rx.state) {
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <HAL_UART_RxCpltCallback+0x16>
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d011      	beq.n	80006c8 <HAL_UART_RxCpltCallback+0x38>
 80006a4:	e044      	b.n	8000730 <HAL_UART_RxCpltCallback+0xa0>
        case SM_RX_IDLE:
        {
            SM_Rx.state = SM_RX_RECEIVE;
 80006a6:	4b27      	ldr	r3, [pc, #156]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
            SM_Rx.Rx_buff[SM_Rx.Rx_cnt++] = SM_Rx.Rx_char;
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 80006ae:	7fdb      	ldrb	r3, [r3, #31]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	b2d1      	uxtb	r1, r2
 80006b4:	4a23      	ldr	r2, [pc, #140]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 80006b6:	77d1      	strb	r1, [r2, #31]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4b22      	ldr	r3, [pc, #136]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 80006bc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80006c0:	4b20      	ldr	r3, [pc, #128]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 80006c2:	440b      	add	r3, r1
 80006c4:	705a      	strb	r2, [r3, #1]
            break;
 80006c6:	e033      	b.n	8000730 <HAL_UART_RxCpltCallback+0xa0>
        }
        case SM_RX_RECEIVE:
        {
            
            if(SM_Rx.Rx_cnt >= RX_CMD_BUFF_SIZE) {
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 80006ca:	7fdb      	ldrb	r3, [r3, #31]
 80006cc:	2b1d      	cmp	r3, #29
 80006ce:	d90b      	bls.n	80006e8 <HAL_UART_RxCpltCallback+0x58>
                /* Rx cmd buffer overflow error go to idle inform user */
                HAL_UART_Transmit_IT(&huart1, uart_msg_err_cmd2long, sizeof(uart_msg_err_cmd2long));
 80006d0:	2216      	movs	r2, #22
 80006d2:	491d      	ldr	r1, [pc, #116]	; (8000748 <HAL_UART_RxCpltCallback+0xb8>)
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <HAL_UART_RxCpltCallback+0xbc>)
 80006d6:	f001 fd8f 	bl	80021f8 <HAL_UART_Transmit_IT>
                SM_Rx.Rx_cnt = 0;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	77da      	strb	r2, [r3, #31]
                SM_Rx.state = SM_RX_IDLE;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
                break;
 80006e6:	e023      	b.n	8000730 <HAL_UART_RxCpltCallback+0xa0>
            }

            /* check for temination character */
            if(SM_Rx.Rx_char == '\r') {
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 80006ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006ee:	2b0d      	cmp	r3, #13
 80006f0:	d110      	bne.n	8000714 <HAL_UART_RxCpltCallback+0x84>
                /* decode */
                SM_Rx.Rx_buff[SM_Rx.Rx_cnt] = 0x00; // zero terminate the string 
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 80006f4:	7fdb      	ldrb	r3, [r3, #31]
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 80006fa:	4413      	add	r3, r2
 80006fc:	2200      	movs	r2, #0
 80006fe:	705a      	strb	r2, [r3, #1]
                Rx_cmd_decode(&SM_Rx);
 8000700:	4810      	ldr	r0, [pc, #64]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 8000702:	f7ff ff69 	bl	80005d8 <Rx_cmd_decode>
                /* return to idle state */
                SM_Rx.Rx_cnt = 0;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 8000708:	2200      	movs	r2, #0
 800070a:	77da      	strb	r2, [r3, #31]
                SM_Rx.state = SM_RX_IDLE;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]

            }else{
                SM_Rx.Rx_buff[SM_Rx.Rx_cnt++] = SM_Rx.Rx_char;
            }
            break;
 8000712:	e00c      	b.n	800072e <HAL_UART_RxCpltCallback+0x9e>
                SM_Rx.Rx_buff[SM_Rx.Rx_cnt++] = SM_Rx.Rx_char;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 8000716:	7fdb      	ldrb	r3, [r3, #31]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	b2d1      	uxtb	r1, r2
 800071c:	4a09      	ldr	r2, [pc, #36]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 800071e:	77d1      	strb	r1, [r2, #31]
 8000720:	4619      	mov	r1, r3
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 8000724:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 800072a:	440b      	add	r3, r1
 800072c:	705a      	strb	r2, [r3, #1]
            break;
 800072e:	bf00      	nop
        }
    }

    HAL_UART_Receive_IT(&huart1, &SM_Rx.Rx_char, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	4907      	ldr	r1, [pc, #28]	; (8000750 <HAL_UART_RxCpltCallback+0xc0>)
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <HAL_UART_RxCpltCallback+0xbc>)
 8000736:	f001 fda3 	bl	8002280 <HAL_UART_Receive_IT>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000138 	.word	0x20000138
 8000748:	08002e60 	.word	0x08002e60
 800074c:	200001ac 	.word	0x200001ac
 8000750:	20000158 	.word	0x20000158

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000766:	4a15      	ldr	r2, [pc, #84]	; (80007bc <HAL_MspInit+0x5c>)
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_MspInit+0x5c>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_MspInit+0x5c>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_MspInit+0x5c>)
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <HAL_MspInit+0x5c>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x5c>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_MspInit+0x60>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_MspInit+0x60>)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010000 	.word	0x40010000

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <HardFault_Handler+0x4>

080007d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <MemManage_Handler+0x4>

080007dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <BusFault_Handler+0x4>

080007e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <UsageFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000810:	f000 f990 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //swTimer_tick();

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800081c:	2040      	movs	r0, #64	; 0x40
 800081e:	f000 fcb7 	bl	8001190 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000822:	2080      	movs	r0, #128	; 0x80
 8000824:	f000 fcb4 	bl	8001190 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000828:	f44f 7080 	mov.w	r0, #256	; 0x100
 800082c:	f000 fcb0 	bl	8001190 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000830:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000834:	f000 fcac 	bl	8001190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <TIM2_IRQHandler+0x10>)
 8000842:	f001 f924 	bl	8001a8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000016c 	.word	0x2000016c

08000850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <USART1_IRQHandler+0x10>)
 8000856:	f001 fd67 	bl	8002328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200001ac 	.word	0x200001ac

08000864 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <SystemInit+0x5c>)
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <SystemInit+0x5c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000874:	4912      	ldr	r1, [pc, #72]	; (80008c0 <SystemInit+0x5c>)
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <SystemInit+0x5c>)
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <SystemInit+0x60>)
 800087c:	4013      	ands	r3, r2
 800087e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000880:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <SystemInit+0x5c>)
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <SystemInit+0x5c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800088a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800088e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000890:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <SystemInit+0x5c>)
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <SystemInit+0x5c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800089a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800089c:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <SystemInit+0x5c>)
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <SystemInit+0x5c>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <SystemInit+0x5c>)
 80008aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80008ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <SystemInit+0x64>)
 80008b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40021000 	.word	0x40021000
 80008c4:	f8ff0000 	.word	0xf8ff0000
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_TIM2_Init+0x94>)
 80008ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_TIM2_Init+0x94>)
 80008f2:	2208      	movs	r2, #8
 80008f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_TIM2_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_CNT;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_TIM2_Init+0x94>)
 80008fe:	2264      	movs	r2, #100	; 0x64
 8000900:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_TIM2_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_TIM2_Init+0x94>)
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800090e:	4814      	ldr	r0, [pc, #80]	; (8000960 <MX_TIM2_Init+0x94>)
 8000910:	f001 f878 	bl	8001a04 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800091a:	f7ff ff1b 	bl	8000754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_TIM2_Init+0x94>)
 800092c:	f001 f9b7 	bl	8001c9e <HAL_TIM_ConfigClockSource>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000936:	f7ff ff0d 	bl	8000754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <MX_TIM2_Init+0x94>)
 8000948:	f001 fbb3 	bl	80020b2 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000952:	f7ff feff 	bl	8000754 <Error_Handler>
  }

}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000016c 	.word	0x2000016c

08000964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000974:	d113      	bne.n	800099e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <HAL_TIM_Base_MspInit+0x44>)
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_TIM_Base_MspInit+0x44>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_TIM_Base_MspInit+0x44>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	201c      	movs	r0, #28
 8000994:	f000 f9bb 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000998:	201c      	movs	r0, #28
 800099a:	f000 f9d4 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_USART1_UART_Init+0x50>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009e4:	f001 fbbb 	bl	800215e <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ee:	f7ff feb1 	bl	8000754 <Error_Handler>
  }

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001ac 	.word	0x200001ac
 80009fc:	40013800 	.word	0x40013800

08000a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a20      	ldr	r2, [pc, #128]	; (8000a9c <HAL_UART_MspInit+0x9c>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d139      	bne.n	8000a94 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a20:	4a1f      	ldr	r2, [pc, #124]	; (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <HAL_UART_MspInit+0xa4>)
 8000a66:	f000 fa05 	bl	8000e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <HAL_UART_MspInit+0xa4>)
 8000a80:	f000 f9f8 	bl	8000e74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2025      	movs	r0, #37	; 0x25
 8000a8a:	f000 f940 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a8e:	2025      	movs	r0, #37	; 0x25
 8000a90:	f000 f959 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_Init+0x28>)
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x28>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f91d 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f808 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff fe4c 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x54>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f935 	bl	8000d62 <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f8fd 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_InitTick+0x5c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000f0 	.word	0x200000f0
 8000b2c:	200000f8 	.word	0x200000f8
 8000b30:	200000f4 	.word	0x200000f4

08000b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x1c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x20>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <HAL_IncTick+0x20>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	200000f8 	.word	0x200000f8
 8000b54:	200001ec 	.word	0x200001ec

08000b58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b02      	ldr	r3, [pc, #8]	; (8000b68 <HAL_GetTick+0x10>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	200001ec 	.word	0x200001ec

08000b6c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <NVIC_EnableIRQ+0x2c>)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	095b      	lsrs	r3, r3, #5
 8000be2:	79fa      	ldrb	r2, [r7, #7]
 8000be4:	f002 021f 	and.w	r2, r2, #31
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	da0b      	bge.n	8000c2c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	490d      	ldr	r1, [pc, #52]	; (8000c4c <NVIC_SetPriority+0x4c>)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 030f 	and.w	r3, r3, #15
 8000c1c:	3b04      	subs	r3, #4
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2a:	e009      	b.n	8000c40 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	4908      	ldr	r1, [pc, #32]	; (8000c50 <NVIC_SetPriority+0x50>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	2201      	movs	r2, #1
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	401a      	ands	r2, r3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	1e59      	subs	r1, r3, #1
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff92 	bl	8000c00 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff33 	bl	8000b6c <NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff48 	bl	8000bb4 <NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff92 	bl	8000c54 <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff61 	bl	8000c00 <NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff3b 	bl	8000bd0 <NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d005      	beq.n	8000d9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2204      	movs	r2, #4
 8000d96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e057      	b.n	8000e4e <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6812      	ldr	r2, [r2, #0]
 8000da6:	6812      	ldr	r2, [r2, #0]
 8000da8:	f022 020e 	bic.w	r2, r2, #14
 8000dac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	6812      	ldr	r2, [r2, #0]
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	f022 0201 	bic.w	r2, r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dbe:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <HAL_DMA_Abort_IT+0xdc>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <HAL_DMA_Abort_IT+0xe0>)
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d02e      	beq.n	8000e2a <HAL_DMA_Abort_IT+0xae>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_DMA_Abort_IT+0xe4>)
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	d026      	beq.n	8000e26 <HAL_DMA_Abort_IT+0xaa>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_DMA_Abort_IT+0xe8>)
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d01d      	beq.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HAL_DMA_Abort_IT+0xec>)
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d014      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x9e>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_DMA_Abort_IT+0xf0>)
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d00b      	beq.n	8000e14 <HAL_DMA_Abort_IT+0x98>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_DMA_Abort_IT+0xf4>)
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d102      	bne.n	8000e0e <HAL_DMA_Abort_IT+0x92>
 8000e08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e0c:	e00e      	b.n	8000e2c <HAL_DMA_Abort_IT+0xb0>
 8000e0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e12:	e00b      	b.n	8000e2c <HAL_DMA_Abort_IT+0xb0>
 8000e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e18:	e008      	b.n	8000e2c <HAL_DMA_Abort_IT+0xb0>
 8000e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1e:	e005      	b.n	8000e2c <HAL_DMA_Abort_IT+0xb0>
 8000e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e24:	e002      	b.n	8000e2c <HAL_DMA_Abort_IT+0xb0>
 8000e26:	2310      	movs	r3, #16
 8000e28:	e000      	b.n	8000e2c <HAL_DMA_Abort_IT+0xb0>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	4798      	blx	r3
    } 
  }
  return status;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020008 	.word	0x40020008
 8000e60:	4002001c 	.word	0x4002001c
 8000e64:	40020030 	.word	0x40020030
 8000e68:	40020044 	.word	0x40020044
 8000e6c:	40020058 	.word	0x40020058
 8000e70:	4002006c 	.word	0x4002006c

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b08b      	sub	sp, #44	; 0x2c
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
 8000e96:	e127      	b.n	80010e8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 8116 	bne.w	80010e2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d034      	beq.n	8000f28 <HAL_GPIO_Init+0xb4>
 8000ebe:	2b12      	cmp	r3, #18
 8000ec0:	d80d      	bhi.n	8000ede <HAL_GPIO_Init+0x6a>
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d02b      	beq.n	8000f1e <HAL_GPIO_Init+0xaa>
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d804      	bhi.n	8000ed4 <HAL_GPIO_Init+0x60>
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d031      	beq.n	8000f32 <HAL_GPIO_Init+0xbe>
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d01c      	beq.n	8000f0c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ed2:	e048      	b.n	8000f66 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d043      	beq.n	8000f60 <HAL_GPIO_Init+0xec>
 8000ed8:	2b11      	cmp	r3, #17
 8000eda:	d01b      	beq.n	8000f14 <HAL_GPIO_Init+0xa0>
          break;
 8000edc:	e043      	b.n	8000f66 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ede:	4a87      	ldr	r2, [pc, #540]	; (80010fc <HAL_GPIO_Init+0x288>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d026      	beq.n	8000f32 <HAL_GPIO_Init+0xbe>
 8000ee4:	4a85      	ldr	r2, [pc, #532]	; (80010fc <HAL_GPIO_Init+0x288>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d806      	bhi.n	8000ef8 <HAL_GPIO_Init+0x84>
 8000eea:	4a85      	ldr	r2, [pc, #532]	; (8001100 <HAL_GPIO_Init+0x28c>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d020      	beq.n	8000f32 <HAL_GPIO_Init+0xbe>
 8000ef0:	4a84      	ldr	r2, [pc, #528]	; (8001104 <HAL_GPIO_Init+0x290>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d01d      	beq.n	8000f32 <HAL_GPIO_Init+0xbe>
          break;
 8000ef6:	e036      	b.n	8000f66 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ef8:	4a83      	ldr	r2, [pc, #524]	; (8001108 <HAL_GPIO_Init+0x294>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d019      	beq.n	8000f32 <HAL_GPIO_Init+0xbe>
 8000efe:	4a83      	ldr	r2, [pc, #524]	; (800110c <HAL_GPIO_Init+0x298>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d016      	beq.n	8000f32 <HAL_GPIO_Init+0xbe>
 8000f04:	4a82      	ldr	r2, [pc, #520]	; (8001110 <HAL_GPIO_Init+0x29c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0xbe>
          break;
 8000f0a:	e02c      	b.n	8000f66 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e028      	b.n	8000f66 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	e023      	b.n	8000f66 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	3308      	adds	r3, #8
 8000f24:	623b      	str	r3, [r7, #32]
          break;
 8000f26:	e01e      	b.n	8000f66 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	330c      	adds	r3, #12
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e019      	b.n	8000f66 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	623b      	str	r3, [r7, #32]
          break;
 8000f3e:	e012      	b.n	8000f66 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d105      	bne.n	8000f54 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	611a      	str	r2, [r3, #16]
          break;
 8000f52:	e008      	b.n	8000f66 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f54:	2308      	movs	r3, #8
 8000f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	615a      	str	r2, [r3, #20]
          break;
 8000f5e:	e002      	b.n	8000f66 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2bff      	cmp	r3, #255	; 0xff
 8000f6a:	d801      	bhi.n	8000f70 <HAL_GPIO_Init+0xfc>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	e001      	b.n	8000f74 <HAL_GPIO_Init+0x100>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3304      	adds	r3, #4
 8000f74:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	2bff      	cmp	r3, #255	; 0xff
 8000f7a:	d802      	bhi.n	8000f82 <HAL_GPIO_Init+0x10e>
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x114>
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3b08      	subs	r3, #8
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	210f      	movs	r1, #15
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	401a      	ands	r2, r3
 8000f9a:	6a39      	ldr	r1, [r7, #32]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 8096 	beq.w	80010e2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb6:	4a57      	ldr	r2, [pc, #348]	; (8001114 <HAL_GPIO_Init+0x2a0>)
 8000fb8:	4b56      	ldr	r3, [pc, #344]	; (8001114 <HAL_GPIO_Init+0x2a0>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6193      	str	r3, [r2, #24]
 8000fc2:	4b54      	ldr	r3, [pc, #336]	; (8001114 <HAL_GPIO_Init+0x2a0>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000fce:	4a52      	ldr	r2, [pc, #328]	; (8001118 <HAL_GPIO_Init+0x2a4>)
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_GPIO_Init+0x2a8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d013      	beq.n	8001022 <HAL_GPIO_Init+0x1ae>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a48      	ldr	r2, [pc, #288]	; (8001120 <HAL_GPIO_Init+0x2ac>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00d      	beq.n	800101e <HAL_GPIO_Init+0x1aa>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a47      	ldr	r2, [pc, #284]	; (8001124 <HAL_GPIO_Init+0x2b0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d007      	beq.n	800101a <HAL_GPIO_Init+0x1a6>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a46      	ldr	r2, [pc, #280]	; (8001128 <HAL_GPIO_Init+0x2b4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_GPIO_Init+0x1a2>
 8001012:	2303      	movs	r3, #3
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x1b0>
 8001016:	2304      	movs	r3, #4
 8001018:	e004      	b.n	8001024 <HAL_GPIO_Init+0x1b0>
 800101a:	2302      	movs	r3, #2
 800101c:	e002      	b.n	8001024 <HAL_GPIO_Init+0x1b0>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <HAL_GPIO_Init+0x1b0>
 8001022:	2300      	movs	r3, #0
 8001024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001026:	f002 0203 	and.w	r2, r2, #3
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	4093      	lsls	r3, r2
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4313      	orrs	r3, r2
 8001032:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001034:	4938      	ldr	r1, [pc, #224]	; (8001118 <HAL_GPIO_Init+0x2a4>)
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800104e:	4937      	ldr	r1, [pc, #220]	; (800112c <HAL_GPIO_Init+0x2b8>)
 8001050:	4b36      	ldr	r3, [pc, #216]	; (800112c <HAL_GPIO_Init+0x2b8>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
 800105a:	e006      	b.n	800106a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800105c:	4933      	ldr	r1, [pc, #204]	; (800112c <HAL_GPIO_Init+0x2b8>)
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <HAL_GPIO_Init+0x2b8>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	43db      	mvns	r3, r3
 8001066:	4013      	ands	r3, r2
 8001068:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001076:	492d      	ldr	r1, [pc, #180]	; (800112c <HAL_GPIO_Init+0x2b8>)
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <HAL_GPIO_Init+0x2b8>)
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
 8001082:	e006      	b.n	8001092 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001084:	4929      	ldr	r1, [pc, #164]	; (800112c <HAL_GPIO_Init+0x2b8>)
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <HAL_GPIO_Init+0x2b8>)
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	43db      	mvns	r3, r3
 800108e:	4013      	ands	r3, r2
 8001090:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800109e:	4923      	ldr	r1, [pc, #140]	; (800112c <HAL_GPIO_Init+0x2b8>)
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <HAL_GPIO_Init+0x2b8>)
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	608b      	str	r3, [r1, #8]
 80010aa:	e006      	b.n	80010ba <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ac:	491f      	ldr	r1, [pc, #124]	; (800112c <HAL_GPIO_Init+0x2b8>)
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <HAL_GPIO_Init+0x2b8>)
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4013      	ands	r3, r2
 80010b8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c6:	4919      	ldr	r1, [pc, #100]	; (800112c <HAL_GPIO_Init+0x2b8>)
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_GPIO_Init+0x2b8>)
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60cb      	str	r3, [r1, #12]
 80010d2:	e006      	b.n	80010e2 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010d4:	4915      	ldr	r1, [pc, #84]	; (800112c <HAL_GPIO_Init+0x2b8>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_GPIO_Init+0x2b8>)
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	43db      	mvns	r3, r3
 80010de:	4013      	ands	r3, r2
 80010e0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	3301      	adds	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	f67f aed4 	bls.w	8000e98 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80010f0:	bf00      	nop
 80010f2:	372c      	adds	r7, #44	; 0x2c
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	10210000 	.word	0x10210000
 8001100:	10110000 	.word	0x10110000
 8001104:	10120000 	.word	0x10120000
 8001108:	10310000 	.word	0x10310000
 800110c:	10320000 	.word	0x10320000
 8001110:	10220000 	.word	0x10220000
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	40010800 	.word	0x40010800
 8001120:	40010c00 	.word	0x40010c00
 8001124:	40011000 	.word	0x40011000
 8001128:	40011400 	.word	0x40011400
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e001      	b.n	8001152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	807b      	strh	r3, [r7, #2]
 800116a:	4613      	mov	r3, r2
 800116c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001174:	887a      	ldrh	r2, [r7, #2]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800117a:	e003      	b.n	8001184 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	041a      	lsls	r2, r3, #16
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	611a      	str	r2, [r3, #16]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
	...

08001190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f898 	bl	80002e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 8087 	beq.w	80012e8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011da:	4b92      	ldr	r3, [pc, #584]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d00c      	beq.n	8001200 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e6:	4b8f      	ldr	r3, [pc, #572]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d112      	bne.n	8001218 <HAL_RCC_OscConfig+0x58>
 80011f2:	4b8c      	ldr	r3, [pc, #560]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fe:	d10b      	bne.n	8001218 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	4b88      	ldr	r3, [pc, #544]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d06c      	beq.n	80012e6 <HAL_RCC_OscConfig+0x126>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d168      	bne.n	80012e6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e22d      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d106      	bne.n	8001230 <HAL_RCC_OscConfig+0x70>
 8001222:	4a80      	ldr	r2, [pc, #512]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001224:	4b7f      	ldr	r3, [pc, #508]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e02e      	b.n	800128e <HAL_RCC_OscConfig+0xce>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10c      	bne.n	8001252 <HAL_RCC_OscConfig+0x92>
 8001238:	4a7a      	ldr	r2, [pc, #488]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 800123a:	4b7a      	ldr	r3, [pc, #488]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4a77      	ldr	r2, [pc, #476]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001246:	4b77      	ldr	r3, [pc, #476]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e01d      	b.n	800128e <HAL_RCC_OscConfig+0xce>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125a:	d10c      	bne.n	8001276 <HAL_RCC_OscConfig+0xb6>
 800125c:	4a71      	ldr	r2, [pc, #452]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 800125e:	4b71      	ldr	r3, [pc, #452]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4a6e      	ldr	r2, [pc, #440]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 800126a:	4b6e      	ldr	r3, [pc, #440]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	e00b      	b.n	800128e <HAL_RCC_OscConfig+0xce>
 8001276:	4a6b      	ldr	r2, [pc, #428]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001278:	4b6a      	ldr	r3, [pc, #424]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4a68      	ldr	r2, [pc, #416]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001284:	4b67      	ldr	r3, [pc, #412]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d013      	beq.n	80012be <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fc5f 	bl	8000b58 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129e:	f7ff fc5b 	bl	8000b58 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b64      	cmp	r3, #100	; 0x64
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e1e1      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b0:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0xde>
 80012bc:	e014      	b.n	80012e8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff fc4b 	bl	8000b58 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c6:	f7ff fc47 	bl	8000b58 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b64      	cmp	r3, #100	; 0x64
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e1cd      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d8:	4b52      	ldr	r3, [pc, #328]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f0      	bne.n	80012c6 <HAL_RCC_OscConfig+0x106>
 80012e4:	e000      	b.n	80012e8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d063      	beq.n	80013bc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012f4:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001300:	4b48      	ldr	r3, [pc, #288]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b08      	cmp	r3, #8
 800130a:	d11c      	bne.n	8001346 <HAL_RCC_OscConfig+0x186>
 800130c:	4b45      	ldr	r3, [pc, #276]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d116      	bne.n	8001346 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001318:	4b42      	ldr	r3, [pc, #264]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d005      	beq.n	8001330 <HAL_RCC_OscConfig+0x170>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d001      	beq.n	8001330 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e1a1      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	493c      	ldr	r1, [pc, #240]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001332:	4b3c      	ldr	r3, [pc, #240]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001344:	e03a      	b.n	80013bc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d020      	beq.n	8001390 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <HAL_RCC_OscConfig+0x268>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fc00 	bl	8000b58 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fbfc 	bl	8000b58 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e182      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	492a      	ldr	r1, [pc, #168]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 800137c:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
 800138e:	e015      	b.n	80013bc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HAL_RCC_OscConfig+0x268>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fbdf 	bl	8000b58 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff fbdb 	bl	8000b58 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e161      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d039      	beq.n	800143c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d019      	beq.n	8001404 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fbbf 	bl	8000b58 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff fbbb 	bl	8000b58 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e141      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_RCC_OscConfig+0x264>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f000 fae3 	bl	80019c8 <RCC_Delay>
 8001402:	e01b      	b.n	800143c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fba5 	bl	8000b58 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	e00e      	b.n	8001430 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001412:	f7ff fba1 	bl	8000b58 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d907      	bls.n	8001430 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e127      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
 8001424:	40021000 	.word	0x40021000
 8001428:	42420000 	.word	0x42420000
 800142c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	4b92      	ldr	r3, [pc, #584]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ea      	bne.n	8001412 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80a6 	beq.w	8001596 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144e:	4b8b      	ldr	r3, [pc, #556]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4a88      	ldr	r2, [pc, #544]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 800145c:	4b87      	ldr	r3, [pc, #540]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b85      	ldr	r3, [pc, #532]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001472:	2301      	movs	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001476:	4b82      	ldr	r3, [pc, #520]	; (8001680 <HAL_RCC_OscConfig+0x4c0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001482:	4a7f      	ldr	r2, [pc, #508]	; (8001680 <HAL_RCC_OscConfig+0x4c0>)
 8001484:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <HAL_RCC_OscConfig+0x4c0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148e:	f7ff fb63 	bl	8000b58 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff fb5f 	bl	8000b58 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b64      	cmp	r3, #100	; 0x64
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0e5      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	4b75      	ldr	r3, [pc, #468]	; (8001680 <HAL_RCC_OscConfig+0x4c0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x30a>
 80014bc:	4a6f      	ldr	r2, [pc, #444]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80014be:	4b6f      	ldr	r3, [pc, #444]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	e02d      	b.n	8001526 <HAL_RCC_OscConfig+0x366>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x32c>
 80014d2:	4a6a      	ldr	r2, [pc, #424]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80014d4:	4b69      	ldr	r3, [pc, #420]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	6213      	str	r3, [r2, #32]
 80014de:	4a67      	ldr	r2, [pc, #412]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80014e0:	4b66      	ldr	r3, [pc, #408]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	f023 0304 	bic.w	r3, r3, #4
 80014e8:	6213      	str	r3, [r2, #32]
 80014ea:	e01c      	b.n	8001526 <HAL_RCC_OscConfig+0x366>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d10c      	bne.n	800150e <HAL_RCC_OscConfig+0x34e>
 80014f4:	4a61      	ldr	r2, [pc, #388]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80014f6:	4b61      	ldr	r3, [pc, #388]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6213      	str	r3, [r2, #32]
 8001500:	4a5e      	ldr	r2, [pc, #376]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 8001502:	4b5e      	ldr	r3, [pc, #376]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6213      	str	r3, [r2, #32]
 800150c:	e00b      	b.n	8001526 <HAL_RCC_OscConfig+0x366>
 800150e:	4a5b      	ldr	r2, [pc, #364]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 8001510:	4b5a      	ldr	r3, [pc, #360]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	6213      	str	r3, [r2, #32]
 800151a:	4a58      	ldr	r2, [pc, #352]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 800151c:	4b57      	ldr	r3, [pc, #348]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f023 0304 	bic.w	r3, r3, #4
 8001524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d015      	beq.n	800155a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7ff fb13 	bl	8000b58 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff fb0f 	bl	8000b58 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e093      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	4b4b      	ldr	r3, [pc, #300]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0ee      	beq.n	8001536 <HAL_RCC_OscConfig+0x376>
 8001558:	e014      	b.n	8001584 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff fafd 	bl	8000b58 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff faf9 	bl	8000b58 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e07d      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001578:	4b40      	ldr	r3, [pc, #256]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1ee      	bne.n	8001562 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001584:	7dfb      	ldrb	r3, [r7, #23]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d105      	bne.n	8001596 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158a:	4a3c      	ldr	r2, [pc, #240]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 800158c:	4b3b      	ldr	r3, [pc, #236]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d069      	beq.n	8001672 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800159e:	4b37      	ldr	r3, [pc, #220]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d061      	beq.n	800166e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d146      	bne.n	8001640 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b34      	ldr	r3, [pc, #208]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff face 	bl	8000b58 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff faca 	bl	8000b58 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e050      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e6:	d108      	bne.n	80015fa <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015e8:	4924      	ldr	r1, [pc, #144]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015fa:	4820      	ldr	r0, [pc, #128]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a19      	ldr	r1, [r3, #32]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	430b      	orrs	r3, r1
 800160e:	4313      	orrs	r3, r2
 8001610:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fa9e 	bl	8000b58 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fa9a 	bl	8000b58 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e020      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x460>
 800163e:	e018      	b.n	8001672 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fa87 	bl	8000b58 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fa83 	bl	8000b58 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e009      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_RCC_OscConfig+0x4bc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x48e>
 800166c:	e001      	b.n	8001672 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	40007000 	.word	0x40007000
 8001684:	42420060 	.word	0x42420060

08001688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001696:	4b7e      	ldr	r3, [pc, #504]	; (8001890 <HAL_RCC_ClockConfig+0x208>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0207 	and.w	r2, r3, #7
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d210      	bcs.n	80016c6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a4:	497a      	ldr	r1, [pc, #488]	; (8001890 <HAL_RCC_ClockConfig+0x208>)
 80016a6:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <HAL_RCC_ClockConfig+0x208>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 0207 	bic.w	r2, r3, #7
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016b4:	4b76      	ldr	r3, [pc, #472]	; (8001890 <HAL_RCC_ClockConfig+0x208>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0207 	and.w	r2, r3, #7
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0e0      	b.n	8001888 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d020      	beq.n	8001714 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016de:	4a6d      	ldr	r2, [pc, #436]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 80016e0:	4b6c      	ldr	r3, [pc, #432]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016e8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f6:	4a67      	ldr	r2, [pc, #412]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 80016f8:	4b66      	ldr	r3, [pc, #408]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001700:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001702:	4964      	ldr	r1, [pc, #400]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 8001704:	4b63      	ldr	r3, [pc, #396]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d06a      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001728:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d115      	bne.n	8001760 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0a7      	b.n	8001888 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d107      	bne.n	8001750 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001740:	4b54      	ldr	r3, [pc, #336]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e09b      	b.n	8001888 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e093      	b.n	8001888 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001760:	494c      	ldr	r1, [pc, #304]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 8001762:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4313      	orrs	r3, r2
 8001770:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001772:	f7ff f9f1 	bl	8000b58 <HAL_GetTick>
 8001776:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d112      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001782:	f7ff f9e9 	bl	8000b58 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e077      	b.n	8001888 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001798:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d1ee      	bne.n	8001782 <HAL_RCC_ClockConfig+0xfa>
 80017a4:	e027      	b.n	80017f6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d11d      	bne.n	80017ea <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7ff f9d2 	bl	8000b58 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e060      	b.n	8001888 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c6:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d1ee      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x128>
 80017d2:	e010      	b.n	80017f6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d4:	f7ff f9c0 	bl	8000b58 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e04e      	b.n	8001888 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ee      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <HAL_RCC_ClockConfig+0x208>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0207 	and.w	r2, r3, #7
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d910      	bls.n	8001826 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001804:	4922      	ldr	r1, [pc, #136]	; (8001890 <HAL_RCC_ClockConfig+0x208>)
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_RCC_ClockConfig+0x208>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 0207 	bic.w	r2, r3, #7
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_RCC_ClockConfig+0x208>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0207 	and.w	r2, r3, #7
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d001      	beq.n	8001826 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e030      	b.n	8001888 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	2b00      	cmp	r3, #0
 8001830:	d008      	beq.n	8001844 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001832:	4918      	ldr	r1, [pc, #96]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d009      	beq.n	8001864 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001850:	4910      	ldr	r1, [pc, #64]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001864:	f000 f81c 	bl	80018a0 <HAL_RCC_GetSysClockFreq>
 8001868:	4601      	mov	r1, r0
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x20c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_RCC_ClockConfig+0x210>)
 8001876:	5cd3      	ldrb	r3, [r2, r3]
 8001878:	fa21 f303 	lsr.w	r3, r1, r3
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_RCC_ClockConfig+0x214>)
 800187e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff f927 	bl	8000ad4 <HAL_InitTick>
  
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40022000 	.word	0x40022000
 8001894:	40021000 	.word	0x40021000
 8001898:	08002e78 	.word	0x08002e78
 800189c:	200000f0 	.word	0x200000f0

080018a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a0:	b490      	push	{r4, r7}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018a6:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018a8:	1d3c      	adds	r4, r7, #4
 80018aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x40>
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x46>
 80018de:	e02d      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_RCC_GetSysClockFreq+0xbc>)
 80018e2:	623b      	str	r3, [r7, #32]
      break;
 80018e4:	e02d      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	0c9b      	lsrs	r3, r3, #18
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018f2:	4413      	add	r3, r2
 80018f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	0c5b      	lsrs	r3, r3, #17
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001912:	4413      	add	r3, r2
 8001914:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001918:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4a0f      	ldr	r2, [pc, #60]	; (800195c <HAL_RCC_GetSysClockFreq+0xbc>)
 800191e:	fb02 f203 	mul.w	r2, r2, r3
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
 800192a:	e004      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	623b      	str	r3, [r7, #32]
      break;
 800193a:	e002      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_RCC_GetSysClockFreq+0xbc>)
 800193e:	623b      	str	r3, [r7, #32]
      break;
 8001940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001942:	6a3b      	ldr	r3, [r7, #32]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bc90      	pop	{r4, r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	08002e18 	.word	0x08002e18
 8001954:	08002e28 	.word	0x08002e28
 8001958:	40021000 	.word	0x40021000
 800195c:	007a1200 	.word	0x007a1200
 8001960:	003d0900 	.word	0x003d0900

08001964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001968:	4b02      	ldr	r3, [pc, #8]	; (8001974 <HAL_RCC_GetHCLKFreq+0x10>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	200000f0 	.word	0x200000f0

08001978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800197c:	f7ff fff2 	bl	8001964 <HAL_RCC_GetHCLKFreq>
 8001980:	4601      	mov	r1, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4a03      	ldr	r2, [pc, #12]	; (800199c <HAL_RCC_GetPCLK1Freq+0x24>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	08002e88 	.word	0x08002e88

080019a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019a4:	f7ff ffde 	bl	8001964 <HAL_RCC_GetHCLKFreq>
 80019a8:	4601      	mov	r1, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	0adb      	lsrs	r3, r3, #11
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b6:	5cd3      	ldrb	r3, [r2, r3]
 80019b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08002e88 	.word	0x08002e88

080019c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <RCC_Delay+0x34>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <RCC_Delay+0x38>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0a5b      	lsrs	r3, r3, #9
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80019e4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	60fa      	str	r2, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f9      	bne.n	80019e4 <RCC_Delay+0x1c>
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200000f0 	.word	0x200000f0
 8001a00:	10624dd3 	.word	0x10624dd3

08001a04 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e01d      	b.n	8001a52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe ff9a 	bl	8000964 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f000 fa2a 	bl	8001e9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	68d2      	ldr	r2, [r2, #12]
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	f042 0201 	orr.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d122      	bne.n	8001aea <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d11b      	bne.n	8001aea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f06f 0202 	mvn.w	r2, #2
 8001aba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f9c8 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001ad6:	e005      	b.n	8001ae4 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f9bb 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f9ca 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d122      	bne.n	8001b3e <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d11b      	bne.n	8001b3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f06f 0204 	mvn.w	r2, #4
 8001b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f99e 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001b2a:	e005      	b.n	8001b38 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f991 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f9a0 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d122      	bne.n	8001b92 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d11b      	bne.n	8001b92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f06f 0208 	mvn.w	r2, #8
 8001b62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2204      	movs	r2, #4
 8001b68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f974 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001b7e:	e005      	b.n	8001b8c <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f967 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f976 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d122      	bne.n	8001be6 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d11b      	bne.n	8001be6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f06f 0210 	mvn.w	r2, #16
 8001bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2208      	movs	r2, #8
 8001bbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f94a 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001bd2:	e005      	b.n	8001be0 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f93d 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f94c 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d10e      	bne.n	8001c12 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f06f 0201 	mvn.w	r2, #1
 8001c0a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7fe fb5f 	bl	80002d0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1c:	2b80      	cmp	r3, #128	; 0x80
 8001c1e:	d10e      	bne.n	8001c3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	2b80      	cmp	r3, #128	; 0x80
 8001c2c:	d107      	bne.n	8001c3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fa87 	bl	800214c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c48:	2b40      	cmp	r3, #64	; 0x40
 8001c4a:	d10e      	bne.n	8001c6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c56:	2b40      	cmp	r3, #64	; 0x40
 8001c58:	d107      	bne.n	8001c6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c62:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f910 	bl	8001e8a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d10e      	bne.n	8001c96 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b20      	cmp	r3, #32
 8001c84:	d107      	bne.n	8001c96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f06f 0220 	mvn.w	r2, #32
 8001c8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fa52 	bl	800213a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b084      	sub	sp, #16
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_ConfigClockSource+0x1c>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e0c8      	b.n	8001e4c <HAL_TIM_ConfigClockSource+0x1ae>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001cd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ce0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b40      	cmp	r3, #64	; 0x40
 8001cf0:	d077      	beq.n	8001de2 <HAL_TIM_ConfigClockSource+0x144>
 8001cf2:	2b40      	cmp	r3, #64	; 0x40
 8001cf4:	d80e      	bhi.n	8001d14 <HAL_TIM_ConfigClockSource+0x76>
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	f000 808a 	beq.w	8001e10 <HAL_TIM_ConfigClockSource+0x172>
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d802      	bhi.n	8001d06 <HAL_TIM_ConfigClockSource+0x68>
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d07e      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001d04:	e099      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	f000 8089 	beq.w	8001e1e <HAL_TIM_ConfigClockSource+0x180>
 8001d0c:	2b30      	cmp	r3, #48	; 0x30
 8001d0e:	f000 808d 	beq.w	8001e2c <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8001d12:	e092      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001d14:	2b70      	cmp	r3, #112	; 0x70
 8001d16:	d016      	beq.n	8001d46 <HAL_TIM_ConfigClockSource+0xa8>
 8001d18:	2b70      	cmp	r3, #112	; 0x70
 8001d1a:	d804      	bhi.n	8001d26 <HAL_TIM_ConfigClockSource+0x88>
 8001d1c:	2b50      	cmp	r3, #80	; 0x50
 8001d1e:	d040      	beq.n	8001da2 <HAL_TIM_ConfigClockSource+0x104>
 8001d20:	2b60      	cmp	r3, #96	; 0x60
 8001d22:	d04e      	beq.n	8001dc2 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8001d24:	e089      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d2a:	d003      	beq.n	8001d34 <HAL_TIM_ConfigClockSource+0x96>
 8001d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d30:	d024      	beq.n	8001d7c <HAL_TIM_ConfigClockSource+0xde>
    break;
 8001d32:	e082      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	6892      	ldr	r2, [r2, #8]
 8001d3e:	f022 0207 	bic.w	r2, r2, #7
 8001d42:	609a      	str	r2, [r3, #8]
    break;
 8001d44:	e079      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	6899      	ldr	r1, [r3, #8]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f000 f98b 	bl	8002070 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	609a      	str	r2, [r3, #8]
    break;
 8001d7a:	e05e      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6899      	ldr	r1, [r3, #8]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f000 f970 	bl	8002070 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	6892      	ldr	r2, [r2, #8]
 8001d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d9e:	609a      	str	r2, [r3, #8]
    break;
 8001da0:	e04b      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6859      	ldr	r1, [r3, #4]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	461a      	mov	r2, r3
 8001db0:	f000 f8da 	bl	8001f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2150      	movs	r1, #80	; 0x50
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f939 	bl	8002032 <TIM_ITRx_SetConfig>
    break;
 8001dc0:	e03b      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f000 f8fc 	bl	8001fcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2160      	movs	r1, #96	; 0x60
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f929 	bl	8002032 <TIM_ITRx_SetConfig>
    break;
 8001de0:	e02b      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f000 f8ba 	bl	8001f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2140      	movs	r1, #64	; 0x40
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f919 	bl	8002032 <TIM_ITRx_SetConfig>
    break;
 8001e00:	e01b      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 f912 	bl	8002032 <TIM_ITRx_SetConfig>
    break;
 8001e0e:	e014      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2110      	movs	r1, #16
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f90b 	bl	8002032 <TIM_ITRx_SetConfig>
    break;
 8001e1c:	e00d      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2120      	movs	r1, #32
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 f904 	bl	8002032 <TIM_ITRx_SetConfig>
    break;
 8001e2a:	e006      	b.n	8001e3a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2130      	movs	r1, #48	; 0x30
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f8fd 	bl	8002032 <TIM_ITRx_SetConfig>
    break;
 8001e38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a2a      	ldr	r2, [pc, #168]	; (8001f5c <TIM_Base_SetConfig+0xc0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00b      	beq.n	8001ed0 <TIM_Base_SetConfig+0x34>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d007      	beq.n	8001ed0 <TIM_Base_SetConfig+0x34>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a27      	ldr	r2, [pc, #156]	; (8001f60 <TIM_Base_SetConfig+0xc4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <TIM_Base_SetConfig+0x34>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a26      	ldr	r2, [pc, #152]	; (8001f64 <TIM_Base_SetConfig+0xc8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d108      	bne.n	8001ee2 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <TIM_Base_SetConfig+0xc0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00b      	beq.n	8001f02 <TIM_Base_SetConfig+0x66>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d007      	beq.n	8001f02 <TIM_Base_SetConfig+0x66>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <TIM_Base_SetConfig+0xc4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <TIM_Base_SetConfig+0x66>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <TIM_Base_SetConfig+0xc8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d108      	bne.n	8001f14 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f1a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <TIM_Base_SetConfig+0xc0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d103      	bne.n	8001f4c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	615a      	str	r2, [r3, #20]
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40000800 	.word	0x40000800

08001f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	f023 0201 	bic.w	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f023 030a 	bic.w	r3, r3, #10
 8001fac:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	621a      	str	r2, [r3, #32]
}
 8001fc2:	bf00      	nop
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f023 0210 	bic.w	r2, r3, #16
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ffe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	031b      	lsls	r3, r3, #12
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	4313      	orrs	r3, r2
 8002008:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002010:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	621a      	str	r2, [r3, #32]
}
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8002032:	b480      	push	{r7}
 8002034:	b085      	sub	sp, #20
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	f043 0307 	orr.w	r3, r3, #7
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	609a      	str	r2, [r3, #8]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800208e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	021a      	lsls	r2, r3, #8
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	431a      	orrs	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	609a      	str	r2, [r3, #8]
}
 80020a8:	bf00      	nop
 80020aa:	371c      	adds	r7, #28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e032      	b.n	8002130 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2202      	movs	r2, #2
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	6852      	ldr	r2, [r2, #4]
 80020e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020e8:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	6851      	ldr	r1, [r2, #4]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	6892      	ldr	r2, [r2, #8]
 8002106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800210a:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	6891      	ldr	r1, [r2, #8]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	6852      	ldr	r2, [r2, #4]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e03f      	b.n	80021f0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d106      	bne.n	800218a <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7fe fc3b 	bl	8000a00 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2224      	movs	r2, #36	; 0x24
 800218e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	68d2      	ldr	r2, [r2, #12]
 800219c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a0:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 faec 	bl	8002780 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	6912      	ldr	r2, [r2, #16]
 80021b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	6952      	ldr	r2, [r2, #20]
 80021c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021c6:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	68d2      	ldr	r2, [r2, #12]
 80021d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d6:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	4613      	mov	r3, r2
 8002204:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b20      	cmp	r3, #32
 8002210:	d130      	bne.n	8002274 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL) || (Size == 0U)) 
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_UART_Transmit_IT+0x26>
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e029      	b.n	8002276 <HAL_UART_Transmit_IT+0x7e>
    }
    /* Process Locked */
    __HAL_LOCK(huart);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_UART_Transmit_IT+0x38>
 800222c:	2302      	movs	r3, #2
 800222e:	e022      	b.n	8002276 <HAL_UART_Transmit_IT+0x7e>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	88fa      	ldrh	r2, [r7, #6]
 8002248:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2221      	movs	r2, #33	; 0x21
 8002254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	68d2      	ldr	r2, [r2, #12]
 800226a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800226e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e000      	b.n	8002276 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002274:	2302      	movs	r3, #2
  }
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b20      	cmp	r3, #32
 8002298:	d140      	bne.n	800231c <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HAL_UART_Receive_IT+0x26>
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e039      	b.n	800231e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_UART_Receive_IT+0x38>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e032      	b.n	800231e <HAL_UART_Receive_IT+0x9e>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	88fa      	ldrh	r2, [r7, #6]
 80022ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2222      	movs	r2, #34	; 0x22
 80022dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	68d2      	ldr	r2, [r2, #12]
 80022f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	6952      	ldr	r2, [r2, #20]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	68d2      	ldr	r2, [r2, #12]
 8002312:	f042 0220 	orr.w	r2, r2, #32
 8002316:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_UART_IRQHandler+0x52>
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f983 	bl	800267e <UART_Receive_IT>
      return;
 8002378:	e0cc      	b.n	8002514 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80ab 	beq.w	80024d8 <HAL_UART_IRQHandler+0x1b0>
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_UART_IRQHandler+0x70>
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80a0 	beq.w	80024d8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_UART_IRQHandler+0x90>
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_UART_IRQHandler+0xb0>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d0:	f043 0202 	orr.w	r2, r3, #2
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_UART_IRQHandler+0xd0>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	f043 0204 	orr.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_UART_IRQHandler+0xf0>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002410:	f043 0208 	orr.w	r2, r3, #8
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d078      	beq.n	8002512 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_UART_IRQHandler+0x112>
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f922 	bl	800267e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <HAL_UART_IRQHandler+0x13a>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d031      	beq.n	80024c6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f86e 	bl	8002544 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d023      	beq.n	80024be <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	6952      	ldr	r2, [r2, #20]
 8002480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002484:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248a:	2b00      	cmp	r3, #0
 800248c:	d013      	beq.n	80024b6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002492:	4a22      	ldr	r2, [pc, #136]	; (800251c <HAL_UART_IRQHandler+0x1f4>)
 8002494:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fc6e 	bl	8000d7c <HAL_DMA_Abort_IT>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d016      	beq.n	80024d4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024b0:	4610      	mov	r0, r2
 80024b2:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b4:	e00e      	b.n	80024d4 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f83b 	bl	8002532 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024bc:	e00a      	b.n	80024d4 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f837 	bl	8002532 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c4:	e006      	b.n	80024d4 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f833 	bl	8002532 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80024d2:	e01e      	b.n	8002512 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d4:	bf00      	nop
    return;
 80024d6:	e01c      	b.n	8002512 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_UART_IRQHandler+0x1cc>
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f85a 	bl	80025a6 <UART_Transmit_IT>
    return;
 80024f2:	e00f      	b.n	8002514 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_UART_IRQHandler+0x1ec>
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8a0 	bl	800264e <UART_EndTransmit_IT>
    return;
 800250e:	bf00      	nop
 8002510:	e000      	b.n	8002514 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002512:	bf00      	nop
  }
}
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	0800257f 	.word	0x0800257f

08002520 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	68d2      	ldr	r2, [r2, #12]
 8002556:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800255a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	6952      	ldr	r2, [r2, #20]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff ffca 	bl	8002532 <HAL_UART_ErrorCallback>
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b21      	cmp	r3, #33	; 0x21
 80025b8:	d143      	bne.n	8002642 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c2:	d119      	bne.n	80025f8 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	8812      	ldrh	r2, [r2, #0]
 80025d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d6:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	1c9a      	adds	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	621a      	str	r2, [r3, #32]
 80025ea:	e00e      	b.n	800260a <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	621a      	str	r2, [r3, #32]
 80025f6:	e008      	b.n	800260a <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	1c58      	adds	r0, r3, #1
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	6208      	str	r0, [r1, #32]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29b      	uxth	r3, r3
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4619      	mov	r1, r3
 8002618:	84d1      	strh	r1, [r2, #38]	; 0x26
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	68d2      	ldr	r2, [r2, #12]
 8002628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800262c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	68d2      	ldr	r2, [r2, #12]
 8002638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800263c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002642:	2302      	movs	r3, #2
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	68d2      	ldr	r2, [r2, #12]
 8002660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002664:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ff56 	bl	8002520 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b22      	cmp	r3, #34	; 0x22
 8002690:	d171      	bne.n	8002776 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269a:	d123      	bne.n	80026e4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10e      	bne.n	80026c8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	1c9a      	adds	r2, r3, #2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	629a      	str	r2, [r3, #40]	; 0x28
 80026c6:	e029      	b.n	800271c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
 80026e2:	e01b      	b.n	800271c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	1c59      	adds	r1, r3, #1
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6291      	str	r1, [r2, #40]	; 0x28
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	6852      	ldr	r2, [r2, #4]
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e00c      	b.n	800271c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	1c59      	adds	r1, r3, #1
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6291      	str	r1, [r2, #40]	; 0x28
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	6852      	ldr	r2, [r2, #4]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29b      	uxth	r3, r3
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4619      	mov	r1, r3
 800272a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800272c:	2b00      	cmp	r3, #0
 800272e:	d120      	bne.n	8002772 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	68d2      	ldr	r2, [r2, #12]
 800273a:	f022 0220 	bic.w	r2, r2, #32
 800273e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	68d2      	ldr	r2, [r2, #12]
 800274a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800274e:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	6952      	ldr	r2, [r2, #20]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7fd ff91 	bl	8000690 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e002      	b.n	8002778 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e000      	b.n	8002778 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002776:	2302      	movs	r3, #2
  }
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	6912      	ldr	r2, [r2, #16]
 8002796:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	430a      	orrs	r2, r1
 80027a0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027c6:	f023 030c 	bic.w	r3, r3, #12
 80027ca:	68f9      	ldr	r1, [r7, #12]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	6952      	ldr	r2, [r2, #20]
 80027da:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6992      	ldr	r2, [r2, #24]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6f      	ldr	r2, [pc, #444]	; (80029a8 <UART_SetConfig+0x228>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d16b      	bne.n	80028c8 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681c      	ldr	r4, [r3, #0]
 80027f4:	f7ff f8d4 	bl	80019a0 <HAL_RCC_GetPCLK2Freq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	009a      	lsls	r2, r3, #2
 8002802:	441a      	add	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4a67      	ldr	r2, [pc, #412]	; (80029ac <UART_SetConfig+0x22c>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	011d      	lsls	r5, r3, #4
 8002818:	f7ff f8c2 	bl	80019a0 <HAL_RCC_GetPCLK2Freq>
 800281c:	4602      	mov	r2, r0
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	009a      	lsls	r2, r3, #2
 8002826:	441a      	add	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002832:	f7ff f8b5 	bl	80019a0 <HAL_RCC_GetPCLK2Freq>
 8002836:	4602      	mov	r2, r0
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	009a      	lsls	r2, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	4a57      	ldr	r2, [pc, #348]	; (80029ac <UART_SetConfig+0x22c>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2264      	movs	r2, #100	; 0x64
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	1af3      	subs	r3, r6, r3
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	3332      	adds	r3, #50	; 0x32
 8002860:	4a52      	ldr	r2, [pc, #328]	; (80029ac <UART_SetConfig+0x22c>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286c:	441d      	add	r5, r3
 800286e:	f7ff f897 	bl	80019a0 <HAL_RCC_GetPCLK2Freq>
 8002872:	4602      	mov	r2, r0
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	009a      	lsls	r2, r3, #2
 800287c:	441a      	add	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fbb2 f6f3 	udiv	r6, r2, r3
 8002888:	f7ff f88a 	bl	80019a0 <HAL_RCC_GetPCLK2Freq>
 800288c:	4602      	mov	r2, r0
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	441a      	add	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	4a42      	ldr	r2, [pc, #264]	; (80029ac <UART_SetConfig+0x22c>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	2264      	movs	r2, #100	; 0x64
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	1af3      	subs	r3, r6, r3
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	3332      	adds	r3, #50	; 0x32
 80028b6:	4a3d      	ldr	r2, [pc, #244]	; (80029ac <UART_SetConfig+0x22c>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	442b      	add	r3, r5
 80028c4:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80028c6:	e06a      	b.n	800299e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681c      	ldr	r4, [r3, #0]
 80028cc:	f7ff f854 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	009a      	lsls	r2, r3, #2
 80028da:	441a      	add	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	4a31      	ldr	r2, [pc, #196]	; (80029ac <UART_SetConfig+0x22c>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	011d      	lsls	r5, r3, #4
 80028f0:	f7ff f842 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	009a      	lsls	r2, r3, #2
 80028fe:	441a      	add	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	fbb2 f6f3 	udiv	r6, r2, r3
 800290a:	f7ff f835 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 800290e:	4602      	mov	r2, r0
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009a      	lsls	r2, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	4a21      	ldr	r2, [pc, #132]	; (80029ac <UART_SetConfig+0x22c>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2264      	movs	r2, #100	; 0x64
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	1af3      	subs	r3, r6, r3
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	3332      	adds	r3, #50	; 0x32
 8002938:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <UART_SetConfig+0x22c>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002944:	441d      	add	r5, r3
 8002946:	f7ff f817 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 800294a:	4602      	mov	r2, r0
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009a      	lsls	r2, r3, #2
 8002954:	441a      	add	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002960:	f7ff f80a 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 8002964:	4602      	mov	r2, r0
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	009a      	lsls	r2, r3, #2
 800296e:	441a      	add	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <UART_SetConfig+0x22c>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	2264      	movs	r2, #100	; 0x64
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	1af3      	subs	r3, r6, r3
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	3332      	adds	r3, #50	; 0x32
 800298e:	4a07      	ldr	r2, [pc, #28]	; (80029ac <UART_SetConfig+0x22c>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	442b      	add	r3, r5
 800299c:	60a3      	str	r3, [r4, #8]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40013800 	.word	0x40013800
 80029ac:	51eb851f 	.word	0x51eb851f

080029b0 <assert_failed>:
    }

#else
    // empty function !
    void assert_failed(uint8_t * file, uint32_t line) 
    {
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
        (void)file;
        (void)line;
    }
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <_2nd_complement>:
 * @param num 
 */
static void _2nd_complement(int32_t* num);


static void _2nd_complement(int32_t* num) {
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	int32_t temp = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
	temp = (~(*num) + 1); 
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	425b      	negs	r3, r3
 80029d6:	60fb      	str	r3, [r7, #12]
	*num = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	601a      	str	r2, [r3, #0]
}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <num2str>:


uint8_t num2str(int32_t num_in, uint8_t *const pStr_out) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	77fb      	strb	r3, [r7, #31]
	uint8_t i2 = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	77bb      	strb	r3, [r7, #30]
	uint8_t num_cnt = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	777b      	strb	r3, [r7, #29]
	uint8_t sign_offset = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	773b      	strb	r3, [r7, #28]
	uint8_t temp_str[15];
	
	if (num_in == 0){
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <num2str+0x34>
		pStr_out[0] = '0';
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2230      	movs	r2, #48	; 0x30
 8002a0c:	701a      	strb	r2, [r3, #0]
		pStr_out[1] = 0; // zero termination
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
        num_cnt = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	777b      	strb	r3, [r7, #29]
 8002a1a:	e053      	b.n	8002ac4 <num2str+0xdc>
	} else {

		if (num_in < 0)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	da08      	bge.n	8002a34 <num2str+0x4c>
		{
			pStr_out[0] = '-';
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	222d      	movs	r2, #45	; 0x2d
 8002a26:	701a      	strb	r2, [r3, #0]
			sign_offset = 1;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	773b      	strb	r3, [r7, #28]
			_2nd_complement(&num_in);
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ffc8 	bl	80029c4 <_2nd_complement>
		}
		for (i = 0; num_in > 0; i++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e01f      	b.n	8002a7a <num2str+0x92>
		{
            /* @todo try to replace % operator (assumsion is that this is slow on 8bit) */
			temp_str[i] = (uint8_t)((num_in % 10) + '0'); // ascii shift for numbers 0 -> 48(dec)
 8002a3a:	7ff8      	ldrb	r0, [r7, #31]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <num2str+0xec>)
 8002a40:	fb83 1302 	smull	r1, r3, r3, r2
 8002a44:	1099      	asrs	r1, r3, #2
 8002a46:	17d3      	asrs	r3, r2, #31
 8002a48:	1ac9      	subs	r1, r1, r3
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	1ad1      	subs	r1, r2, r3
 8002a54:	b2cb      	uxtb	r3, r1
 8002a56:	3330      	adds	r3, #48	; 0x30
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	f107 0320 	add.w	r3, r7, #32
 8002a5e:	4403      	add	r3, r0
 8002a60:	f803 2c14 	strb.w	r2, [r3, #-20]
			num_in = num_in / 10;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <num2str+0xec>)
 8002a68:	fb82 1203 	smull	r1, r2, r2, r3
 8002a6c:	1092      	asrs	r2, r2, #2
 8002a6e:	17db      	asrs	r3, r3, #31
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	607b      	str	r3, [r7, #4]
		for (i = 0; num_in > 0; i++)
 8002a74:	7ffb      	ldrb	r3, [r7, #31]
 8002a76:	3301      	adds	r3, #1
 8002a78:	77fb      	strb	r3, [r7, #31]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	dcdc      	bgt.n	8002a3a <num2str+0x52>
		}
		num_cnt = i;
 8002a80:	7ffb      	ldrb	r3, [r7, #31]
 8002a82:	777b      	strb	r3, [r7, #29]
		i += sign_offset;
 8002a84:	7ffa      	ldrb	r2, [r7, #31]
 8002a86:	7f3b      	ldrb	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	77fb      	strb	r3, [r7, #31]
		// add null termination at the end of string
		pStr_out[i] = 0;
 8002a8c:	7ffb      	ldrb	r3, [r7, #31]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	4413      	add	r3, r2
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
		// revers array
		for (i2 = 0; i2 < num_cnt; i2++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	77bb      	strb	r3, [r7, #30]
 8002a9a:	e00f      	b.n	8002abc <num2str+0xd4>
		{
			i--;
 8002a9c:	7ffb      	ldrb	r3, [r7, #31]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	77fb      	strb	r3, [r7, #31]
			pStr_out[i] = temp_str[i2];
 8002aa2:	7ffb      	ldrb	r3, [r7, #31]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	7fba      	ldrb	r2, [r7, #30]
 8002aaa:	f107 0120 	add.w	r1, r7, #32
 8002aae:	440a      	add	r2, r1
 8002ab0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8002ab4:	701a      	strb	r2, [r3, #0]
		for (i2 = 0; i2 < num_cnt; i2++)
 8002ab6:	7fbb      	ldrb	r3, [r7, #30]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	77bb      	strb	r3, [r7, #30]
 8002abc:	7fba      	ldrb	r2, [r7, #30]
 8002abe:	7f7b      	ldrb	r3, [r7, #29]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3eb      	bcc.n	8002a9c <num2str+0xb4>
		}
	}

    /* return string size */
	return (uint8_t)(num_cnt + sign_offset);
 8002ac4:	7f7a      	ldrb	r2, [r7, #29]
 8002ac6:	7f3b      	ldrb	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	b2db      	uxtb	r3, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	66666667 	.word	0x66666667

08002ad8 <str2num>:


uint8_t str2num(const uint8_t *const str, int32_t *outNum) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
#define MUN_MAX_DIGIT_CNT       (30u)

    uint8_t return_err = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]

	uint8_t i = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73bb      	strb	r3, [r7, #14]
    int8_t sign = 1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	737b      	strb	r3, [r7, #13]
	int32_t temp_num = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]

    /* check if string is negative number */
    if(str[i] == '-') {
 8002af2:	7bbb      	ldrb	r3, [r7, #14]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b2d      	cmp	r3, #45	; 0x2d
 8002afc:	d130      	bne.n	8002b60 <str2num+0x88>
        sign = -1;
 8002afe:	23ff      	movs	r3, #255	; 0xff
 8002b00:	737b      	strb	r3, [r7, #13]
        ++i;
 8002b02:	7bbb      	ldrb	r3, [r7, #14]
 8002b04:	3301      	adds	r3, #1
 8002b06:	73bb      	strb	r3, [r7, #14]
    } 

	for ( ; str[i] != 0; ++i)
 8002b08:	e02a      	b.n	8002b60 <str2num+0x88>
	{
		if (i > MUN_MAX_DIGIT_CNT) {
 8002b0a:	7bbb      	ldrb	r3, [r7, #14]
 8002b0c:	2b1e      	cmp	r3, #30
 8002b0e:	d904      	bls.n	8002b1a <str2num+0x42>
            /* protection if string is not NULL terminated */
            temp_num = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
            return_err = 1;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
            break;
 8002b18:	e028      	b.n	8002b6c <str2num+0x94>
			// return 0; 
		}

		temp_num *= 10;
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
		if (str[i] >= '0' && str[i] <= '9')
 8002b26:	7bbb      	ldrb	r3, [r7, #14]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b2f      	cmp	r3, #47	; 0x2f
 8002b30:	d911      	bls.n	8002b56 <str2num+0x7e>
 8002b32:	7bbb      	ldrb	r3, [r7, #14]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b39      	cmp	r3, #57	; 0x39
 8002b3c:	d80b      	bhi.n	8002b56 <str2num+0x7e>
		{
			temp_num += str[i] - '0';
 8002b3e:	7bbb      	ldrb	r3, [r7, #14]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	3b30      	subs	r3, #48	; 0x30
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60bb      	str	r3, [r7, #8]
	for ( ; str[i] != 0; ++i)
 8002b4e:	7bbb      	ldrb	r3, [r7, #14]
 8002b50:	3301      	adds	r3, #1
 8002b52:	73bb      	strb	r3, [r7, #14]
 8002b54:	e004      	b.n	8002b60 <str2num+0x88>
		} else {
			/* this is not a number (NaN) */
            temp_num = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
            return_err = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
            break;
 8002b5e:	e005      	b.n	8002b6c <str2num+0x94>
	for ( ; str[i] != 0; ++i)
 8002b60:	7bbb      	ldrb	r3, [r7, #14]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ce      	bne.n	8002b0a <str2num+0x32>
			//return 0; 
		}
	}
    *outNum = temp_num * sign;
 8002b6c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	fb02 f203 	mul.w	r2, r2, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	601a      	str	r2, [r3, #0]

    return (return_err);
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
	...

08002b88 <sw_tm_getNewSlot>:
sw_timer_t *pSw_timers[SW_TM_INST_MAX]; 

/* track number of sw timer instances */
static uint8_t sw_tm_slot_id = 0;

static uint8_t sw_tm_getNewSlot(sw_timer_t* pThis) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	
	if (sw_tm_slot_id >= SW_TM_INST_MAX)
 8002b90:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <sw_tm_getNewSlot+0x40>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b09      	cmp	r3, #9
 8002b96:	d905      	bls.n	8002ba4 <sw_tm_getNewSlot+0x1c>
	{
        assert(0);
 8002b98:	213a      	movs	r1, #58	; 0x3a
 8002b9a:	480c      	ldr	r0, [pc, #48]	; (8002bcc <sw_tm_getNewSlot+0x44>)
 8002b9c:	f7ff ff08 	bl	80029b0 <assert_failed>
		return 1; // max number of counter reached
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e00d      	b.n	8002bc0 <sw_tm_getNewSlot+0x38>
	} else {
		pSw_timers[sw_tm_slot_id] = pThis;	
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <sw_tm_getNewSlot+0x40>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <sw_tm_getNewSlot+0x48>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		// count number of software_timers
		++sw_tm_slot_id;
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <sw_tm_getNewSlot+0x40>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <sw_tm_getNewSlot+0x40>)
 8002bbc:	701a      	strb	r2, [r3, #0]
		return 0;
 8002bbe:	2300      	movs	r3, #0
	}	
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	2000016a 	.word	0x2000016a
 8002bcc:	08002e2c 	.word	0x08002e2c
 8002bd0:	200001f0 	.word	0x200001f0

08002bd4 <swTimer_tick>:


void swTimer_tick() {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	71fb      	strb	r3, [r7, #7]
    sw_timer_t *pTimer;

	for (i; i < sw_tm_slot_id; ++i) {
 8002bde:	e027      	b.n	8002c30 <swTimer_tick+0x5c>
        pTimer = pSw_timers[i]; 
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <swTimer_tick+0x70>)
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	603b      	str	r3, [r7, #0]
		if (pTimer->_status == SWTM_RUNNING) {
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	7a1b      	ldrb	r3, [r3, #8]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d11b      	bne.n	8002c2a <swTimer_tick+0x56>
			pTimer->_cnt++;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	601a      	str	r2, [r3, #0]
			
			if (pTimer->_cnt >= pTimer->_set_value && pTimer->_set_value != SWTM_CON_RUN) {
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d310      	bcc.n	8002c2a <swTimer_tick+0x56>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00c      	beq.n	8002c2a <swTimer_tick+0x56>
				pTimer->_status = SWTM_ELAPSED;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2203      	movs	r2, #3
 8002c14:	721a      	strb	r2, [r3, #8]
				pTimer->_cnt = 0;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
				
				if (pTimer->_callback_fptr != NULL) {
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <swTimer_tick+0x56>
					pTimer->_callback_fptr(); 
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4798      	blx	r3
	for (i; i < sw_tm_slot_id; ++i) {
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	71fb      	strb	r3, [r7, #7]
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <swTimer_tick+0x74>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	79fa      	ldrb	r2, [r7, #7]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d3d2      	bcc.n	8002be0 <swTimer_tick+0xc>
				}
			}
		} 		
	}
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200001f0 	.word	0x200001f0
 8002c48:	2000016a 	.word	0x2000016a

08002c4c <swTimer_init>:

/* constructor */
void swTimer_init(sw_timer_t* pThis) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	sw_tm_getNewSlot(pThis);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff97 	bl	8002b88 <sw_tm_getNewSlot>
	
	pThis->_status = SWTM_STOP;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	721a      	strb	r2, [r3, #8]
	pThis->_cnt = 0;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
	pThis->_set_value = 0;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	605a      	str	r2, [r3, #4]
	pThis->_callback_fptr = NULL;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <set_method>:


static void set_method(sw_timer_t* pThis, uint32_t set_value){
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
	pThis->_set_value = set_value;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	605a      	str	r2, [r3, #4]
	pThis->_status = SWTM_RUNNING;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	721a      	strb	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <reSet_method>:

static void reSet_method(sw_timer_t* pThis, uint32_t set_value) {
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
	pThis->_set_value = set_value;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
	pThis->_status = SWTM_RUNNING;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	721a      	strb	r2, [r3, #8]
	pThis->_cnt = 0;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <flush_method>:

static void flush_method(sw_timer_t* pThis) {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	pThis->_cnt = 0;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
	pThis->_status = SWTM_STOP;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	721a      	strb	r2, [r3, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <getTime_method>:

static uint32_t getTime_method(sw_timer_t* pThis) {
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
    return (pThis->_cnt);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <pause_method>:

static void pause_method(sw_timer_t* pThis) {
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	pThis->_status = SWTM_PAUSE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	721a      	strb	r2, [r3, #8]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <isElapsed_method>:

static bool isElapsed_method(sw_timer_t* pThis) {
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	if (pThis->_status == SWTM_ELAPSED)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7a1b      	ldrb	r3, [r3, #8]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d101      	bne.n	8002d20 <isElapsed_method+0x14>
	{ 
		return true;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <isElapsed_method+0x16>
	} else {
		return false;
 8002d20:	2300      	movs	r3, #0
	}
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <attach_callBack_method>:

static void attach_callBack_method(sw_timer_t* pThis, pF_swTm callback) {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
	pThis->_callback_fptr = callback;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	60da      	str	r2, [r3, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
	...

08002d48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d4a:	e003      	b.n	8002d54 <LoopCopyDataInit>

08002d4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d52:	3104      	adds	r1, #4

08002d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d54:	480a      	ldr	r0, [pc, #40]	; (8002d80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d5c:	d3f6      	bcc.n	8002d4c <CopyDataInit>
  ldr r2, =_sbss
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d60:	e002      	b.n	8002d68 <LoopFillZerobss>

08002d62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d64:	f842 3b04 	str.w	r3, [r2], #4

08002d68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d6c:	d3f9      	bcc.n	8002d62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d6e:	f7fd fd79 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d72:	f000 f80f 	bl	8002d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d76:	f7fd faf7 	bl	8000368 <main>
  bx lr
 8002d7a:	4770      	bx	lr
  ldr r3, =_sidata
 8002d7c:	08002eb4 	.word	0x08002eb4
  ldr r0, =_sdata
 8002d80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d84:	200000fc 	.word	0x200000fc
  ldr r2, =_sbss
 8002d88:	200000fc 	.word	0x200000fc
  ldr r3, = _ebss
 8002d8c:	20000218 	.word	0x20000218

08002d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d90:	e7fe      	b.n	8002d90 <ADC1_2_IRQHandler>
	...

08002d94 <__libc_init_array>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	2500      	movs	r5, #0
 8002d98:	4e0c      	ldr	r6, [pc, #48]	; (8002dcc <__libc_init_array+0x38>)
 8002d9a:	4c0d      	ldr	r4, [pc, #52]	; (8002dd0 <__libc_init_array+0x3c>)
 8002d9c:	1ba4      	subs	r4, r4, r6
 8002d9e:	10a4      	asrs	r4, r4, #2
 8002da0:	42a5      	cmp	r5, r4
 8002da2:	d109      	bne.n	8002db8 <__libc_init_array+0x24>
 8002da4:	f000 f822 	bl	8002dec <_init>
 8002da8:	2500      	movs	r5, #0
 8002daa:	4e0a      	ldr	r6, [pc, #40]	; (8002dd4 <__libc_init_array+0x40>)
 8002dac:	4c0a      	ldr	r4, [pc, #40]	; (8002dd8 <__libc_init_array+0x44>)
 8002dae:	1ba4      	subs	r4, r4, r6
 8002db0:	10a4      	asrs	r4, r4, #2
 8002db2:	42a5      	cmp	r5, r4
 8002db4:	d105      	bne.n	8002dc2 <__libc_init_array+0x2e>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dbc:	4798      	blx	r3
 8002dbe:	3501      	adds	r5, #1
 8002dc0:	e7ee      	b.n	8002da0 <__libc_init_array+0xc>
 8002dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dc6:	4798      	blx	r3
 8002dc8:	3501      	adds	r5, #1
 8002dca:	e7f2      	b.n	8002db2 <__libc_init_array+0x1e>
 8002dcc:	08002eac 	.word	0x08002eac
 8002dd0:	08002eac 	.word	0x08002eac
 8002dd4:	08002eac 	.word	0x08002eac
 8002dd8:	08002eb0 	.word	0x08002eb0

08002ddc <memset>:
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4402      	add	r2, r0
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <_init>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr

08002df8 <_fini>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	bf00      	nop
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr

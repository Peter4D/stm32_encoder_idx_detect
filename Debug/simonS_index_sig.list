
simonS_index_sig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000290c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000110  20000000  08002ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f8  20000110  08002bd8  00020110  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000208  08002bd8  00020208  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
  9 .debug_info   000125e2  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002567  00000000  00000000  0003271b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c08  00000000  00000000  00034c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af0  00000000  00000000  00035890  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005cb4  00000000  00000000  00036380  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000037f6  00000000  00000000  0003c034  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003f82a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000030b0  00000000  00000000  0003f8a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000110 	.word	0x20000110
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a00 	.word	0x08002a00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000114 	.word	0x20000114
 8000148:	08002a00 	.word	0x08002a00

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4a38      	ldr	r2, [pc, #224]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000172:	4b38      	ldr	r3, [pc, #224]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000174:	699b      	ldr	r3, [r3, #24]
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b35      	ldr	r3, [pc, #212]	; (8000254 <MX_GPIO_Init+0xf8>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4a32      	ldr	r2, [pc, #200]	; (8000254 <MX_GPIO_Init+0xf8>)
 800018a:	4b32      	ldr	r3, [pc, #200]	; (8000254 <MX_GPIO_Init+0xf8>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4a2c      	ldr	r2, [pc, #176]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001a2:	4b2c      	ldr	r3, [pc, #176]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b29      	ldr	r3, [pc, #164]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001be:	4826      	ldr	r0, [pc, #152]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001c0:	f000 fee2 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, out0_Pin|out1_Pin|out2_Pin|out3_Pin, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	210f      	movs	r1, #15
 80001c8:	4824      	ldr	r0, [pc, #144]	; (800025c <MX_GPIO_Init+0x100>)
 80001ca:	f000 fedd 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 80001ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001d4:	2311      	movs	r3, #17
 80001d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001dc:	2302      	movs	r3, #2
 80001de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	4619      	mov	r1, r3
 80001e6:	481c      	ldr	r0, [pc, #112]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001e8:	f000 fd70 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = out0_Pin|out1_Pin|out2_Pin|out3_Pin;
 80001ec:	230f      	movs	r3, #15
 80001ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f0:	2301      	movs	r3, #1
 80001f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f4:	2300      	movs	r3, #0
 80001f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f8:	2302      	movs	r3, #2
 80001fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001fc:	f107 0310 	add.w	r3, r7, #16
 8000200:	4619      	mov	r1, r3
 8000202:	4816      	ldr	r0, [pc, #88]	; (800025c <MX_GPIO_Init+0x100>)
 8000204:	f000 fd62 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = END_SW0_Pin|END_SW1_Pin|END_SW2_Pin|END_SW3_Pin;
 8000208:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800020c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000212:	2301      	movs	r3, #1
 8000214:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4810      	ldr	r0, [pc, #64]	; (8000260 <MX_GPIO_Init+0x104>)
 800021e:	f000 fd55 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = idx_int0_Pin|idx_int1_Pin|idx_int2_Pin|idx_int3_Pin;
 8000222:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_GPIO_Init+0x108>)
 800022a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800022c:	2301      	movs	r3, #1
 800022e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	480a      	ldr	r0, [pc, #40]	; (8000260 <MX_GPIO_Init+0x104>)
 8000238:	f000 fd48 	bl	8000ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2017      	movs	r0, #23
 8000242:	f000 fc90 	bl	8000b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000246:	2017      	movs	r0, #23
 8000248:	f000 fca9 	bl	8000b9e <HAL_NVIC_EnableIRQ>

}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40021000 	.word	0x40021000
 8000258:	40011000 	.word	0x40011000
 800025c:	40010800 	.word	0x40010800
 8000260:	40010c00 	.word	0x40010c00
 8000264:	10210000 	.word	0x10210000

08000268 <taskTimer_cb>:
// sw_timer_t swTmr_ch1 = {0};
// sw_timer_t swTmr_ch2 = {0};
// sw_timer_t swTmr_ch3 = {0};


void taskTimer_cb(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
    //static uint32_t cnt = 0; 

    HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800026c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000270:	4807      	ldr	r0, [pc, #28]	; (8000290 <taskTimer_cb+0x28>)
 8000272:	f000 fea1 	bl	8000fb8 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit_IT(&huart1, uart_test_msg, sizeof(uart_test_msg));
 8000276:	2214      	movs	r2, #20
 8000278:	4906      	ldr	r1, [pc, #24]	; (8000294 <taskTimer_cb+0x2c>)
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <taskTimer_cb+0x30>)
 800027c:	f001 fee2 	bl	8002044 <HAL_UART_Transmit_IT>

    /* set timer for new cycle */
    swTimer.set(&xTaskTimer, TASK_PERIODE);
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <taskTimer_cb+0x34>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f242 7110 	movw	r1, #10000	; 0x2710
 8000288:	4805      	ldr	r0, [pc, #20]	; (80002a0 <taskTimer_cb+0x38>)
 800028a:	4798      	blx	r3
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40011000 	.word	0x40011000
 8000294:	20000000 	.word	0x20000000
 8000298:	2000019c 	.word	0x2000019c
 800029c:	08002aa4 	.word	0x08002aa4
 80002a0:	2000012c 	.word	0x2000012c

080002a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    /* drive software timers: resolition is 0.1 ms */
    swTimer_tick();
 80002ac:	f002 fa8c 	bl	80027c8 <swTimer_tick>
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	80fb      	strh	r3, [r7, #6]
    static uint8_t ext_int_msg[15] = {0};
    static uint8_t pinNum_str[6] = {0};



    switch (GPIO_Pin)
 80002c2:	88fb      	ldrh	r3, [r7, #6]
 80002c4:	2b80      	cmp	r3, #128	; 0x80
 80002c6:	d013      	beq.n	80002f0 <HAL_GPIO_EXTI_Callback+0x38>
 80002c8:	2b80      	cmp	r3, #128	; 0x80
 80002ca:	dc02      	bgt.n	80002d2 <HAL_GPIO_EXTI_Callback+0x1a>
 80002cc:	2b40      	cmp	r3, #64	; 0x40
 80002ce:	d007      	beq.n	80002e0 <HAL_GPIO_EXTI_Callback+0x28>
        {
            strcpy(pinNum_str, "int_3");
            break;
        }
        default:
            break;
 80002d0:	e026      	b.n	8000320 <HAL_GPIO_EXTI_Callback+0x68>
    switch (GPIO_Pin)
 80002d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002d6:	d013      	beq.n	8000300 <HAL_GPIO_EXTI_Callback+0x48>
 80002d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002dc:	d018      	beq.n	8000310 <HAL_GPIO_EXTI_Callback+0x58>
            break;
 80002de:	e01f      	b.n	8000320 <HAL_GPIO_EXTI_Callback+0x68>
            strcpy(pinNum_str, "int_0");
 80002e0:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <HAL_GPIO_EXTI_Callback+0xa8>)
 80002e2:	4a20      	ldr	r2, [pc, #128]	; (8000364 <HAL_GPIO_EXTI_Callback+0xac>)
 80002e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002e8:	6018      	str	r0, [r3, #0]
 80002ea:	3304      	adds	r3, #4
 80002ec:	8019      	strh	r1, [r3, #0]
            break;
 80002ee:	e017      	b.n	8000320 <HAL_GPIO_EXTI_Callback+0x68>
            strcpy(pinNum_str, "int_1");
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <HAL_GPIO_EXTI_Callback+0xa8>)
 80002f2:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <HAL_GPIO_EXTI_Callback+0xb0>)
 80002f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f8:	6018      	str	r0, [r3, #0]
 80002fa:	3304      	adds	r3, #4
 80002fc:	8019      	strh	r1, [r3, #0]
            break;
 80002fe:	e00f      	b.n	8000320 <HAL_GPIO_EXTI_Callback+0x68>
            strcpy(pinNum_str, "int_2");
 8000300:	4b17      	ldr	r3, [pc, #92]	; (8000360 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000302:	4a1a      	ldr	r2, [pc, #104]	; (800036c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000308:	6018      	str	r0, [r3, #0]
 800030a:	3304      	adds	r3, #4
 800030c:	8019      	strh	r1, [r3, #0]
            break;
 800030e:	e007      	b.n	8000320 <HAL_GPIO_EXTI_Callback+0x68>
            strcpy(pinNum_str, "int_3");
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000312:	4a17      	ldr	r2, [pc, #92]	; (8000370 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000314:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000318:	6018      	str	r0, [r3, #0]
 800031a:	3304      	adds	r3, #4
 800031c:	8019      	strh	r1, [r3, #0]
            break;
 800031e:	bf00      	nop
    }

    strcpy(ext_int_msg, "Pin: ");
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000322:	4a15      	ldr	r2, [pc, #84]	; (8000378 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000328:	6018      	str	r0, [r3, #0]
 800032a:	3304      	adds	r3, #4
 800032c:	8019      	strh	r1, [r3, #0]
    //num2str(i, pinNum_str);
    strcat(ext_int_msg, pinNum_str);
 800032e:	490c      	ldr	r1, [pc, #48]	; (8000360 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000330:	4810      	ldr	r0, [pc, #64]	; (8000374 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000332:	f002 fb55 	bl	80029e0 <strcat>
    strcat(ext_int_msg, "\n\r");
 8000336:	480f      	ldr	r0, [pc, #60]	; (8000374 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000338:	f7ff ff08 	bl	800014c <strlen>
 800033c:	4603      	mov	r3, r0
 800033e:	461a      	mov	r2, r3
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000342:	4413      	add	r3, r2
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000346:	8811      	ldrh	r1, [r2, #0]
 8000348:	7892      	ldrb	r2, [r2, #2]
 800034a:	8019      	strh	r1, [r3, #0]
 800034c:	709a      	strb	r2, [r3, #2]

    HAL_UART_Transmit_IT(&huart1, ext_int_msg, sizeof(ext_int_msg));
 800034e:	220f      	movs	r2, #15
 8000350:	4908      	ldr	r1, [pc, #32]	; (8000374 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000352:	480b      	ldr	r0, [pc, #44]	; (8000380 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000354:	f001 fe76 	bl	8002044 <HAL_UART_Transmit_IT>

}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	2000013c 	.word	0x2000013c
 8000364:	08002a18 	.word	0x08002a18
 8000368:	08002a20 	.word	0x08002a20
 800036c:	08002a28 	.word	0x08002a28
 8000370:	08002a30 	.word	0x08002a30
 8000374:	20000144 	.word	0x20000144
 8000378:	08002a38 	.word	0x08002a38
 800037c:	08002a40 	.word	0x08002a40
 8000380:	2000019c 	.word	0x2000019c

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    static uint32_t tick_old = 0;
    uint8_t nCh = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038e:	f000 fab7 	bl	8000900 <HAL_Init>

  /* USER CODE BEGIN Init */

  swTimer_init(&xTaskTimer);
 8000392:	482e      	ldr	r0, [pc, #184]	; (800044c <main+0xc8>)
 8000394:	f002 fa54 	bl	8002840 <swTimer_init>
  swTimer.attach_callBack(&xTaskTimer, taskTimer_cb);
 8000398:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <main+0xcc>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	492d      	ldr	r1, [pc, #180]	; (8000454 <main+0xd0>)
 800039e:	482b      	ldr	r0, [pc, #172]	; (800044c <main+0xc8>)
 80003a0:	4798      	blx	r3
  swTimer.set(&xTaskTimer, TASK_PERIODE);
 80003a2:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <main+0xcc>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f242 7110 	movw	r1, #10000	; 0x2710
 80003aa:	4828      	ldr	r0, [pc, #160]	; (800044c <main+0xc8>)
 80003ac:	4798      	blx	r3

  nCh = sizeof(idx_ch_array)/sizeof(idx_ch_array[0]);
 80003ae:	2304      	movs	r3, #4
 80003b0:	71bb      	strb	r3, [r7, #6]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b2:	f000 f85f 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b6:	f7ff fed1 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003ba:	f000 fa23 	bl	8000804 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80003be:	f000 f9b1 	bl	8000724 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003c2:	4825      	ldr	r0, [pc, #148]	; (8000458 <main+0xd4>)
 80003c4:	f001 fa6f 	bl	80018a6 <HAL_TIM_Base_Start_IT>

  swTimer_init(&idx_ch_array[0].swtimer);
 80003c8:	4824      	ldr	r0, [pc, #144]	; (800045c <main+0xd8>)
 80003ca:	f002 fa39 	bl	8002840 <swTimer_init>
  swTimer_init(&idx_ch_array[1].swtimer);
 80003ce:	4824      	ldr	r0, [pc, #144]	; (8000460 <main+0xdc>)
 80003d0:	f002 fa36 	bl	8002840 <swTimer_init>
  swTimer_init(&idx_ch_array[2].swtimer);
 80003d4:	4823      	ldr	r0, [pc, #140]	; (8000464 <main+0xe0>)
 80003d6:	f002 fa33 	bl	8002840 <swTimer_init>
  swTimer_init(&idx_ch_array[3].swtimer);
 80003da:	4823      	ldr	r0, [pc, #140]	; (8000468 <main+0xe4>)
 80003dc:	f002 fa30 	bl	8002840 <swTimer_init>
  
  swTimer.attach_callBack(&idx_ch_array[0].swtimer, idx_ch_array[0].sw_tmr_cb);
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <main+0xcc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a21      	ldr	r2, [pc, #132]	; (800046c <main+0xe8>)
 80003e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80003e8:	4611      	mov	r1, r2
 80003ea:	481c      	ldr	r0, [pc, #112]	; (800045c <main+0xd8>)
 80003ec:	4798      	blx	r3
  swTimer.attach_callBack(&idx_ch_array[1].swtimer, idx_ch_array[1].sw_tmr_cb);
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <main+0xcc>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a1e      	ldr	r2, [pc, #120]	; (800046c <main+0xe8>)
 80003f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80003f6:	4611      	mov	r1, r2
 80003f8:	4819      	ldr	r0, [pc, #100]	; (8000460 <main+0xdc>)
 80003fa:	4798      	blx	r3
  swTimer.attach_callBack(&idx_ch_array[2].swtimer, idx_ch_array[2].sw_tmr_cb);
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <main+0xcc>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <main+0xe8>)
 8000402:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8000406:	4611      	mov	r1, r2
 8000408:	4816      	ldr	r0, [pc, #88]	; (8000464 <main+0xe0>)
 800040a:	4798      	blx	r3
  swTimer.attach_callBack(&idx_ch_array[3].swtimer, idx_ch_array[3].sw_tmr_cb);
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <main+0xcc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a16      	ldr	r2, [pc, #88]	; (800046c <main+0xe8>)
 8000412:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8000416:	4611      	mov	r1, r2
 8000418:	4813      	ldr	r0, [pc, #76]	; (8000468 <main+0xe4>)
 800041a:	4798      	blx	r3
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        if( (HAL_GetTick() - tick_old) > CH_PULL_READ_PER){
 800041c:	f000 fac8 	bl	80009b0 <HAL_GetTick>
 8000420:	4602      	mov	r2, r0
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <main+0xec>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	1ad3      	subs	r3, r2, r3
 8000428:	2b01      	cmp	r3, #1
 800042a:	d9f7      	bls.n	800041c <main+0x98>
            uint8_t i = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	71fb      	strb	r3, [r7, #7]
            
            /* pull read channels limit switch */
            for(;i < nCh; ++i) {
 8000430:	e002      	b.n	8000438 <main+0xb4>
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	3301      	adds	r3, #1
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	79fa      	ldrb	r2, [r7, #7]
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	429a      	cmp	r2, r3
 800043e:	d3f8      	bcc.n	8000432 <main+0xae>

            }

            tick_old = HAL_GetTick();
 8000440:	f000 fab6 	bl	80009b0 <HAL_GetTick>
 8000444:	4602      	mov	r2, r0
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <main+0xec>)
 8000448:	601a      	str	r2, [r3, #0]
        if( (HAL_GetTick() - tick_old) > CH_PULL_READ_PER){
 800044a:	e7e7      	b.n	800041c <main+0x98>
 800044c:	2000012c 	.word	0x2000012c
 8000450:	08002aa4 	.word	0x08002aa4
 8000454:	08000269 	.word	0x08000269
 8000458:	2000015c 	.word	0x2000015c
 800045c:	20000038 	.word	0x20000038
 8000460:	20000074 	.word	0x20000074
 8000464:	200000b0 	.word	0x200000b0
 8000468:	200000ec 	.word	0x200000ec
 800046c:	20000014 	.word	0x20000014
 8000470:	20000154 	.word	0x20000154

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b090      	sub	sp, #64	; 0x40
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	2228      	movs	r2, #40	; 0x28
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f002 faa4 	bl	80029d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000496:	2302      	movs	r3, #2
 8000498:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049a:	2301      	movs	r3, #1
 800049c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049e:	2310      	movs	r3, #16
 80004a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	f107 0318 	add.w	r3, r7, #24
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fdae 	bl	800100c <HAL_RCC_OscConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004b6:	f000 f879 	bl	80005ac <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ba:	230f      	movs	r3, #15
 80004bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004be:	2300      	movs	r3, #0
 80004c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fffe 	bl	80014d4 <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004de:	f000 f865 	bl	80005ac <Error_Handler>
  }
}
 80004e2:	bf00      	nop
 80004e4:	3740      	adds	r7, #64	; 0x40
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <ch0_swTmr_cb>:
        swTimer.set(&ch->swtimer, ch->delayTm);
    }
}


void ch0_swTmr_cb(void){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
    struct _idx_ch_desc_t *ch = &idx_ch_array[0];
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <ch0_swTmr_cb+0x2c>)
 80004f4:	607b      	str	r3, [r7, #4]

    HAL_GPIO_WritePin(ch->gpio_io_out.port, ch->gpio_io_out.pin, GPIO_PIN_RESET);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6998      	ldr	r0, [r3, #24]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	8b9b      	ldrh	r3, [r3, #28]
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	f000 fd41 	bl	8000f88 <HAL_GPIO_WritePin>
    ch->stateMchine = IDLE;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000014 	.word	0x20000014

0800051c <ch1_swTmr_cb>:

void ch1_swTmr_cb(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
    struct _idx_ch_desc_t *ch = &idx_ch_array[1];
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <ch1_swTmr_cb+0x2c>)
 8000524:	607b      	str	r3, [r7, #4]

    HAL_GPIO_WritePin(ch->gpio_io_out.port, ch->gpio_io_out.pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6998      	ldr	r0, [r3, #24]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	8b9b      	ldrh	r3, [r3, #28]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f000 fd29 	bl	8000f88 <HAL_GPIO_WritePin>
    ch->stateMchine = IDLE;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000050 	.word	0x20000050

0800054c <ch2_swTmr_cb>:

void ch2_swTmr_cb(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
    struct _idx_ch_desc_t *ch = &idx_ch_array[2];
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <ch2_swTmr_cb+0x2c>)
 8000554:	607b      	str	r3, [r7, #4]

    HAL_GPIO_WritePin(ch->gpio_io_out.port, ch->gpio_io_out.pin, GPIO_PIN_RESET);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6998      	ldr	r0, [r3, #24]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	8b9b      	ldrh	r3, [r3, #28]
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	f000 fd11 	bl	8000f88 <HAL_GPIO_WritePin>
    ch->stateMchine = IDLE;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	2000008c 	.word	0x2000008c

0800057c <ch3_swTmr_cb>:

void ch3_swTmr_cb(void){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
    struct _idx_ch_desc_t *ch = &idx_ch_array[3];
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <ch3_swTmr_cb+0x2c>)
 8000584:	607b      	str	r3, [r7, #4]

    HAL_GPIO_WritePin(ch->gpio_io_out.port, ch->gpio_io_out.pin, GPIO_PIN_RESET);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6998      	ldr	r0, [r3, #24]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	8b9b      	ldrh	r3, [r3, #28]
 800058e:	2200      	movs	r2, #0
 8000590:	4619      	mov	r1, r3
 8000592:	f000 fcf9 	bl	8000f88 <HAL_GPIO_WritePin>
    ch->stateMchine = IDLE;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000c8 	.word	0x200000c8

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <HAL_MspInit+0x5c>)
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <HAL_MspInit+0x5c>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <HAL_MspInit+0x5c>)
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <HAL_MspInit+0x5c>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_MspInit+0x60>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_MspInit+0x60>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <HardFault_Handler+0x4>

0800062e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <MemManage_Handler+0x4>

08000634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <BusFault_Handler+0x4>

0800063a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <UsageFault_Handler+0x4>

08000640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000668:	f000 f990 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //swTimer_tick();

  /* USER CODE END SysTick_IRQn 1 */
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000674:	2040      	movs	r0, #64	; 0x40
 8000676:	f000 fcb1 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800067a:	2080      	movs	r0, #128	; 0x80
 800067c:	f000 fcae 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000680:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000684:	f000 fcaa 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000688:	f44f 7000 	mov.w	r0, #512	; 0x200
 800068c:	f000 fca6 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}

08000694 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <TIM2_IRQHandler+0x10>)
 800069a:	f001 f91e 	bl	80018da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000015c 	.word	0x2000015c

080006a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <USART1_IRQHandler+0x10>)
 80006ae:	f001 fd0d 	bl	80020cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000019c 	.word	0x2000019c

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80006c0:	4a15      	ldr	r2, [pc, #84]	; (8000718 <SystemInit+0x5c>)
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <SystemInit+0x5c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80006cc:	4912      	ldr	r1, [pc, #72]	; (8000718 <SystemInit+0x5c>)
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <SystemInit+0x5c>)
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <SystemInit+0x60>)
 80006d4:	4013      	ands	r3, r2
 80006d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006d8:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <SystemInit+0x5c>)
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <SystemInit+0x5c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006e8:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <SystemInit+0x5c>)
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <SystemInit+0x5c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006f4:	4a08      	ldr	r2, [pc, #32]	; (8000718 <SystemInit+0x5c>)
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <SystemInit+0x5c>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <SystemInit+0x5c>)
 8000702:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000706:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <SystemInit+0x64>)
 800070a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800070e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	40021000 	.word	0x40021000
 800071c:	f8ff0000 	.word	0xf8ff0000
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_TIM2_Init+0x94>)
 800074a:	2208      	movs	r2, #8
 800074c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_CNT;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000756:	2264      	movs	r2, #100	; 0x64
 8000758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_TIM2_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000766:	4814      	ldr	r0, [pc, #80]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000768:	f001 f872 	bl	8001850 <HAL_TIM_Base_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000772:	f7ff ff1b 	bl	80005ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000784:	f001 f9b1 	bl	8001aea <HAL_TIM_ConfigClockSource>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800078e:	f7ff ff0d 	bl	80005ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <MX_TIM2_Init+0x94>)
 80007a0:	f001 fbad 	bl	8001efe <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007aa:	f7ff feff 	bl	80005ac <Error_Handler>
  }

}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000015c 	.word	0x2000015c

080007bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007cc:	d113      	bne.n	80007f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <HAL_TIM_Base_MspInit+0x44>)
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_TIM_Base_MspInit+0x44>)
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_TIM_Base_MspInit+0x44>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	201c      	movs	r0, #28
 80007ec:	f000 f9bb 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007f0:	201c      	movs	r0, #28
 80007f2:	f000 f9d4 	bl	8000b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART1_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800083c:	f001 fbb5 	bl	8001faa <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f7ff feb1 	bl	80005ac <Error_Handler>
  }

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000019c 	.word	0x2000019c
 8000854:	40013800 	.word	0x40013800

08000858 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a20      	ldr	r2, [pc, #128]	; (80008f4 <HAL_UART_MspInit+0x9c>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d139      	bne.n	80008ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000878:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	480f      	ldr	r0, [pc, #60]	; (80008fc <HAL_UART_MspInit+0xa4>)
 80008be:	f000 fa05 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	4619      	mov	r1, r3
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <HAL_UART_MspInit+0xa4>)
 80008d8:	f000 f9f8 	bl	8000ccc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	2025      	movs	r0, #37	; 0x25
 80008e2:	f000 f940 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008e6:	2025      	movs	r0, #37	; 0x25
 80008e8:	f000 f959 	bl	8000b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40013800 	.word	0x40013800
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010800 	.word	0x40010800

08000900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_Init+0x28>)
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_Init+0x28>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f91d 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff fe4c 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f935 	bl	8000bba <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f8fd 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000104 	.word	0x20000104
 8000984:	2000010c 	.word	0x2000010c
 8000988:	20000108 	.word	0x20000108

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_IncTick+0x1c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_IncTick+0x20>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a03      	ldr	r2, [pc, #12]	; (80009ac <HAL_IncTick+0x20>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	2000010c 	.word	0x2000010c
 80009ac:	200001dc 	.word	0x200001dc

080009b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <HAL_GetTick+0x10>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	200001dc 	.word	0x200001dc

080009c4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <NVIC_EnableIRQ+0x2c>)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	095b      	lsrs	r3, r3, #5
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	f002 021f 	and.w	r2, r2, #31
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	da0b      	bge.n	8000a84 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <NVIC_SetPriority+0x4c>)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 030f 	and.w	r3, r3, #15
 8000a74:	3b04      	subs	r3, #4
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a82:	e009      	b.n	8000a98 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <NVIC_SetPriority+0x50>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	1e5a      	subs	r2, r3, #1
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	401a      	ands	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af2:	2101      	movs	r1, #1
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	1e59      	subs	r1, r3, #1
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff92 	bl	8000a58 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff33 	bl	80009c4 <NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff48 	bl	8000a0c <NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff92 	bl	8000aac <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff61 	bl	8000a58 <NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff3b 	bl	8000a28 <NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffa2 	bl	8000b0c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d005      	beq.n	8000bf6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2204      	movs	r2, #4
 8000bee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e057      	b.n	8000ca6 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	6812      	ldr	r2, [r2, #0]
 8000bfe:	6812      	ldr	r2, [r2, #0]
 8000c00:	f022 020e 	bic.w	r2, r2, #14
 8000c04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	6812      	ldr	r2, [r2, #0]
 8000c0e:	6812      	ldr	r2, [r2, #0]
 8000c10:	f022 0201 	bic.w	r2, r2, #1
 8000c14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c16:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <HAL_DMA_Abort_IT+0xdc>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <HAL_DMA_Abort_IT+0xe0>)
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d02e      	beq.n	8000c82 <HAL_DMA_Abort_IT+0xae>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <HAL_DMA_Abort_IT+0xe4>)
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d026      	beq.n	8000c7e <HAL_DMA_Abort_IT+0xaa>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <HAL_DMA_Abort_IT+0xe8>)
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d01d      	beq.n	8000c78 <HAL_DMA_Abort_IT+0xa4>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_DMA_Abort_IT+0xec>)
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d014      	beq.n	8000c72 <HAL_DMA_Abort_IT+0x9e>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_DMA_Abort_IT+0xf0>)
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d00b      	beq.n	8000c6c <HAL_DMA_Abort_IT+0x98>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_DMA_Abort_IT+0xf4>)
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d102      	bne.n	8000c66 <HAL_DMA_Abort_IT+0x92>
 8000c60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c64:	e00e      	b.n	8000c84 <HAL_DMA_Abort_IT+0xb0>
 8000c66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c6a:	e00b      	b.n	8000c84 <HAL_DMA_Abort_IT+0xb0>
 8000c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c70:	e008      	b.n	8000c84 <HAL_DMA_Abort_IT+0xb0>
 8000c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c76:	e005      	b.n	8000c84 <HAL_DMA_Abort_IT+0xb0>
 8000c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7c:	e002      	b.n	8000c84 <HAL_DMA_Abort_IT+0xb0>
 8000c7e:	2310      	movs	r3, #16
 8000c80:	e000      	b.n	8000c84 <HAL_DMA_Abort_IT+0xb0>
 8000c82:	2301      	movs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	4798      	blx	r3
    } 
  }
  return status;
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020008 	.word	0x40020008
 8000cb8:	4002001c 	.word	0x4002001c
 8000cbc:	40020030 	.word	0x40020030
 8000cc0:	40020044 	.word	0x40020044
 8000cc4:	40020058 	.word	0x40020058
 8000cc8:	4002006c 	.word	0x4002006c

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b08b      	sub	sp, #44	; 0x2c
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
 8000cee:	e127      	b.n	8000f40 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	f040 8116 	bne.w	8000f3a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b12      	cmp	r3, #18
 8000d14:	d034      	beq.n	8000d80 <HAL_GPIO_Init+0xb4>
 8000d16:	2b12      	cmp	r3, #18
 8000d18:	d80d      	bhi.n	8000d36 <HAL_GPIO_Init+0x6a>
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d02b      	beq.n	8000d76 <HAL_GPIO_Init+0xaa>
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d804      	bhi.n	8000d2c <HAL_GPIO_Init+0x60>
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d031      	beq.n	8000d8a <HAL_GPIO_Init+0xbe>
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d01c      	beq.n	8000d64 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d2a:	e048      	b.n	8000dbe <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d043      	beq.n	8000db8 <HAL_GPIO_Init+0xec>
 8000d30:	2b11      	cmp	r3, #17
 8000d32:	d01b      	beq.n	8000d6c <HAL_GPIO_Init+0xa0>
          break;
 8000d34:	e043      	b.n	8000dbe <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000d36:	4a87      	ldr	r2, [pc, #540]	; (8000f54 <HAL_GPIO_Init+0x288>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d026      	beq.n	8000d8a <HAL_GPIO_Init+0xbe>
 8000d3c:	4a85      	ldr	r2, [pc, #532]	; (8000f54 <HAL_GPIO_Init+0x288>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d806      	bhi.n	8000d50 <HAL_GPIO_Init+0x84>
 8000d42:	4a85      	ldr	r2, [pc, #532]	; (8000f58 <HAL_GPIO_Init+0x28c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d020      	beq.n	8000d8a <HAL_GPIO_Init+0xbe>
 8000d48:	4a84      	ldr	r2, [pc, #528]	; (8000f5c <HAL_GPIO_Init+0x290>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d01d      	beq.n	8000d8a <HAL_GPIO_Init+0xbe>
          break;
 8000d4e:	e036      	b.n	8000dbe <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000d50:	4a83      	ldr	r2, [pc, #524]	; (8000f60 <HAL_GPIO_Init+0x294>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d019      	beq.n	8000d8a <HAL_GPIO_Init+0xbe>
 8000d56:	4a83      	ldr	r2, [pc, #524]	; (8000f64 <HAL_GPIO_Init+0x298>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d016      	beq.n	8000d8a <HAL_GPIO_Init+0xbe>
 8000d5c:	4a82      	ldr	r2, [pc, #520]	; (8000f68 <HAL_GPIO_Init+0x29c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0xbe>
          break;
 8000d62:	e02c      	b.n	8000dbe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	623b      	str	r3, [r7, #32]
          break;
 8000d6a:	e028      	b.n	8000dbe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	3304      	adds	r3, #4
 8000d72:	623b      	str	r3, [r7, #32]
          break;
 8000d74:	e023      	b.n	8000dbe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	623b      	str	r3, [r7, #32]
          break;
 8000d7e:	e01e      	b.n	8000dbe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	330c      	adds	r3, #12
 8000d86:	623b      	str	r3, [r7, #32]
          break;
 8000d88:	e019      	b.n	8000dbe <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d92:	2304      	movs	r3, #4
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e012      	b.n	8000dbe <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d105      	bne.n	8000dac <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da0:	2308      	movs	r3, #8
 8000da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	611a      	str	r2, [r3, #16]
          break;
 8000daa:	e008      	b.n	8000dbe <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dac:	2308      	movs	r3, #8
 8000dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69fa      	ldr	r2, [r7, #28]
 8000db4:	615a      	str	r2, [r3, #20]
          break;
 8000db6:	e002      	b.n	8000dbe <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	2bff      	cmp	r3, #255	; 0xff
 8000dc2:	d801      	bhi.n	8000dc8 <HAL_GPIO_Init+0xfc>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	e001      	b.n	8000dcc <HAL_GPIO_Init+0x100>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3304      	adds	r3, #4
 8000dcc:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	2bff      	cmp	r3, #255	; 0xff
 8000dd2:	d802      	bhi.n	8000dda <HAL_GPIO_Init+0x10e>
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	e002      	b.n	8000de0 <HAL_GPIO_Init+0x114>
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	3b08      	subs	r3, #8
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	210f      	movs	r1, #15
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	401a      	ands	r2, r3
 8000df2:	6a39      	ldr	r1, [r7, #32]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 8096 	beq.w	8000f3a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0e:	4a57      	ldr	r2, [pc, #348]	; (8000f6c <HAL_GPIO_Init+0x2a0>)
 8000e10:	4b56      	ldr	r3, [pc, #344]	; (8000f6c <HAL_GPIO_Init+0x2a0>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b54      	ldr	r3, [pc, #336]	; (8000f6c <HAL_GPIO_Init+0x2a0>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000e26:	4a52      	ldr	r2, [pc, #328]	; (8000f70 <HAL_GPIO_Init+0x2a4>)
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e32:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	4013      	ands	r3, r2
 8000e48:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a49      	ldr	r2, [pc, #292]	; (8000f74 <HAL_GPIO_Init+0x2a8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_GPIO_Init+0x1ae>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_GPIO_Init+0x2ac>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d00d      	beq.n	8000e76 <HAL_GPIO_Init+0x1aa>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a47      	ldr	r2, [pc, #284]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d007      	beq.n	8000e72 <HAL_GPIO_Init+0x1a6>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a46      	ldr	r2, [pc, #280]	; (8000f80 <HAL_GPIO_Init+0x2b4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <HAL_GPIO_Init+0x1a2>
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x1b0>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	e004      	b.n	8000e7c <HAL_GPIO_Init+0x1b0>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e002      	b.n	8000e7c <HAL_GPIO_Init+0x1b0>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_Init+0x1b0>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7e:	f002 0203 	and.w	r2, r2, #3
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	4093      	lsls	r3, r2
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000e8c:	4938      	ldr	r1, [pc, #224]	; (8000f70 <HAL_GPIO_Init+0x2a4>)
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d006      	beq.n	8000eb4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ea6:	4937      	ldr	r1, [pc, #220]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	600b      	str	r3, [r1, #0]
 8000eb2:	e006      	b.n	8000ec2 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eb4:	4933      	ldr	r1, [pc, #204]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000eb6:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d006      	beq.n	8000edc <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ece:	492d      	ldr	r1, [pc, #180]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	604b      	str	r3, [r1, #4]
 8000eda:	e006      	b.n	8000eea <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000edc:	4929      	ldr	r1, [pc, #164]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000ede:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d006      	beq.n	8000f04 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ef6:	4923      	ldr	r1, [pc, #140]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	608b      	str	r3, [r1, #8]
 8000f02:	e006      	b.n	8000f12 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f04:	491f      	ldr	r1, [pc, #124]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4013      	ands	r3, r2
 8000f10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f1e:	4919      	ldr	r1, [pc, #100]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	60cb      	str	r3, [r1, #12]
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f2c:	4915      	ldr	r1, [pc, #84]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4013      	ands	r3, r2
 8000f38:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	f67f aed4 	bls.w	8000cf0 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000f48:	bf00      	nop
 8000f4a:	372c      	adds	r7, #44	; 0x2c
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	10210000 	.word	0x10210000
 8000f58:	10110000 	.word	0x10110000
 8000f5c:	10120000 	.word	0x10120000
 8000f60:	10310000 	.word	0x10310000
 8000f64:	10320000 	.word	0x10320000
 8000f68:	10220000 	.word	0x10220000
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010000 	.word	0x40010000
 8000f74:	40010800 	.word	0x40010800
 8000f78:	40010c00 	.word	0x40010c00
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	40011400 	.word	0x40011400
 8000f84:	40010400 	.word	0x40010400

08000f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f98:	787b      	ldrb	r3, [r7, #1]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fa4:	e003      	b.n	8000fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	041a      	lsls	r2, r3, #16
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	611a      	str	r2, [r3, #16]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	405a      	eors	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	60da      	str	r2, [r3, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
	...

08000fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe8:	695a      	ldr	r2, [r3, #20]
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff f95c 	bl	80002b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 8087 	beq.w	8001134 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001026:	4b92      	ldr	r3, [pc, #584]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b04      	cmp	r3, #4
 8001030:	d00c      	beq.n	800104c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001032:	4b8f      	ldr	r3, [pc, #572]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b08      	cmp	r3, #8
 800103c:	d112      	bne.n	8001064 <HAL_RCC_OscConfig+0x58>
 800103e:	4b8c      	ldr	r3, [pc, #560]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104a:	d10b      	bne.n	8001064 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	4b88      	ldr	r3, [pc, #544]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d06c      	beq.n	8001132 <HAL_RCC_OscConfig+0x126>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d168      	bne.n	8001132 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e22d      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d106      	bne.n	800107c <HAL_RCC_OscConfig+0x70>
 800106e:	4a80      	ldr	r2, [pc, #512]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001070:	4b7f      	ldr	r3, [pc, #508]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e02e      	b.n	80010da <HAL_RCC_OscConfig+0xce>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10c      	bne.n	800109e <HAL_RCC_OscConfig+0x92>
 8001084:	4a7a      	ldr	r2, [pc, #488]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001086:	4b7a      	ldr	r3, [pc, #488]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4a77      	ldr	r2, [pc, #476]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001092:	4b77      	ldr	r3, [pc, #476]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e01d      	b.n	80010da <HAL_RCC_OscConfig+0xce>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a6:	d10c      	bne.n	80010c2 <HAL_RCC_OscConfig+0xb6>
 80010a8:	4a71      	ldr	r2, [pc, #452]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010aa:	4b71      	ldr	r3, [pc, #452]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4a6e      	ldr	r2, [pc, #440]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010b6:	4b6e      	ldr	r3, [pc, #440]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e00b      	b.n	80010da <HAL_RCC_OscConfig+0xce>
 80010c2:	4a6b      	ldr	r2, [pc, #428]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010c4:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4a68      	ldr	r2, [pc, #416]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010d0:	4b67      	ldr	r3, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d013      	beq.n	800110a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fc65 	bl	80009b0 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ea:	f7ff fc61 	bl	80009b0 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b64      	cmp	r3, #100	; 0x64
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e1e1      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fc:	4b5c      	ldr	r3, [pc, #368]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0xde>
 8001108:	e014      	b.n	8001134 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fc51 	bl	80009b0 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001112:	f7ff fc4d 	bl	80009b0 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b64      	cmp	r3, #100	; 0x64
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1cd      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001124:	4b52      	ldr	r3, [pc, #328]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f0      	bne.n	8001112 <HAL_RCC_OscConfig+0x106>
 8001130:	e000      	b.n	8001134 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001132:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d063      	beq.n	8001208 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001140:	4b4b      	ldr	r3, [pc, #300]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00b      	beq.n	8001164 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800114c:	4b48      	ldr	r3, [pc, #288]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b08      	cmp	r3, #8
 8001156:	d11c      	bne.n	8001192 <HAL_RCC_OscConfig+0x186>
 8001158:	4b45      	ldr	r3, [pc, #276]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d116      	bne.n	8001192 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001164:	4b42      	ldr	r3, [pc, #264]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_OscConfig+0x170>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d001      	beq.n	800117c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e1a1      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117c:	493c      	ldr	r1, [pc, #240]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800117e:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4313      	orrs	r3, r2
 800118e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001190:	e03a      	b.n	8001208 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d020      	beq.n	80011dc <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119a:	4b36      	ldr	r3, [pc, #216]	; (8001274 <HAL_RCC_OscConfig+0x268>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fc06 	bl	80009b0 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a8:	f7ff fc02 	bl	80009b0 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e182      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	492a      	ldr	r1, [pc, #168]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
 80011da:	e015      	b.n	8001208 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <HAL_RCC_OscConfig+0x268>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff fbe5 	bl	80009b0 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ea:	f7ff fbe1 	bl	80009b0 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e161      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f0      	bne.n	80011ea <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b00      	cmp	r3, #0
 8001212:	d039      	beq.n	8001288 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d019      	beq.n	8001250 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001222:	f7ff fbc5 	bl	80009b0 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800122a:	f7ff fbc1 	bl	80009b0 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e141      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f000 fae3 	bl	8001814 <RCC_Delay>
 800124e:	e01b      	b.n	8001288 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001256:	f7ff fbab 	bl	80009b0 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125c:	e00e      	b.n	800127c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff fba7 	bl	80009b0 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d907      	bls.n	800127c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e127      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
 8001270:	40021000 	.word	0x40021000
 8001274:	42420000 	.word	0x42420000
 8001278:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	4b92      	ldr	r3, [pc, #584]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1ea      	bne.n	800125e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80a6 	beq.w	80013e2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129a:	4b8b      	ldr	r3, [pc, #556]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10d      	bne.n	80012c2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4a88      	ldr	r2, [pc, #544]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 80012a8:	4b87      	ldr	r3, [pc, #540]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012be:	2301      	movs	r3, #1
 80012c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	4b82      	ldr	r3, [pc, #520]	; (80014cc <HAL_RCC_OscConfig+0x4c0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d118      	bne.n	8001300 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ce:	4a7f      	ldr	r2, [pc, #508]	; (80014cc <HAL_RCC_OscConfig+0x4c0>)
 80012d0:	4b7e      	ldr	r3, [pc, #504]	; (80014cc <HAL_RCC_OscConfig+0x4c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012da:	f7ff fb69 	bl	80009b0 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e2:	f7ff fb65 	bl	80009b0 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b64      	cmp	r3, #100	; 0x64
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0e5      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	4b75      	ldr	r3, [pc, #468]	; (80014cc <HAL_RCC_OscConfig+0x4c0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x30a>
 8001308:	4a6f      	ldr	r2, [pc, #444]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800130a:	4b6f      	ldr	r3, [pc, #444]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6213      	str	r3, [r2, #32]
 8001314:	e02d      	b.n	8001372 <HAL_RCC_OscConfig+0x366>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x32c>
 800131e:	4a6a      	ldr	r2, [pc, #424]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 8001320:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	4a67      	ldr	r2, [pc, #412]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800132c:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	6213      	str	r3, [r2, #32]
 8001336:	e01c      	b.n	8001372 <HAL_RCC_OscConfig+0x366>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b05      	cmp	r3, #5
 800133e:	d10c      	bne.n	800135a <HAL_RCC_OscConfig+0x34e>
 8001340:	4a61      	ldr	r2, [pc, #388]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 8001342:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6213      	str	r3, [r2, #32]
 800134c:	4a5e      	ldr	r2, [pc, #376]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800134e:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6213      	str	r3, [r2, #32]
 8001358:	e00b      	b.n	8001372 <HAL_RCC_OscConfig+0x366>
 800135a:	4a5b      	ldr	r2, [pc, #364]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800135c:	4b5a      	ldr	r3, [pc, #360]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	6213      	str	r3, [r2, #32]
 8001366:	4a58      	ldr	r2, [pc, #352]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 8001368:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	f023 0304 	bic.w	r3, r3, #4
 8001370:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d015      	beq.n	80013a6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fb19 	bl	80009b0 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001380:	e00a      	b.n	8001398 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff fb15 	bl	80009b0 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001390:	4293      	cmp	r3, r2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e093      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001398:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0ee      	beq.n	8001382 <HAL_RCC_OscConfig+0x376>
 80013a4:	e014      	b.n	80013d0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fb03 	bl	80009b0 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ac:	e00a      	b.n	80013c4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ae:	f7ff faff 	bl	80009b0 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013bc:	4293      	cmp	r3, r2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e07d      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c4:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1ee      	bne.n	80013ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d105      	bne.n	80013e2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d6:	4a3c      	ldr	r2, [pc, #240]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 80013d8:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d069      	beq.n	80014be <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ea:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d061      	beq.n	80014ba <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d146      	bne.n	800148c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_RCC_OscConfig+0x4c4>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fad4 	bl	80009b0 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fad0 	bl	80009b0 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e050      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001432:	d108      	bne.n	8001446 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001434:	4924      	ldr	r1, [pc, #144]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001446:	4820      	ldr	r0, [pc, #128]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a19      	ldr	r1, [r3, #32]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	430b      	orrs	r3, r1
 800145a:	4313      	orrs	r3, r2
 800145c:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_RCC_OscConfig+0x4c4>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff faa4 	bl	80009b0 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff faa0 	bl	80009b0 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e020      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x460>
 800148a:	e018      	b.n	80014be <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_RCC_OscConfig+0x4c4>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fa8d 	bl	80009b0 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149a:	f7ff fa89 	bl	80009b0 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e009      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_RCC_OscConfig+0x4bc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x48e>
 80014b8:	e001      	b.n	80014be <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40007000 	.word	0x40007000
 80014d0:	42420060 	.word	0x42420060

080014d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014e2:	4b7e      	ldr	r3, [pc, #504]	; (80016dc <HAL_RCC_ClockConfig+0x208>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0207 	and.w	r2, r3, #7
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d210      	bcs.n	8001512 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f0:	497a      	ldr	r1, [pc, #488]	; (80016dc <HAL_RCC_ClockConfig+0x208>)
 80014f2:	4b7a      	ldr	r3, [pc, #488]	; (80016dc <HAL_RCC_ClockConfig+0x208>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 0207 	bic.w	r2, r3, #7
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001500:	4b76      	ldr	r3, [pc, #472]	; (80016dc <HAL_RCC_ClockConfig+0x208>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0207 	and.w	r2, r3, #7
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d001      	beq.n	8001512 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0e0      	b.n	80016d4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d020      	beq.n	8001560 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800152a:	4a6d      	ldr	r2, [pc, #436]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 800152c:	4b6c      	ldr	r3, [pc, #432]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001534:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001542:	4a67      	ldr	r2, [pc, #412]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 8001544:	4b66      	ldr	r3, [pc, #408]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800154c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154e:	4964      	ldr	r1, [pc, #400]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 8001550:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d06a      	beq.n	8001642 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d107      	bne.n	8001584 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001574:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d115      	bne.n	80015ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0a7      	b.n	80016d4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d107      	bne.n	800159c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158c:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e09b      	b.n	80016d4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e093      	b.n	80016d4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ac:	494c      	ldr	r1, [pc, #304]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 80015ae:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f023 0203 	bic.w	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015be:	f7ff f9f7 	bl	80009b0 <HAL_GetTick>
 80015c2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d112      	bne.n	80015f2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ce:	f7ff f9ef 	bl	80009b0 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e077      	b.n	80016d4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e4:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d1ee      	bne.n	80015ce <HAL_RCC_ClockConfig+0xfa>
 80015f0:	e027      	b.n	8001642 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d11d      	bne.n	8001636 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f7ff f9d8 	bl	80009b0 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e060      	b.n	80016d4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001612:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b08      	cmp	r3, #8
 800161c:	d1ee      	bne.n	80015fc <HAL_RCC_ClockConfig+0x128>
 800161e:	e010      	b.n	8001642 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff f9c6 	bl	80009b0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e04e      	b.n	80016d4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ee      	bne.n	8001620 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_RCC_ClockConfig+0x208>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0207 	and.w	r2, r3, #7
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d910      	bls.n	8001672 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001650:	4922      	ldr	r1, [pc, #136]	; (80016dc <HAL_RCC_ClockConfig+0x208>)
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <HAL_RCC_ClockConfig+0x208>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 0207 	bic.w	r2, r3, #7
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_RCC_ClockConfig+0x208>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0207 	and.w	r2, r3, #7
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d001      	beq.n	8001672 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e030      	b.n	80016d4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	d008      	beq.n	8001690 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167e:	4918      	ldr	r1, [pc, #96]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d009      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800169c:	4910      	ldr	r1, [pc, #64]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016b0:	f000 f81c 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 80016b4:	4601      	mov	r1, r0
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_RCC_ClockConfig+0x20c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_RCC_ClockConfig+0x210>)
 80016c2:	5cd3      	ldrb	r3, [r2, r3]
 80016c4:	fa21 f303 	lsr.w	r3, r1, r3
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_RCC_ClockConfig+0x214>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff f92d 	bl	800092c <HAL_InitTick>
  
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40022000 	.word	0x40022000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	08002a8c 	.word	0x08002a8c
 80016e8:	20000104 	.word	0x20000104

080016ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ec:	b490      	push	{r4, r7}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_RCC_GetSysClockFreq+0xb0>)
 80016f4:	1d3c      	adds	r4, r7, #4
 80016f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b04      	cmp	r3, #4
 8001724:	d002      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x40>
 8001726:	2b08      	cmp	r3, #8
 8001728:	d003      	beq.n	8001732 <HAL_RCC_GetSysClockFreq+0x46>
 800172a:	e02d      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800172e:	623b      	str	r3, [r7, #32]
      break;
 8001730:	e02d      	b.n	800178e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	0c9b      	lsrs	r3, r3, #18
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800173e:	4413      	add	r3, r2
 8001740:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001744:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	0c5b      	lsrs	r3, r3, #17
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800175e:	4413      	add	r3, r2
 8001760:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001764:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800176a:	fb02 f203 	mul.w	r2, r2, r3
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	fbb2 f3f3 	udiv	r3, r2, r3
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
 8001776:	e004      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800177c:	fb02 f303 	mul.w	r3, r2, r3
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	623b      	str	r3, [r7, #32]
      break;
 8001786:	e002      	b.n	800178e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800178a:	623b      	str	r3, [r7, #32]
      break;
 800178c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800178e:	6a3b      	ldr	r3, [r7, #32]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bc90      	pop	{r4, r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	08002a44 	.word	0x08002a44
 80017a0:	08002a54 	.word	0x08002a54
 80017a4:	40021000 	.word	0x40021000
 80017a8:	007a1200 	.word	0x007a1200
 80017ac:	003d0900 	.word	0x003d0900

080017b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	20000104 	.word	0x20000104

080017c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017c8:	f7ff fff2 	bl	80017b0 <HAL_RCC_GetHCLKFreq>
 80017cc:	4601      	mov	r1, r0
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	08002a9c 	.word	0x08002a9c

080017ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_RCC_GetHCLKFreq>
 80017f4:	4601      	mov	r1, r0
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	0adb      	lsrs	r3, r3, #11
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	4a03      	ldr	r2, [pc, #12]	; (8001810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001808:	4618      	mov	r0, r3
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000
 8001810:	08002a9c 	.word	0x08002a9c

08001814 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <RCC_Delay+0x34>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <RCC_Delay+0x38>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	0a5b      	lsrs	r3, r3, #9
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001830:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	60fa      	str	r2, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f9      	bne.n	8001830 <RCC_Delay+0x1c>
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000104 	.word	0x20000104
 800184c:	10624dd3 	.word	0x10624dd3

08001850 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e01d      	b.n	800189e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7fe ffa0 	bl	80007bc <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3304      	adds	r3, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4610      	mov	r0, r2
 8001890:	f000 fa2a 	bl	8001ce8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	68d2      	ldr	r2, [r2, #12]
 80018b8:	f042 0201 	orr.w	r2, r2, #1
 80018bc:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	f042 0201 	orr.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d122      	bne.n	8001936 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d11b      	bne.n	8001936 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f06f 0202 	mvn.w	r2, #2
 8001906:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f9c8 	bl	8001cb2 <HAL_TIM_IC_CaptureCallback>
 8001922:	e005      	b.n	8001930 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f9bb 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f9ca 	bl	8001cc4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b04      	cmp	r3, #4
 8001942:	d122      	bne.n	800198a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b04      	cmp	r3, #4
 8001950:	d11b      	bne.n	800198a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f06f 0204 	mvn.w	r2, #4
 800195a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f99e 	bl	8001cb2 <HAL_TIM_IC_CaptureCallback>
 8001976:	e005      	b.n	8001984 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f991 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f9a0 	bl	8001cc4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b08      	cmp	r3, #8
 8001996:	d122      	bne.n	80019de <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d11b      	bne.n	80019de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f06f 0208 	mvn.w	r2, #8
 80019ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2204      	movs	r2, #4
 80019b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f974 	bl	8001cb2 <HAL_TIM_IC_CaptureCallback>
 80019ca:	e005      	b.n	80019d8 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f967 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f976 	bl	8001cc4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d122      	bne.n	8001a32 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	2b10      	cmp	r3, #16
 80019f8:	d11b      	bne.n	8001a32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f06f 0210 	mvn.w	r2, #16
 8001a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2208      	movs	r2, #8
 8001a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f94a 	bl	8001cb2 <HAL_TIM_IC_CaptureCallback>
 8001a1e:	e005      	b.n	8001a2c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f93d 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f94c 	bl	8001cc4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d10e      	bne.n	8001a5e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f06f 0201 	mvn.w	r2, #1
 8001a56:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7fe fc23 	bl	80002a4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a68:	2b80      	cmp	r3, #128	; 0x80
 8001a6a:	d10e      	bne.n	8001a8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a76:	2b80      	cmp	r3, #128	; 0x80
 8001a78:	d107      	bne.n	8001a8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a82:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fa87 	bl	8001f98 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a94:	2b40      	cmp	r3, #64	; 0x40
 8001a96:	d10e      	bne.n	8001ab6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa2:	2b40      	cmp	r3, #64	; 0x40
 8001aa4:	d107      	bne.n	8001ab6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001aae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f910 	bl	8001cd6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d10e      	bne.n	8001ae2 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d107      	bne.n	8001ae2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0220 	mvn.w	r2, #32
 8001ada:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fa52 	bl	8001f86 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_TIM_ConfigClockSource+0x1c>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e0c8      	b.n	8001c98 <HAL_TIM_ConfigClockSource+0x1ae>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2202      	movs	r2, #2
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b24:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b2c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b40      	cmp	r3, #64	; 0x40
 8001b3c:	d077      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0x144>
 8001b3e:	2b40      	cmp	r3, #64	; 0x40
 8001b40:	d80e      	bhi.n	8001b60 <HAL_TIM_ConfigClockSource+0x76>
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	f000 808a 	beq.w	8001c5c <HAL_TIM_ConfigClockSource+0x172>
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	d802      	bhi.n	8001b52 <HAL_TIM_ConfigClockSource+0x68>
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d07e      	beq.n	8001c4e <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001b50:	e099      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	f000 8089 	beq.w	8001c6a <HAL_TIM_ConfigClockSource+0x180>
 8001b58:	2b30      	cmp	r3, #48	; 0x30
 8001b5a:	f000 808d 	beq.w	8001c78 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8001b5e:	e092      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001b60:	2b70      	cmp	r3, #112	; 0x70
 8001b62:	d016      	beq.n	8001b92 <HAL_TIM_ConfigClockSource+0xa8>
 8001b64:	2b70      	cmp	r3, #112	; 0x70
 8001b66:	d804      	bhi.n	8001b72 <HAL_TIM_ConfigClockSource+0x88>
 8001b68:	2b50      	cmp	r3, #80	; 0x50
 8001b6a:	d040      	beq.n	8001bee <HAL_TIM_ConfigClockSource+0x104>
 8001b6c:	2b60      	cmp	r3, #96	; 0x60
 8001b6e:	d04e      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0x124>
    break;
 8001b70:	e089      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b76:	d003      	beq.n	8001b80 <HAL_TIM_ConfigClockSource+0x96>
 8001b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b7c:	d024      	beq.n	8001bc8 <HAL_TIM_ConfigClockSource+0xde>
    break;
 8001b7e:	e082      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	6892      	ldr	r2, [r2, #8]
 8001b8a:	f022 0207 	bic.w	r2, r2, #7
 8001b8e:	609a      	str	r2, [r3, #8]
    break;
 8001b90:	e079      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6899      	ldr	r1, [r3, #8]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f000 f98b 	bl	8001ebc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001bb4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001bbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	609a      	str	r2, [r3, #8]
    break;
 8001bc6:	e05e      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6899      	ldr	r1, [r3, #8]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f000 f970 	bl	8001ebc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	6892      	ldr	r2, [r2, #8]
 8001be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bea:	609a      	str	r2, [r3, #8]
    break;
 8001bec:	e04b      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6859      	ldr	r1, [r3, #4]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f000 f8da 	bl	8001db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2150      	movs	r1, #80	; 0x50
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f939 	bl	8001e7e <TIM_ITRx_SetConfig>
    break;
 8001c0c:	e03b      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f000 f8fc 	bl	8001e18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2160      	movs	r1, #96	; 0x60
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f929 	bl	8001e7e <TIM_ITRx_SetConfig>
    break;
 8001c2c:	e02b      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f000 f8ba 	bl	8001db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2140      	movs	r1, #64	; 0x40
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f919 	bl	8001e7e <TIM_ITRx_SetConfig>
    break;
 8001c4c:	e01b      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f912 	bl	8001e7e <TIM_ITRx_SetConfig>
    break;
 8001c5a:	e014      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2110      	movs	r1, #16
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f90b 	bl	8001e7e <TIM_ITRx_SetConfig>
    break;
 8001c68:	e00d      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2120      	movs	r1, #32
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f904 	bl	8001e7e <TIM_ITRx_SetConfig>
    break;
 8001c76:	e006      	b.n	8001c86 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2130      	movs	r1, #48	; 0x30
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f8fd 	bl	8001e7e <TIM_ITRx_SetConfig>
    break;
 8001c84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <TIM_Base_SetConfig+0xc0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00b      	beq.n	8001d1c <TIM_Base_SetConfig+0x34>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0a:	d007      	beq.n	8001d1c <TIM_Base_SetConfig+0x34>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a27      	ldr	r2, [pc, #156]	; (8001dac <TIM_Base_SetConfig+0xc4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d003      	beq.n	8001d1c <TIM_Base_SetConfig+0x34>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <TIM_Base_SetConfig+0xc8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d108      	bne.n	8001d2e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <TIM_Base_SetConfig+0xc0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00b      	beq.n	8001d4e <TIM_Base_SetConfig+0x66>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3c:	d007      	beq.n	8001d4e <TIM_Base_SetConfig+0x66>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <TIM_Base_SetConfig+0xc4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d003      	beq.n	8001d4e <TIM_Base_SetConfig+0x66>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <TIM_Base_SetConfig+0xc8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d108      	bne.n	8001d60 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d66:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <TIM_Base_SetConfig+0xc0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d103      	bne.n	8001d98 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	615a      	str	r2, [r3, #20]
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	40012c00 	.word	0x40012c00
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40000800 	.word	0x40000800

08001db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	f023 0201 	bic.w	r2, r3, #1
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	f023 030a 	bic.w	r3, r3, #10
 8001df8:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	621a      	str	r2, [r3, #32]
}
 8001e0e:	bf00      	nop
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f023 0210 	bic.w	r2, r3, #16
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	031b      	lsls	r3, r3, #12
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	621a      	str	r2, [r3, #32]
}
 8001e74:	bf00      	nop
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	f043 0307 	orr.w	r3, r3, #7
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	609a      	str	r2, [r3, #8]
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	021a      	lsls	r2, r3, #8
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e032      	b.n	8001f7c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2202      	movs	r2, #2
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	6852      	ldr	r2, [r2, #4]
 8001f30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f34:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	6851      	ldr	r1, [r2, #4]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	6892      	ldr	r2, [r2, #8]
 8001f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f56:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	6891      	ldr	r1, [r2, #8]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	6852      	ldr	r2, [r2, #4]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e03f      	b.n	800203c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d106      	bne.n	8001fd6 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7fe fc41 	bl	8000858 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2224      	movs	r2, #36	; 0x24
 8001fda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	68d2      	ldr	r2, [r2, #12]
 8001fe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fec:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 faa2 	bl	8002538 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	6912      	ldr	r2, [r2, #16]
 8001ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002002:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	6952      	ldr	r2, [r2, #20]
 800200e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002012:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	68d2      	ldr	r2, [r2, #12]
 800201e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002022:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b20      	cmp	r3, #32
 800205c:	d130      	bne.n	80020c0 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL) || (Size == 0U)) 
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_UART_Transmit_IT+0x26>
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e029      	b.n	80020c2 <HAL_UART_Transmit_IT+0x7e>
    }
    /* Process Locked */
    __HAL_LOCK(huart);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_UART_Transmit_IT+0x38>
 8002078:	2302      	movs	r3, #2
 800207a:	e022      	b.n	80020c2 <HAL_UART_Transmit_IT+0x7e>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	88fa      	ldrh	r2, [r7, #6]
 800208e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	88fa      	ldrh	r2, [r7, #6]
 8002094:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2221      	movs	r2, #33	; 0x21
 80020a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	68d2      	ldr	r2, [r2, #12]
 80020b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ba:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	e000      	b.n	80020c2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80020c0:	2302      	movs	r3, #2
  }
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_UART_IRQHandler+0x52>
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f98c 	bl	8002434 <UART_Receive_IT>
      return;
 800211c:	e0cc      	b.n	80022b8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80ab 	beq.w	800227c <HAL_UART_IRQHandler+0x1b0>
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <HAL_UART_IRQHandler+0x70>
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80a0 	beq.w	800227c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_UART_IRQHandler+0x90>
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_UART_IRQHandler+0xb0>
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002174:	f043 0202 	orr.w	r2, r3, #2
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_UART_IRQHandler+0xd0>
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	f043 0204 	orr.w	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_UART_IRQHandler+0xf0>
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	f043 0208 	orr.w	r2, r3, #8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d078      	beq.n	80022b6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_UART_IRQHandler+0x112>
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f92b 	bl	8002434 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf14      	ite	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	2300      	moveq	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <HAL_UART_IRQHandler+0x13a>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d031      	beq.n	800226a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f877 	bl	80022fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d023      	beq.n	8002262 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	6952      	ldr	r2, [r2, #20]
 8002224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002228:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	2b00      	cmp	r3, #0
 8002230:	d013      	beq.n	800225a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <HAL_UART_IRQHandler+0x1f4>)
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fcc8 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d016      	beq.n	8002278 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002254:	4610      	mov	r0, r2
 8002256:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002258:	e00e      	b.n	8002278 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f844 	bl	80022e8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002260:	e00a      	b.n	8002278 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f840 	bl	80022e8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002268:	e006      	b.n	8002278 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f83c 	bl	80022e8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002276:	e01e      	b.n	80022b6 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002278:	bf00      	nop
    return;
 800227a:	e01c      	b.n	80022b6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	2b00      	cmp	r3, #0
 8002284:	d008      	beq.n	8002298 <HAL_UART_IRQHandler+0x1cc>
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f863 	bl	800235c <UART_Transmit_IT>
    return;
 8002296:	e00f      	b.n	80022b8 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_UART_IRQHandler+0x1ec>
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f8a9 	bl	8002404 <UART_EndTransmit_IT>
    return;
 80022b2:	bf00      	nop
 80022b4:	e000      	b.n	80022b8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80022b6:	bf00      	nop
  }
}
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	08002335 	.word	0x08002335

080022c4 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	68d2      	ldr	r2, [r2, #12]
 800230c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002310:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	6952      	ldr	r2, [r2, #20]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff ffca 	bl	80022e8 <HAL_UART_ErrorCallback>
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b21      	cmp	r3, #33	; 0x21
 800236e:	d143      	bne.n	80023f8 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002378:	d119      	bne.n	80023ae <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	8812      	ldrh	r2, [r2, #0]
 8002388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800238c:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	1c9a      	adds	r2, r3, #2
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	621a      	str	r2, [r3, #32]
 80023a0:	e00e      	b.n	80023c0 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	621a      	str	r2, [r3, #32]
 80023ac:	e008      	b.n	80023c0 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	1c58      	adds	r0, r3, #1
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	6208      	str	r0, [r1, #32]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4619      	mov	r1, r3
 80023ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10f      	bne.n	80023f4 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	68d2      	ldr	r2, [r2, #12]
 80023de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	68d2      	ldr	r2, [r2, #12]
 80023ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e000      	b.n	80023fa <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	68d2      	ldr	r2, [r2, #12]
 8002416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241a:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff4d 	bl	80022c4 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b22      	cmp	r3, #34	; 0x22
 8002446:	d171      	bne.n	800252c <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002450:	d123      	bne.n	800249a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10e      	bne.n	800247e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	1c9a      	adds	r2, r3, #2
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
 800247c:	e029      	b.n	80024d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	b29b      	uxth	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
 8002498:	e01b      	b.n	80024d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	1c59      	adds	r1, r3, #1
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6291      	str	r1, [r2, #40]	; 0x28
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	6852      	ldr	r2, [r2, #4]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e00c      	b.n	80024d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	1c59      	adds	r1, r3, #1
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6291      	str	r1, [r2, #40]	; 0x28
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	6852      	ldr	r2, [r2, #4]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29b      	uxth	r3, r3
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4619      	mov	r1, r3
 80024e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d120      	bne.n	8002528 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	68d2      	ldr	r2, [r2, #12]
 80024f0:	f022 0220 	bic.w	r2, r2, #32
 80024f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	68d2      	ldr	r2, [r2, #12]
 8002500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002504:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	6952      	ldr	r2, [r2, #20]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fed9 	bl	80022d6 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	e002      	b.n	800252e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	6912      	ldr	r2, [r2, #16]
 800254e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68d2      	ldr	r2, [r2, #12]
 8002556:	430a      	orrs	r2, r1
 8002558:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800257e:	f023 030c 	bic.w	r3, r3, #12
 8002582:	68f9      	ldr	r1, [r7, #12]
 8002584:	430b      	orrs	r3, r1
 8002586:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	6952      	ldr	r2, [r2, #20]
 8002592:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6992      	ldr	r2, [r2, #24]
 800259a:	430a      	orrs	r2, r1
 800259c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6f      	ldr	r2, [pc, #444]	; (8002760 <UART_SetConfig+0x228>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d16b      	bne.n	8002680 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681c      	ldr	r4, [r3, #0]
 80025ac:	f7ff f91e 	bl	80017ec <HAL_RCC_GetPCLK2Freq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	009a      	lsls	r2, r3, #2
 80025ba:	441a      	add	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	4a67      	ldr	r2, [pc, #412]	; (8002764 <UART_SetConfig+0x22c>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	011d      	lsls	r5, r3, #4
 80025d0:	f7ff f90c 	bl	80017ec <HAL_RCC_GetPCLK2Freq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	009a      	lsls	r2, r3, #2
 80025de:	441a      	add	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80025ea:	f7ff f8ff 	bl	80017ec <HAL_RCC_GetPCLK2Freq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	009a      	lsls	r2, r3, #2
 80025f8:	441a      	add	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	4a57      	ldr	r2, [pc, #348]	; (8002764 <UART_SetConfig+0x22c>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2264      	movs	r2, #100	; 0x64
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	1af3      	subs	r3, r6, r3
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	3332      	adds	r3, #50	; 0x32
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <UART_SetConfig+0x22c>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002624:	441d      	add	r5, r3
 8002626:	f7ff f8e1 	bl	80017ec <HAL_RCC_GetPCLK2Freq>
 800262a:	4602      	mov	r2, r0
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009a      	lsls	r2, r3, #2
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002640:	f7ff f8d4 	bl	80017ec <HAL_RCC_GetPCLK2Freq>
 8002644:	4602      	mov	r2, r0
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	009a      	lsls	r2, r3, #2
 800264e:	441a      	add	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	4a42      	ldr	r2, [pc, #264]	; (8002764 <UART_SetConfig+0x22c>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	2264      	movs	r2, #100	; 0x64
 8002664:	fb02 f303 	mul.w	r3, r2, r3
 8002668:	1af3      	subs	r3, r6, r3
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	3332      	adds	r3, #50	; 0x32
 800266e:	4a3d      	ldr	r2, [pc, #244]	; (8002764 <UART_SetConfig+0x22c>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	442b      	add	r3, r5
 800267c:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800267e:	e06a      	b.n	8002756 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681c      	ldr	r4, [r3, #0]
 8002684:	f7ff f89e 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 8002688:	4602      	mov	r2, r0
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	009a      	lsls	r2, r3, #2
 8002692:	441a      	add	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	4a31      	ldr	r2, [pc, #196]	; (8002764 <UART_SetConfig+0x22c>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	011d      	lsls	r5, r3, #4
 80026a8:	f7ff f88c 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	009a      	lsls	r2, r3, #2
 80026b6:	441a      	add	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	fbb2 f6f3 	udiv	r6, r2, r3
 80026c2:	f7ff f87f 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 80026c6:	4602      	mov	r2, r0
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	009a      	lsls	r2, r3, #2
 80026d0:	441a      	add	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	4a21      	ldr	r2, [pc, #132]	; (8002764 <UART_SetConfig+0x22c>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2264      	movs	r2, #100	; 0x64
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	1af3      	subs	r3, r6, r3
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	3332      	adds	r3, #50	; 0x32
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <UART_SetConfig+0x22c>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026fc:	441d      	add	r5, r3
 80026fe:	f7ff f861 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 8002702:	4602      	mov	r2, r0
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	009a      	lsls	r2, r3, #2
 800270c:	441a      	add	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	fbb2 f6f3 	udiv	r6, r2, r3
 8002718:	f7ff f854 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 800271c:	4602      	mov	r2, r0
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	009a      	lsls	r2, r3, #2
 8002726:	441a      	add	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <UART_SetConfig+0x22c>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	2264      	movs	r2, #100	; 0x64
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	1af3      	subs	r3, r6, r3
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	3332      	adds	r3, #50	; 0x32
 8002746:	4a07      	ldr	r2, [pc, #28]	; (8002764 <UART_SetConfig+0x22c>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	442b      	add	r3, r5
 8002754:	60a3      	str	r3, [r4, #8]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800275e:	bf00      	nop
 8002760:	40013800 	.word	0x40013800
 8002764:	51eb851f 	.word	0x51eb851f

08002768 <assert_failed>:
    }

#else
    // empty function !
    void assert_failed(uint8_t * file, uint32_t line) 
    {
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
        (void)file;
        (void)line;
    }
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <sw_tm_getNewSlot>:
sw_timer_t *pSw_timers[SW_TM_INST_MAX]; 

/* track number of sw timer instances */
static uint8_t sw_tm_slot_id = 0;

static uint8_t sw_tm_getNewSlot(sw_timer_t* pThis) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	
	if (sw_tm_slot_id >= SW_TM_INST_MAX)
 8002784:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <sw_tm_getNewSlot+0x40>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b09      	cmp	r3, #9
 800278a:	d905      	bls.n	8002798 <sw_tm_getNewSlot+0x1c>
	{
        assert(0);
 800278c:	213a      	movs	r1, #58	; 0x3a
 800278e:	480c      	ldr	r0, [pc, #48]	; (80027c0 <sw_tm_getNewSlot+0x44>)
 8002790:	f7ff ffea 	bl	8002768 <assert_failed>
		return 1; // max number of counter reached
 8002794:	2301      	movs	r3, #1
 8002796:	e00d      	b.n	80027b4 <sw_tm_getNewSlot+0x38>
	} else {
		pSw_timers[sw_tm_slot_id] = pThis;	
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <sw_tm_getNewSlot+0x40>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4619      	mov	r1, r3
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <sw_tm_getNewSlot+0x48>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		// count number of software_timers
		++sw_tm_slot_id;
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <sw_tm_getNewSlot+0x40>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4b03      	ldr	r3, [pc, #12]	; (80027bc <sw_tm_getNewSlot+0x40>)
 80027b0:	701a      	strb	r2, [r3, #0]
		return 0;
 80027b2:	2300      	movs	r3, #0
	}	
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000158 	.word	0x20000158
 80027c0:	08002a58 	.word	0x08002a58
 80027c4:	200001e0 	.word	0x200001e0

080027c8 <swTimer_tick>:


void swTimer_tick() {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	71fb      	strb	r3, [r7, #7]
    sw_timer_t *pTimer;

	for (i; i < sw_tm_slot_id; ++i) {
 80027d2:	e027      	b.n	8002824 <swTimer_tick+0x5c>
        pTimer = pSw_timers[i]; 
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	4a18      	ldr	r2, [pc, #96]	; (8002838 <swTimer_tick+0x70>)
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	603b      	str	r3, [r7, #0]
		if (pTimer->_status == SWTM_RUNNING) {
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	7a1b      	ldrb	r3, [r3, #8]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d11b      	bne.n	800281e <swTimer_tick+0x56>
			pTimer->_cnt++;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	601a      	str	r2, [r3, #0]
			
			if (pTimer->_cnt >= pTimer->_set_value && pTimer->_set_value != SWTM_CON_RUN) {
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d310      	bcc.n	800281e <swTimer_tick+0x56>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00c      	beq.n	800281e <swTimer_tick+0x56>
				pTimer->_status = SWTM_ELAPSED;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2203      	movs	r2, #3
 8002808:	721a      	strb	r2, [r3, #8]
				pTimer->_cnt = 0;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
				
				if (pTimer->_callback_fptr != NULL) {
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <swTimer_tick+0x56>
					pTimer->_callback_fptr(); 
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4798      	blx	r3
	for (i; i < sw_tm_slot_id; ++i) {
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	3301      	adds	r3, #1
 8002822:	71fb      	strb	r3, [r7, #7]
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <swTimer_tick+0x74>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	79fa      	ldrb	r2, [r7, #7]
 800282a:	429a      	cmp	r2, r3
 800282c:	d3d2      	bcc.n	80027d4 <swTimer_tick+0xc>
				}
			}
		} 		
	}
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200001e0 	.word	0x200001e0
 800283c:	20000158 	.word	0x20000158

08002840 <swTimer_init>:

/* constructor */
void swTimer_init(sw_timer_t* pThis) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	sw_tm_getNewSlot(pThis);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff97 	bl	800277c <sw_tm_getNewSlot>
	
	pThis->_status = SWTM_STOP;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	721a      	strb	r2, [r3, #8]
	pThis->_cnt = 0;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
	pThis->_set_value = 0;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	605a      	str	r2, [r3, #4]
	pThis->_callback_fptr = NULL;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <set_method>:


static void set_method(sw_timer_t* pThis, uint32_t set_value){
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
	pThis->_set_value = set_value;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	605a      	str	r2, [r3, #4]
	pThis->_status = SWTM_RUNNING;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	721a      	strb	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <reSet_method>:

static void reSet_method(sw_timer_t* pThis, uint32_t set_value) {
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
	pThis->_set_value = set_value;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	605a      	str	r2, [r3, #4]
	pThis->_status = SWTM_RUNNING;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	721a      	strb	r2, [r3, #8]
	pThis->_cnt = 0;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <flush_method>:

static void flush_method(sw_timer_t* pThis) {
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	pThis->_cnt = 0;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
	pThis->_status = SWTM_STOP;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	721a      	strb	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <getTime_method>:

static uint32_t getTime_method(sw_timer_t* pThis) {
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
    return (pThis->_cnt);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <pause_method>:

static void pause_method(sw_timer_t* pThis) {
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	pThis->_status = SWTM_PAUSE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	721a      	strb	r2, [r3, #8]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <isElapsed_method>:

static bool isElapsed_method(sw_timer_t* pThis) {
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	if (pThis->_status == SWTM_ELAPSED)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7a1b      	ldrb	r3, [r3, #8]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d101      	bne.n	8002914 <isElapsed_method+0x14>
	{ 
		return true;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <isElapsed_method+0x16>
	} else {
		return false;
 8002914:	2300      	movs	r3, #0
	}
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <attach_callBack_method>:

static void attach_callBack_method(sw_timer_t* pThis, pF_swTm callback) {
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
	pThis->_callback_fptr = callback;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	60da      	str	r2, [r3, #12]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
	...

0800293c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800293c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800293e:	e003      	b.n	8002948 <LoopCopyDataInit>

08002940 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002942:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002944:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002946:	3104      	adds	r1, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002948:	480a      	ldr	r0, [pc, #40]	; (8002974 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800294c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800294e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002950:	d3f6      	bcc.n	8002940 <CopyDataInit>
  ldr r2, =_sbss
 8002952:	4a0a      	ldr	r2, [pc, #40]	; (800297c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002954:	e002      	b.n	800295c <LoopFillZerobss>

08002956 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002958:	f842 3b04 	str.w	r3, [r2], #4

0800295c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800295e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002960:	d3f9      	bcc.n	8002956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002962:	f7fd feab 	bl	80006bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002966:	f000 f80f 	bl	8002988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800296a:	f7fd fd0b 	bl	8000384 <main>
  bx lr
 800296e:	4770      	bx	lr
  ldr r3, =_sidata
 8002970:	08002ac8 	.word	0x08002ac8
  ldr r0, =_sdata
 8002974:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002978:	20000110 	.word	0x20000110
  ldr r2, =_sbss
 800297c:	20000110 	.word	0x20000110
  ldr r3, = _ebss
 8002980:	20000208 	.word	0x20000208

08002984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <ADC1_2_IRQHandler>
	...

08002988 <__libc_init_array>:
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	2500      	movs	r5, #0
 800298c:	4e0c      	ldr	r6, [pc, #48]	; (80029c0 <__libc_init_array+0x38>)
 800298e:	4c0d      	ldr	r4, [pc, #52]	; (80029c4 <__libc_init_array+0x3c>)
 8002990:	1ba4      	subs	r4, r4, r6
 8002992:	10a4      	asrs	r4, r4, #2
 8002994:	42a5      	cmp	r5, r4
 8002996:	d109      	bne.n	80029ac <__libc_init_array+0x24>
 8002998:	f000 f832 	bl	8002a00 <_init>
 800299c:	2500      	movs	r5, #0
 800299e:	4e0a      	ldr	r6, [pc, #40]	; (80029c8 <__libc_init_array+0x40>)
 80029a0:	4c0a      	ldr	r4, [pc, #40]	; (80029cc <__libc_init_array+0x44>)
 80029a2:	1ba4      	subs	r4, r4, r6
 80029a4:	10a4      	asrs	r4, r4, #2
 80029a6:	42a5      	cmp	r5, r4
 80029a8:	d105      	bne.n	80029b6 <__libc_init_array+0x2e>
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
 80029ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029b0:	4798      	blx	r3
 80029b2:	3501      	adds	r5, #1
 80029b4:	e7ee      	b.n	8002994 <__libc_init_array+0xc>
 80029b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029ba:	4798      	blx	r3
 80029bc:	3501      	adds	r5, #1
 80029be:	e7f2      	b.n	80029a6 <__libc_init_array+0x1e>
 80029c0:	08002ac0 	.word	0x08002ac0
 80029c4:	08002ac0 	.word	0x08002ac0
 80029c8:	08002ac0 	.word	0x08002ac0
 80029cc:	08002ac4 	.word	0x08002ac4

080029d0 <memset>:
 80029d0:	4603      	mov	r3, r0
 80029d2:	4402      	add	r2, r0
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d100      	bne.n	80029da <memset+0xa>
 80029d8:	4770      	bx	lr
 80029da:	f803 1b01 	strb.w	r1, [r3], #1
 80029de:	e7f9      	b.n	80029d4 <memset+0x4>

080029e0 <strcat>:
 80029e0:	4602      	mov	r2, r0
 80029e2:	b510      	push	{r4, lr}
 80029e4:	4613      	mov	r3, r2
 80029e6:	781c      	ldrb	r4, [r3, #0]
 80029e8:	3201      	adds	r2, #1
 80029ea:	2c00      	cmp	r4, #0
 80029ec:	d1fa      	bne.n	80029e4 <strcat+0x4>
 80029ee:	3b01      	subs	r3, #1
 80029f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029f8:	2a00      	cmp	r2, #0
 80029fa:	d1f9      	bne.n	80029f0 <strcat+0x10>
 80029fc:	bd10      	pop	{r4, pc}
	...

08002a00 <_init>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	bf00      	nop
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr

08002a0c <_fini>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	bf00      	nop
 8002a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a12:	bc08      	pop	{r3}
 8002a14:	469e      	mov	lr, r3
 8002a16:	4770      	bx	lr

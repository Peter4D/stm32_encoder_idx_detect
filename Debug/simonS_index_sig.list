
simonS_index_sig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08001e0c  08001e0c  00011e0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f8c  08001f8c  00011f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f90  08001f90  00011f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08001f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a4  20000020  08001fb4  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000c4  08001fb4  000200c4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015ad5  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002897  00000000  00000000  00035b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000948  00000000  00000000  000383b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b98  00000000  00000000  00038d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006e57  00000000  00000000  00039898  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000034f5  00000000  00000000  000406ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00043be4  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001bc0  00000000  00000000  00043c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000620c  00000000  00000000  00045820  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08001df4 	.word	0x08001df4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08001df4 	.word	0x08001df4

0800014c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800014c:	2210      	movs	r2, #16
{
 800014e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000150:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	eb0d 0002 	add.w	r0, sp, r2
 8000156:	2100      	movs	r1, #0
 8000158:	f001 fe44 	bl	8001de4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800015c:	4b2e      	ldr	r3, [pc, #184]	; (8000218 <MX_GPIO_Init+0xcc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800015e:	4d2f      	ldr	r5, [pc, #188]	; (800021c <MX_GPIO_Init+0xd0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, out0_Pin|out1_Pin|out2_Pin|out3_Pin, GPIO_PIN_RESET);
 8000162:	4e2f      	ldr	r6, [pc, #188]	; (8000220 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000164:	f042 0210 	orr.w	r2, r2, #16
 8000168:	619a      	str	r2, [r3, #24]
 800016a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800016c:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800016e:	f002 0210 	and.w	r2, r2, #16
 8000172:	9201      	str	r2, [sp, #4]
 8000174:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000176:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800017c:	f042 0204 	orr.w	r2, r2, #4
 8000180:	619a      	str	r2, [r3, #24]
 8000182:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000184:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000186:	f002 0204 	and.w	r2, r2, #4
 800018a:	9202      	str	r2, [sp, #8]
 800018c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800018e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000190:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000192:	f042 0208 	orr.w	r2, r2, #8
 8000196:	619a      	str	r2, [r3, #24]
 8000198:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800019a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800019c:	f003 0308 	and.w	r3, r3, #8
 80001a0:	9303      	str	r3, [sp, #12]
 80001a2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80001a4:	f000 fc3a 	bl	8000a1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out0_Pin|out1_Pin|out2_Pin|out3_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	4630      	mov	r0, r6
 80001ac:	210f      	movs	r1, #15
 80001ae:	f000 fc35 	bl	8000a1c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = led_Pin;
 80001b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001b6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001b8:	2311      	movs	r3, #17
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80001ba:	a904      	add	r1, sp, #16
 80001bc:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001be:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = out0_Pin|out1_Pin|out2_Pin|out3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c0:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001c2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001c4:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80001c6:	f000 fabd 	bl	8000744 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = out0_Pin|out1_Pin|out2_Pin|out3_Pin;
 80001ca:	230f      	movs	r3, #15
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001cc:	a904      	add	r1, sp, #16
 80001ce:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = out0_Pin|out1_Pin|out2_Pin|out3_Pin;
 80001d0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d6:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001d8:	f000 fab4 	bl	8000744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = END_SW0_Pin|END_SW1_Pin|END_SW2_Pin|END_SW3_Pin;
 80001dc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001e0:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001e2:	4d10      	ldr	r5, [pc, #64]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001e4:	a904      	add	r1, sp, #16
 80001e6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = END_SW0_Pin|END_SW1_Pin|END_SW2_Pin|END_SW3_Pin;
 80001e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ea:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001ec:	f000 faaa 	bl	8000744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = idx_int0_Pin|idx_int1_Pin|idx_int2_Pin|idx_int3_Pin;
 80001f0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80001f4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001f6:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <MX_GPIO_Init+0xdc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001f8:	a904      	add	r1, sp, #16
 80001fa:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001fc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fe:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000200:	f000 faa0 	bl	8000744 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000204:	4622      	mov	r2, r4
 8000206:	4621      	mov	r1, r4
 8000208:	2017      	movs	r0, #23
 800020a:	f000 f9e5 	bl	80005d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800020e:	2017      	movs	r0, #23
 8000210:	f000 fa24 	bl	800065c <HAL_NVIC_EnableIRQ>

}
 8000214:	b009      	add	sp, #36	; 0x24
 8000216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40011000 	.word	0x40011000
 8000220:	40010800 	.word	0x40010800
 8000224:	40010c00 	.word	0x40010c00
 8000228:	10110000 	.word	0x10110000

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b500      	push	{lr}
 800022e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000230:	2228      	movs	r2, #40	; 0x28
 8000232:	2100      	movs	r1, #0
 8000234:	a806      	add	r0, sp, #24
 8000236:	f001 fdd5 	bl	8001de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023a:	2214      	movs	r2, #20
 800023c:	2100      	movs	r1, #0
 800023e:	a801      	add	r0, sp, #4
 8000240:	f001 fdd0 	bl	8001de4 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000244:	2302      	movs	r3, #2
 8000246:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024c:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000250:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f000 fc1b 	bl	8000a8c <HAL_RCC_OscConfig>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000256:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000258:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000260:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000262:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000266:	f000 fe4f 	bl	8000f08 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800026a:	b011      	add	sp, #68	; 0x44
 800026c:	f85d fb04 	ldr.w	pc, [sp], #4

08000270 <main>:
{
 8000270:	b508      	push	{r3, lr}
  HAL_Init();
 8000272:	f000 f96f 	bl	8000554 <HAL_Init>
  SystemClock_Config();
 8000276:	f7ff ffd9 	bl	800022c <SystemClock_Config>
  MX_GPIO_Init();
 800027a:	f7ff ff67 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800027e:	f000 f8e5 	bl	800044c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000282:	f000 f893 	bl	80003ac <MX_TIM2_Init>
        if( (HAL_GetTick() - led_last_tick) > LED_TICK_TM ){
 8000286:	4c0c      	ldr	r4, [pc, #48]	; (80002b8 <main+0x48>)
            HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000288:	4e0c      	ldr	r6, [pc, #48]	; (80002bc <main+0x4c>)
            HAL_UART_Transmit_IT(&huart1, uart_test_msg, sizeof(uart_test_msg));
 800028a:	4d0d      	ldr	r5, [pc, #52]	; (80002c0 <main+0x50>)
        if( (HAL_GetTick() - led_last_tick) > LED_TICK_TM ){
 800028c:	f000 f980 	bl	8000590 <HAL_GetTick>
 8000290:	6823      	ldr	r3, [r4, #0]
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000298:	d9f8      	bls.n	800028c <main+0x1c>
            led_last_tick = HAL_GetTick();
 800029a:	f000 f979 	bl	8000590 <HAL_GetTick>
            HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800029e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
            led_last_tick = HAL_GetTick();
 80002a2:	6020      	str	r0, [r4, #0]
            HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80002a4:	4630      	mov	r0, r6
 80002a6:	f000 fbd3 	bl	8000a50 <HAL_GPIO_TogglePin>
            HAL_UART_Transmit_IT(&huart1, uart_test_msg, sizeof(uart_test_msg));
 80002aa:	2213      	movs	r2, #19
 80002ac:	4629      	mov	r1, r5
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <main+0x54>)
 80002b0:	f001 fc46 	bl	8001b40 <HAL_UART_Transmit_IT>
 80002b4:	e7ea      	b.n	800028c <main+0x1c>
 80002b6:	bf00      	nop
 80002b8:	2000003c 	.word	0x2000003c
 80002bc:	40011000 	.word	0x40011000
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000080 	.word	0x20000080

080002c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c8:	4770      	bx	lr

080002ca <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80002ca:	4770      	bx	lr

080002cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <HAL_MspInit+0x3c>)
{
 80002ce:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80002d0:	699a      	ldr	r2, [r3, #24]
 80002d2:	f042 0201 	orr.w	r2, r2, #1
 80002d6:	619a      	str	r2, [r3, #24]
 80002d8:	699a      	ldr	r2, [r3, #24]
 80002da:	f002 0201 	and.w	r2, r2, #1
 80002de:	9200      	str	r2, [sp, #0]
 80002e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002e2:	69da      	ldr	r2, [r3, #28]
 80002e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002e8:	61da      	str	r2, [r3, #28]
 80002ea:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002ec:	4a07      	ldr	r2, [pc, #28]	; (800030c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002f6:	6853      	ldr	r3, [r2, #4]
 80002f8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000300:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000302:	b002      	add	sp, #8
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40021000 	.word	0x40021000
 800030c:	40010000 	.word	0x40010000

08000310 <NMI_Handler>:
 8000310:	4770      	bx	lr

08000312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000312:	e7fe      	b.n	8000312 <HardFault_Handler>

08000314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000314:	e7fe      	b.n	8000314 <MemManage_Handler>

08000316 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000316:	e7fe      	b.n	8000316 <BusFault_Handler>

08000318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000318:	e7fe      	b.n	8000318 <UsageFault_Handler>

0800031a <SVC_Handler>:
 800031a:	4770      	bx	lr

0800031c <DebugMon_Handler>:
 800031c:	4770      	bx	lr

0800031e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800031e:	4770      	bx	lr

08000320 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000320:	f000 b92a 	b.w	8000578 <HAL_IncTick>

08000324 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000324:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000326:	2040      	movs	r0, #64	; 0x40
 8000328:	f000 fba4 	bl	8000a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800032c:	2080      	movs	r0, #128	; 0x80
 800032e:	f000 fba1 	bl	8000a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000332:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000336:	f000 fb9d 	bl	8000a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800033a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800033e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000342:	f000 bb97 	b.w	8000a74 <HAL_GPIO_EXTI_IRQHandler>
	...

08000348 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000348:	4801      	ldr	r0, [pc, #4]	; (8000350 <TIM2_IRQHandler+0x8>)
 800034a:	f001 b932 	b.w	80015b2 <HAL_TIM_IRQHandler>
 800034e:	bf00      	nop
 8000350:	20000040 	.word	0x20000040

08000354 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000354:	4801      	ldr	r0, [pc, #4]	; (800035c <USART1_IRQHandler+0x8>)
 8000356:	f001 bc53 	b.w	8001c00 <HAL_UART_IRQHandler>
 800035a:	bf00      	nop
 800035c:	20000080 	.word	0x20000080

08000360 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <SystemInit+0x40>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	f042 0201 	orr.w	r2, r2, #1
 8000368:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800036a:	6859      	ldr	r1, [r3, #4]
 800036c:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <SystemInit+0x44>)
 800036e:	400a      	ands	r2, r1
 8000370:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000378:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800037c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000384:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000386:	685a      	ldr	r2, [r3, #4]
 8000388:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800038c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800038e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000392:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000394:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <SystemInit+0x48>)
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000
 80003a4:	f8ff0000 	.word	0xf8ff0000
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80003ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ae:	2210      	movs	r2, #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	a802      	add	r0, sp, #8
 80003b4:	f001 fd16 	bl	8001de4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b8:	2300      	movs	r3, #0

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8;
 80003ba:	2208      	movs	r2, #8
 80003bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80003c0:	4813      	ldr	r0, [pc, #76]	; (8000410 <MX_TIM2_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	9301      	str	r3, [sp, #4]
  htim2.Init.Prescaler = 8;
 80003c6:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ca:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = TIM2_CNT;
 80003cc:	2264      	movs	r2, #100	; 0x64
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ce:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003d0:	2380      	movs	r3, #128	; 0x80
  htim2.Init.Period = TIM2_CNT;
 80003d2:	60c2      	str	r2, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003d4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003d6:	f001 f9c7 	bl	8001768 <HAL_TIM_Base_Init>
 80003da:	b108      	cbz	r0, 80003e0 <MX_TIM2_Init+0x34>
  {
    Error_Handler();
 80003dc:	f7ff ff74 	bl	80002c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003e4:	a902      	add	r1, sp, #8
 80003e6:	480a      	ldr	r0, [pc, #40]	; (8000410 <MX_TIM2_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ea:	f000 febd 	bl	8001168 <HAL_TIM_ConfigClockSource>
 80003ee:	b108      	cbz	r0, 80003f4 <MX_TIM2_Init+0x48>
  {
    Error_Handler();
 80003f0:	f7ff ff6a 	bl	80002c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f6:	4669      	mov	r1, sp
 80003f8:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_TIM2_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fa:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003fe:	f001 fa07 	bl	8001810 <HAL_TIMEx_MasterConfigSynchronization>
 8000402:	b108      	cbz	r0, 8000408 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000404:	f7ff ff60 	bl	80002c8 <Error_Handler>
  }

}
 8000408:	b007      	add	sp, #28
 800040a:	f85d fb04 	ldr.w	pc, [sp], #4
 800040e:	bf00      	nop
 8000410:	20000040 	.word	0x20000040

08000414 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8000414:	6803      	ldr	r3, [r0, #0]
{
 8000416:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 8000418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800041c:	d112      	bne.n	8000444 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800041e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000422:	69da      	ldr	r2, [r3, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000424:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000426:	f042 0201 	orr.w	r2, r2, #1
 800042a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800042c:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800042e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000430:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	9301      	str	r3, [sp, #4]
 8000438:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800043a:	f000 f8cd 	bl	80005d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800043e:	201c      	movs	r0, #28
 8000440:	f000 f90c 	bl	800065c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000444:	b003      	add	sp, #12
 8000446:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800044c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800044c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800044e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8000452:	480a      	ldr	r0, [pc, #40]	; (800047c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8000454:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000456:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8000458:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800045c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800045e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000460:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000462:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000464:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000466:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800046a:	f001 fb01 	bl	8001a70 <HAL_UART_Init>
 800046e:	b118      	cbz	r0, 8000478 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000474:	f7ff bf28 	b.w	80002c8 <Error_Handler>
 8000478:	bd08      	pop	{r3, pc}
 800047a:	bf00      	nop
 800047c:	20000080 	.word	0x20000080
 8000480:	40013800 	.word	0x40013800

08000484 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000484:	b510      	push	{r4, lr}
 8000486:	4604      	mov	r4, r0
 8000488:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	2210      	movs	r2, #16
 800048c:	2100      	movs	r1, #0
 800048e:	a802      	add	r0, sp, #8
 8000490:	f001 fca8 	bl	8001de4 <memset>
  if(uartHandle->Instance==USART1)
 8000494:	6822      	ldr	r2, [r4, #0]
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <HAL_UART_MspInit+0x80>)
 8000498:	429a      	cmp	r2, r3
 800049a:	d130      	bne.n	80004fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800049c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80004a0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a2:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80004a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80004a8:	619a      	str	r2, [r3, #24]
 80004aa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	4816      	ldr	r0, [pc, #88]	; (8000508 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80004ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80004b2:	9200      	str	r2, [sp, #0]
 80004b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	f042 0204 	orr.w	r2, r2, #4
 80004be:	619a      	str	r2, [r3, #24]
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0304 	and.w	r3, r3, #4
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d0:	2302      	movs	r3, #2
 80004d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	2303      	movs	r3, #3
 80004d6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f000 f934 	bl	8000744 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	a902      	add	r1, sp, #8
 80004e2:	4809      	ldr	r0, [pc, #36]	; (8000508 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004e4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f000 f92b 	bl	8000744 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80004ee:	2025      	movs	r0, #37	; 0x25
 80004f0:	4622      	mov	r2, r4
 80004f2:	4621      	mov	r1, r4
 80004f4:	f000 f870 	bl	80005d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004f8:	2025      	movs	r0, #37	; 0x25
 80004fa:	f000 f8af 	bl	800065c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80004fe:	b006      	add	sp, #24
 8000500:	bd10      	pop	{r4, pc}
 8000502:	bf00      	nop
 8000504:	40013800 	.word	0x40013800
 8000508:	40010800 	.word	0x40010800

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_InitTick+0x3c>)
{
 8000510:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000512:	7818      	ldrb	r0, [r3, #0]
 8000514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000518:	fbb3 f3f0 	udiv	r3, r3, r0
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <HAL_InitTick+0x40>)
 800051e:	6810      	ldr	r0, [r2, #0]
 8000520:	fbb0 f0f3 	udiv	r0, r0, r3
 8000524:	f000 f8b0 	bl	8000688 <HAL_SYSTICK_Config>
 8000528:	4604      	mov	r4, r0
 800052a:	b958      	cbnz	r0, 8000544 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052c:	2d0f      	cmp	r5, #15
 800052e:	d809      	bhi.n	8000544 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000530:	4602      	mov	r2, r0
 8000532:	4629      	mov	r1, r5
 8000534:	f04f 30ff 	mov.w	r0, #4294967295
 8000538:	f000 f84e 	bl	80005d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <HAL_InitTick+0x44>)
 800053e:	4620      	mov	r0, r4
 8000540:	601d      	str	r5, [r3, #0]
 8000542:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000544:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000546:	bd38      	pop	{r3, r4, r5, pc}
 8000548:	20000018 	.word	0x20000018
 800054c:	20000014 	.word	0x20000014
 8000550:	2000001c 	.word	0x2000001c

08000554 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000554:	4a07      	ldr	r2, [pc, #28]	; (8000574 <HAL_Init+0x20>)
{
 8000556:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055c:	f043 0310 	orr.w	r3, r3, #16
 8000560:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000562:	f000 f81b 	bl	800059c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ffd0 	bl	800050c <HAL_InitTick>
  HAL_MspInit();
 800056c:	f7ff feae 	bl	80002cc <HAL_MspInit>
}
 8000570:	2000      	movs	r0, #0
 8000572:	bd08      	pop	{r3, pc}
 8000574:	40022000 	.word	0x40022000

08000578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x10>)
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_IncTick+0x14>)
 800057c:	6811      	ldr	r1, [r2, #0]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	440b      	add	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	200000c0 	.word	0x200000c0
 800058c:	20000018 	.word	0x20000018

08000590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <HAL_GetTick+0x8>)
 8000592:	6818      	ldr	r0, [r3, #0]
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	200000c0 	.word	0x200000c0

0800059c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800059c:	1ec3      	subs	r3, r0, #3
 800059e:	2b04      	cmp	r3, #4
{
 80005a0:	b510      	push	{r4, lr}
 80005a2:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80005a4:	d903      	bls.n	80005ae <HAL_NVIC_SetPriorityGrouping+0x12>
 80005a6:	21a2      	movs	r1, #162	; 0xa2
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80005aa:	f7ff fe8e 	bl	80002ca <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ae:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b0:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b2:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b4:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80005c8:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 80005ca:	60d4      	str	r4, [r2, #12]
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	bf00      	nop
 80005d0:	08001e34 	.word	0x08001e34
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80005d8:	2a0f      	cmp	r2, #15
{ 
 80005da:	b570      	push	{r4, r5, r6, lr}
 80005dc:	4604      	mov	r4, r0
 80005de:	460e      	mov	r6, r1
 80005e0:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80005e2:	d903      	bls.n	80005ec <HAL_NVIC_SetPriority+0x14>
 80005e4:	21ba      	movs	r1, #186	; 0xba
 80005e6:	481a      	ldr	r0, [pc, #104]	; (8000650 <HAL_NVIC_SetPriority+0x78>)
 80005e8:	f7ff fe6f 	bl	80002ca <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80005ec:	2e0f      	cmp	r6, #15
 80005ee:	d903      	bls.n	80005f8 <HAL_NVIC_SetPriority+0x20>
 80005f0:	21bb      	movs	r1, #187	; 0xbb
 80005f2:	4817      	ldr	r0, [pc, #92]	; (8000650 <HAL_NVIC_SetPriority+0x78>)
 80005f4:	f7ff fe69 	bl	80002ca <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_NVIC_SetPriority+0x7c>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fa:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005fc:	68d9      	ldr	r1, [r3, #12]
 80005fe:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000602:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000606:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000608:	2b04      	cmp	r3, #4
 800060a:	bf28      	it	cs
 800060c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060e:	2a06      	cmp	r2, #6
 8000610:	bf94      	ite	ls
 8000612:	2100      	movls	r1, #0
 8000614:	3903      	subhi	r1, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000616:	fa00 f203 	lsl.w	r2, r0, r3
 800061a:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800061c:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061e:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000620:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000622:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000624:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 8000626:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	ea42 0205 	orr.w	r2, r2, r5
 800062c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	bfaf      	iteee	ge
 8000632:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	4b08      	ldrlt	r3, [pc, #32]	; (8000658 <HAL_NVIC_SetPriority+0x80>)
 8000638:	f004 040f 	andlt.w	r4, r4, #15
 800063c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	bfa5      	ittet	ge
 8000640:	b2d2      	uxtbge	r2, r2
 8000642:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 800064c:	bd70      	pop	{r4, r5, r6, pc}
 800064e:	bf00      	nop
 8000650:	08001e34 	.word	0x08001e34
 8000654:	e000ed00 	.word	0xe000ed00
 8000658:	e000ed14 	.word	0xe000ed14

0800065c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800065e:	1e04      	subs	r4, r0, #0
 8000660:	da03      	bge.n	800066a <HAL_NVIC_EnableIRQ+0xe>
 8000662:	21ce      	movs	r1, #206	; 0xce
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <HAL_NVIC_EnableIRQ+0x24>)
 8000666:	f7ff fe30 	bl	80002ca <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800066a:	2301      	movs	r3, #1
 800066c:	0962      	lsrs	r2, r4, #5
 800066e:	f004 041f 	and.w	r4, r4, #31
 8000672:	fa03 f404 	lsl.w	r4, r3, r4
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <HAL_NVIC_EnableIRQ+0x28>)
 8000678:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800067c:	bd10      	pop	{r4, pc}
 800067e:	bf00      	nop
 8000680:	08001e34 	.word	0x08001e34
 8000684:	e000e100 	.word	0xe000e100

08000688 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000688:	3801      	subs	r0, #1
 800068a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800068e:	d20a      	bcs.n	80006a6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000696:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e010 	.word	0xe000e010
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80006b4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80006b8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d003      	beq.n	80006c6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006be:	2304      	movs	r3, #4
 80006c0:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80006c2:	2001      	movs	r0, #1
 80006c4:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006c6:	6803      	ldr	r3, [r0, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	f022 020e 	bic.w	r2, r2, #14
 80006ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	f022 0201 	bic.w	r2, r2, #1
 80006d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80006d8:	4a18      	ldr	r2, [pc, #96]	; (800073c <HAL_DMA_Abort_IT+0x88>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d01f      	beq.n	800071e <HAL_DMA_Abort_IT+0x6a>
 80006de:	3214      	adds	r2, #20
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d01e      	beq.n	8000722 <HAL_DMA_Abort_IT+0x6e>
 80006e4:	3214      	adds	r2, #20
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d01d      	beq.n	8000726 <HAL_DMA_Abort_IT+0x72>
 80006ea:	3214      	adds	r2, #20
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d01d      	beq.n	800072c <HAL_DMA_Abort_IT+0x78>
 80006f0:	3214      	adds	r2, #20
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d01d      	beq.n	8000732 <HAL_DMA_Abort_IT+0x7e>
 80006f6:	3214      	adds	r2, #20
 80006f8:	4293      	cmp	r3, r2
 80006fa:	bf0c      	ite	eq
 80006fc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000700:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000704:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000706:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000708:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800070a:	2301      	movs	r3, #1
 800070c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000710:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000712:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000716:	b17b      	cbz	r3, 8000738 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000718:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800071a:	4620      	mov	r0, r4
 800071c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800071e:	2301      	movs	r3, #1
 8000720:	e7f0      	b.n	8000704 <HAL_DMA_Abort_IT+0x50>
 8000722:	2310      	movs	r3, #16
 8000724:	e7ee      	b.n	8000704 <HAL_DMA_Abort_IT+0x50>
 8000726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800072a:	e7eb      	b.n	8000704 <HAL_DMA_Abort_IT+0x50>
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	e7e8      	b.n	8000704 <HAL_DMA_Abort_IT+0x50>
 8000732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000736:	e7e5      	b.n	8000704 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000738:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800073a:	bd10      	pop	{r4, pc}
 800073c:	40020008 	.word	0x40020008
 8000740:	40020000 	.word	0x40020000

08000744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000748:	4aaa      	ldr	r2, [pc, #680]	; (80009f4 <HAL_GPIO_Init+0x2b0>)
{
 800074a:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800074c:	4290      	cmp	r0, r2
{
 800074e:	4604      	mov	r4, r0
 8000750:	468b      	mov	fp, r1
 8000752:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000754:	d013      	beq.n	800077e <HAL_GPIO_Init+0x3a>
 8000756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800075a:	4290      	cmp	r0, r2
 800075c:	d00f      	beq.n	800077e <HAL_GPIO_Init+0x3a>
 800075e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000762:	4290      	cmp	r0, r2
 8000764:	d00b      	beq.n	800077e <HAL_GPIO_Init+0x3a>
 8000766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800076a:	4290      	cmp	r0, r2
 800076c:	d007      	beq.n	800077e <HAL_GPIO_Init+0x3a>
 800076e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000772:	4290      	cmp	r0, r2
 8000774:	d003      	beq.n	800077e <HAL_GPIO_Init+0x3a>
 8000776:	21cd      	movs	r1, #205	; 0xcd
 8000778:	489f      	ldr	r0, [pc, #636]	; (80009f8 <HAL_GPIO_Init+0x2b4>)
 800077a:	f7ff fda6 	bl	80002ca <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800077e:	f8db 2000 	ldr.w	r2, [fp]
 8000782:	b291      	uxth	r1, r2
 8000784:	b111      	cbz	r1, 800078c <HAL_GPIO_Init+0x48>
 8000786:	0c12      	lsrs	r2, r2, #16
 8000788:	0412      	lsls	r2, r2, #16
 800078a:	b11a      	cbz	r2, 8000794 <HAL_GPIO_Init+0x50>
 800078c:	21ce      	movs	r1, #206	; 0xce
 800078e:	489a      	ldr	r0, [pc, #616]	; (80009f8 <HAL_GPIO_Init+0x2b4>)
 8000790:	f7ff fd9b 	bl	80002ca <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000794:	f8db 2004 	ldr.w	r2, [fp, #4]
 8000798:	2a03      	cmp	r2, #3
 800079a:	d917      	bls.n	80007cc <HAL_GPIO_Init+0x88>
 800079c:	f1a2 0111 	sub.w	r1, r2, #17
 80007a0:	2901      	cmp	r1, #1
 80007a2:	d913      	bls.n	80007cc <HAL_GPIO_Init+0x88>
 80007a4:	4895      	ldr	r0, [pc, #596]	; (80009fc <HAL_GPIO_Init+0x2b8>)
 80007a6:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 80007aa:	4281      	cmp	r1, r0
 80007ac:	d00e      	beq.n	80007cc <HAL_GPIO_Init+0x88>
 80007ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80007b2:	4282      	cmp	r2, r0
 80007b4:	d00a      	beq.n	80007cc <HAL_GPIO_Init+0x88>
 80007b6:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 80007ba:	4281      	cmp	r1, r0
 80007bc:	d006      	beq.n	80007cc <HAL_GPIO_Init+0x88>
 80007be:	4990      	ldr	r1, [pc, #576]	; (8000a00 <HAL_GPIO_Init+0x2bc>)
 80007c0:	428a      	cmp	r2, r1
 80007c2:	d003      	beq.n	80007cc <HAL_GPIO_Init+0x88>
 80007c4:	21cf      	movs	r1, #207	; 0xcf
 80007c6:	488c      	ldr	r0, [pc, #560]	; (80009f8 <HAL_GPIO_Init+0x2b4>)
 80007c8:	f7ff fd7f 	bl	80002ca <assert_failed>
{
 80007cc:	2500      	movs	r5, #0
 80007ce:	46a8      	mov	r8, r5
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007d0:	f8df a244 	ldr.w	sl, [pc, #580]	; 8000a18 <HAL_GPIO_Init+0x2d4>
 80007d4:	4e8b      	ldr	r6, [pc, #556]	; (8000a04 <HAL_GPIO_Init+0x2c0>)
    ioposition = (0x01U << position);
 80007d6:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007d8:	f8db 7000 	ldr.w	r7, [fp]
    ioposition = (0x01U << position);
 80007dc:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e0:	ea09 0707 	and.w	r7, r9, r7
    if (iocurrent == ioposition)
 80007e4:	45b9      	cmp	r9, r7
 80007e6:	f040 808f 	bne.w	8000908 <HAL_GPIO_Init+0x1c4>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80007ea:	9b01      	ldr	r3, [sp, #4]
 80007ec:	429c      	cmp	r4, r3
 80007ee:	d011      	beq.n	8000814 <HAL_GPIO_Init+0xd0>
 80007f0:	4985      	ldr	r1, [pc, #532]	; (8000a08 <HAL_GPIO_Init+0x2c4>)
 80007f2:	428c      	cmp	r4, r1
 80007f4:	d00e      	beq.n	8000814 <HAL_GPIO_Init+0xd0>
 80007f6:	4b85      	ldr	r3, [pc, #532]	; (8000a0c <HAL_GPIO_Init+0x2c8>)
 80007f8:	429c      	cmp	r4, r3
 80007fa:	d00b      	beq.n	8000814 <HAL_GPIO_Init+0xd0>
 80007fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000800:	428c      	cmp	r4, r1
 8000802:	d007      	beq.n	8000814 <HAL_GPIO_Init+0xd0>
 8000804:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000808:	428c      	cmp	r4, r1
 800080a:	d003      	beq.n	8000814 <HAL_GPIO_Init+0xd0>
 800080c:	21dd      	movs	r1, #221	; 0xdd
 800080e:	487a      	ldr	r0, [pc, #488]	; (80009f8 <HAL_GPIO_Init+0x2b4>)
 8000810:	f7ff fd5b 	bl	80002ca <assert_failed>
      switch (GPIO_Init->Mode)
 8000814:	f8db 1004 	ldr.w	r1, [fp, #4]
 8000818:	2912      	cmp	r1, #18
 800081a:	f000 80d3 	beq.w	80009c4 <HAL_GPIO_Init+0x280>
 800081e:	f200 808d 	bhi.w	800093c <HAL_GPIO_Init+0x1f8>
 8000822:	2902      	cmp	r1, #2
 8000824:	f000 80c1 	beq.w	80009aa <HAL_GPIO_Init+0x266>
 8000828:	d877      	bhi.n	800091a <HAL_GPIO_Init+0x1d6>
 800082a:	2900      	cmp	r1, #0
 800082c:	f000 8093 	beq.w	8000956 <HAL_GPIO_Init+0x212>
 8000830:	2901      	cmp	r1, #1
 8000832:	f000 80ae 	beq.w	8000992 <HAL_GPIO_Init+0x24e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000836:	2fff      	cmp	r7, #255	; 0xff
 8000838:	bf82      	ittt	hi
 800083a:	f108 4e80 	addhi.w	lr, r8, #1073741824	; 0x40000000
 800083e:	f1ae 0e08 	subhi.w	lr, lr, #8
 8000842:	ea4f 018e 	movhi.w	r1, lr, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000846:	f04f 0e0f 	mov.w	lr, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800084a:	bf9d      	ittte	ls
 800084c:	4620      	movls	r0, r4
 800084e:	6822      	ldrls	r2, [r4, #0]
 8000850:	ea4f 0188 	movls.w	r1, r8, lsl #2
 8000854:	6862      	ldrhi	r2, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000856:	fa0e fc01 	lsl.w	ip, lr, r1
 800085a:	ea22 020c 	bic.w	r2, r2, ip
 800085e:	fa05 f101 	lsl.w	r1, r5, r1
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000862:	bf88      	it	hi
 8000864:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000866:	4311      	orrs	r1, r2
 8000868:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800086a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800086e:	00c3      	lsls	r3, r0, #3
 8000870:	d54a      	bpl.n	8000908 <HAL_GPIO_Init+0x1c4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000872:	f8da 2018 	ldr.w	r2, [sl, #24]
 8000876:	f028 0103 	bic.w	r1, r8, #3
 800087a:	f042 0201 	orr.w	r2, r2, #1
 800087e:	f8ca 2018 	str.w	r2, [sl, #24]
 8000882:	f8da 2018 	ldr.w	r2, [sl, #24]
 8000886:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800088a:	f002 0201 	and.w	r2, r2, #1
 800088e:	9203      	str	r2, [sp, #12]
 8000890:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000894:	f008 0c03 	and.w	ip, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000898:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 800089a:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800089c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80008a0:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008a2:	fa0e fe0c 	lsl.w	lr, lr, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a6:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008a8:	ea22 0e0e 	bic.w	lr, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ac:	f000 809b 	beq.w	80009e6 <HAL_GPIO_Init+0x2a2>
 80008b0:	4a55      	ldr	r2, [pc, #340]	; (8000a08 <HAL_GPIO_Init+0x2c4>)
 80008b2:	4294      	cmp	r4, r2
 80008b4:	f000 8099 	beq.w	80009ea <HAL_GPIO_Init+0x2a6>
 80008b8:	4b54      	ldr	r3, [pc, #336]	; (8000a0c <HAL_GPIO_Init+0x2c8>)
 80008ba:	429c      	cmp	r4, r3
 80008bc:	f000 8097 	beq.w	80009ee <HAL_GPIO_Init+0x2aa>
 80008c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80008c4:	4294      	cmp	r4, r2
 80008c6:	bf14      	ite	ne
 80008c8:	2204      	movne	r2, #4
 80008ca:	2203      	moveq	r2, #3
 80008cc:	fa02 f20c 	lsl.w	r2, r2, ip
 80008d0:	ea42 020e 	orr.w	r2, r2, lr
        AFIO->EXTICR[position >> 2U] = temp;
 80008d4:	608a      	str	r2, [r1, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008d6:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008d8:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 80008da:	bf4c      	ite	mi
 80008dc:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008de:	43ba      	bicpl	r2, r7
 80008e0:	6032      	str	r2, [r6, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008e2:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008e4:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 80008e6:	bf4c      	ite	mi
 80008e8:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008ea:	43ba      	bicpl	r2, r7
 80008ec:	6072      	str	r2, [r6, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008ee:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008f0:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 80008f2:	bf4c      	ite	mi
 80008f4:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008f6:	43ba      	bicpl	r2, r7
 80008f8:	60b2      	str	r2, [r6, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008fa:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008fc:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 80008fe:	bf4c      	ite	mi
 8000900:	4317      	orrmi	r7, r2
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000902:	ea22 0707 	bicpl.w	r7, r2, r7
 8000906:	60f7      	str	r7, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000908:	f108 0801 	add.w	r8, r8, #1
 800090c:	f1b8 0f10 	cmp.w	r8, #16
 8000910:	f47f af61 	bne.w	80007d6 <HAL_GPIO_Init+0x92>
        }
      }
    }
  }
}
 8000914:	b005      	add	sp, #20
 8000916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800091a:	2903      	cmp	r1, #3
 800091c:	d05f      	beq.n	80009de <HAL_GPIO_Init+0x29a>
 800091e:	2911      	cmp	r1, #17
 8000920:	d189      	bne.n	8000836 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000922:	f8db 200c 	ldr.w	r2, [fp, #12]
 8000926:	3a01      	subs	r2, #1
 8000928:	2a02      	cmp	r2, #2
 800092a:	d903      	bls.n	8000934 <HAL_GPIO_Init+0x1f0>
 800092c:	21ec      	movs	r1, #236	; 0xec
 800092e:	4832      	ldr	r0, [pc, #200]	; (80009f8 <HAL_GPIO_Init+0x2b4>)
 8000930:	f7ff fccb 	bl	80002ca <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000934:	f8db 500c 	ldr.w	r5, [fp, #12]
 8000938:	3504      	adds	r5, #4
          break;
 800093a:	e77c      	b.n	8000836 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800093c:	4834      	ldr	r0, [pc, #208]	; (8000a10 <HAL_GPIO_Init+0x2cc>)
 800093e:	4281      	cmp	r1, r0
 8000940:	d009      	beq.n	8000956 <HAL_GPIO_Init+0x212>
 8000942:	d81c      	bhi.n	800097e <HAL_GPIO_Init+0x23a>
 8000944:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8000948:	4281      	cmp	r1, r0
 800094a:	d004      	beq.n	8000956 <HAL_GPIO_Init+0x212>
 800094c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8000950:	4281      	cmp	r1, r0
 8000952:	f47f af70 	bne.w	8000836 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000956:	f8db 1008 	ldr.w	r1, [fp, #8]
 800095a:	2902      	cmp	r1, #2
 800095c:	d904      	bls.n	8000968 <HAL_GPIO_Init+0x224>
 800095e:	f240 1107 	movw	r1, #263	; 0x107
 8000962:	4825      	ldr	r0, [pc, #148]	; (80009f8 <HAL_GPIO_Init+0x2b4>)
 8000964:	f7ff fcb1 	bl	80002ca <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000968:	f8db 1008 	ldr.w	r1, [fp, #8]
 800096c:	b3c9      	cbz	r1, 80009e2 <HAL_GPIO_Init+0x29e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800096e:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 8000970:	bf0c      	ite	eq
 8000972:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 8000976:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800097a:	2508      	movs	r5, #8
 800097c:	e75b      	b.n	8000836 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800097e:	4825      	ldr	r0, [pc, #148]	; (8000a14 <HAL_GPIO_Init+0x2d0>)
 8000980:	4281      	cmp	r1, r0
 8000982:	d0e8      	beq.n	8000956 <HAL_GPIO_Init+0x212>
 8000984:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8000988:	4281      	cmp	r1, r0
 800098a:	d0e4      	beq.n	8000956 <HAL_GPIO_Init+0x212>
 800098c:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8000990:	e7de      	b.n	8000950 <HAL_GPIO_Init+0x20c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000992:	f8db 200c 	ldr.w	r2, [fp, #12]
 8000996:	3a01      	subs	r2, #1
 8000998:	2a02      	cmp	r2, #2
 800099a:	d903      	bls.n	80009a4 <HAL_GPIO_Init+0x260>
 800099c:	21e5      	movs	r1, #229	; 0xe5
 800099e:	4816      	ldr	r0, [pc, #88]	; (80009f8 <HAL_GPIO_Init+0x2b4>)
 80009a0:	f7ff fc93 	bl	80002ca <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009a4:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 80009a8:	e745      	b.n	8000836 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80009aa:	f8db 200c 	ldr.w	r2, [fp, #12]
 80009ae:	3a01      	subs	r2, #1
 80009b0:	2a02      	cmp	r2, #2
 80009b2:	d903      	bls.n	80009bc <HAL_GPIO_Init+0x278>
 80009b4:	21f3      	movs	r1, #243	; 0xf3
 80009b6:	4810      	ldr	r0, [pc, #64]	; (80009f8 <HAL_GPIO_Init+0x2b4>)
 80009b8:	f7ff fc87 	bl	80002ca <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009bc:	f8db 500c 	ldr.w	r5, [fp, #12]
 80009c0:	3508      	adds	r5, #8
          break;
 80009c2:	e738      	b.n	8000836 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80009c4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80009c8:	3a01      	subs	r2, #1
 80009ca:	2a02      	cmp	r2, #2
 80009cc:	d903      	bls.n	80009d6 <HAL_GPIO_Init+0x292>
 80009ce:	21fa      	movs	r1, #250	; 0xfa
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <HAL_GPIO_Init+0x2b4>)
 80009d2:	f7ff fc7a 	bl	80002ca <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009d6:	f8db 500c 	ldr.w	r5, [fp, #12]
 80009da:	350c      	adds	r5, #12
          break;
 80009dc:	e72b      	b.n	8000836 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009de:	2500      	movs	r5, #0
 80009e0:	e729      	b.n	8000836 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e2:	2504      	movs	r5, #4
 80009e4:	e727      	b.n	8000836 <HAL_GPIO_Init+0xf2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e6:	2200      	movs	r2, #0
 80009e8:	e770      	b.n	80008cc <HAL_GPIO_Init+0x188>
 80009ea:	2201      	movs	r2, #1
 80009ec:	e76e      	b.n	80008cc <HAL_GPIO_Init+0x188>
 80009ee:	2202      	movs	r2, #2
 80009f0:	e76c      	b.n	80008cc <HAL_GPIO_Init+0x188>
 80009f2:	bf00      	nop
 80009f4:	40010800 	.word	0x40010800
 80009f8:	08001e6f 	.word	0x08001e6f
 80009fc:	10110000 	.word	0x10110000
 8000a00:	10220000 	.word	0x10220000
 8000a04:	40010400 	.word	0x40010400
 8000a08:	40010c00 	.word	0x40010c00
 8000a0c:	40011000 	.word	0x40011000
 8000a10:	10210000 	.word	0x10210000
 8000a14:	10310000 	.word	0x10310000
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	4605      	mov	r5, r0
 8000a20:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000a22:	460c      	mov	r4, r1
 8000a24:	b921      	cbnz	r1, 8000a30 <HAL_GPIO_WritePin+0x14>
 8000a26:	f240 11e3 	movw	r1, #483	; 0x1e3
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <HAL_GPIO_WritePin+0x30>)
 8000a2c:	f7ff fc4d 	bl	80002ca <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000a30:	2e01      	cmp	r6, #1
 8000a32:	d906      	bls.n	8000a42 <HAL_GPIO_WritePin+0x26>
 8000a34:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <HAL_GPIO_WritePin+0x30>)
 8000a3a:	f7ff fc46 	bl	80002ca <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a3e:	612c      	str	r4, [r5, #16]
 8000a40:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d1fb      	bne.n	8000a3e <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a46:	0424      	lsls	r4, r4, #16
 8000a48:	e7f9      	b.n	8000a3e <HAL_GPIO_WritePin+0x22>
 8000a4a:	bf00      	nop
 8000a4c:	08001e6f 	.word	0x08001e6f

08000a50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a50:	b538      	push	{r3, r4, r5, lr}
 8000a52:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000a54:	460c      	mov	r4, r1
 8000a56:	b921      	cbnz	r1, 8000a62 <HAL_GPIO_TogglePin+0x12>
 8000a58:	f240 11f9 	movw	r1, #505	; 0x1f9
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <HAL_GPIO_TogglePin+0x1c>)
 8000a5e:	f7ff fc34 	bl	80002ca <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 8000a62:	68eb      	ldr	r3, [r5, #12]
 8000a64:	405c      	eors	r4, r3
 8000a66:	60ec      	str	r4, [r5, #12]
 8000a68:	bd38      	pop	{r3, r4, r5, pc}
 8000a6a:	bf00      	nop
 8000a6c:	08001e6f 	.word	0x08001e6f

08000a70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a70:	4770      	bx	lr
	...

08000a74 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000a74:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000a78:	6959      	ldr	r1, [r3, #20]
 8000a7a:	4201      	tst	r1, r0
 8000a7c:	d002      	beq.n	8000a84 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a7e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a80:	f7ff fff6 	bl	8000a70 <HAL_GPIO_EXTI_Callback>
 8000a84:	bd08      	pop	{r3, pc}
 8000a86:	bf00      	nop
 8000a88:	40010400 	.word	0x40010400

08000a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8000a90:	4604      	mov	r4, r0
 8000a92:	b920      	cbnz	r0, 8000a9e <HAL_RCC_OscConfig+0x12>
 8000a94:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000a98:	48a5      	ldr	r0, [pc, #660]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000a9a:	f7ff fc16 	bl	80002ca <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	b133      	cbz	r3, 8000ab0 <HAL_RCC_OscConfig+0x24>
 8000aa2:	071a      	lsls	r2, r3, #28
 8000aa4:	d104      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x24>
 8000aa6:	f240 1171 	movw	r1, #369	; 0x171
 8000aaa:	48a1      	ldr	r0, [pc, #644]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000aac:	f7ff fc0d 	bl	80002ca <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	07db      	lsls	r3, r3, #31
 8000ab4:	d418      	bmi.n	8000ae8 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	079f      	lsls	r7, r3, #30
 8000aba:	d472      	bmi.n	8000ba2 <HAL_RCC_OscConfig+0x116>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	0719      	lsls	r1, r3, #28
 8000ac0:	f100 80b9 	bmi.w	8000c36 <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ac4:	6823      	ldr	r3, [r4, #0]
 8000ac6:	075a      	lsls	r2, r3, #29
 8000ac8:	f100 80eb 	bmi.w	8000ca2 <HAL_RCC_OscConfig+0x216>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000acc:	69e3      	ldr	r3, [r4, #28]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d904      	bls.n	8000adc <HAL_RCC_OscConfig+0x50>
 8000ad2:	f240 21b9 	movw	r1, #697	; 0x2b9
 8000ad6:	4896      	ldr	r0, [pc, #600]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000ad8:	f7ff fbf7 	bl	80002ca <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000adc:	69e2      	ldr	r2, [r4, #28]
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	f040 815e 	bne.w	8000da0 <HAL_RCC_OscConfig+0x314>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	e020      	b.n	8000b2a <HAL_RCC_OscConfig+0x9e>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000ae8:	6863      	ldr	r3, [r4, #4]
 8000aea:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8000aee:	d007      	beq.n	8000b00 <HAL_RCC_OscConfig+0x74>
 8000af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000af4:	d004      	beq.n	8000b00 <HAL_RCC_OscConfig+0x74>
 8000af6:	f240 1177 	movw	r1, #375	; 0x177
 8000afa:	488d      	ldr	r0, [pc, #564]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000afc:	f7ff fbe5 	bl	80002ca <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b00:	4d8c      	ldr	r5, [pc, #560]	; (8000d34 <HAL_RCC_OscConfig+0x2a8>)
 8000b02:	686b      	ldr	r3, [r5, #4]
 8000b04:	f003 030c 	and.w	r3, r3, #12
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	d007      	beq.n	8000b1c <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b0c:	686b      	ldr	r3, [r5, #4]
 8000b0e:	f003 030c 	and.w	r3, r3, #12
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d10c      	bne.n	8000b30 <HAL_RCC_OscConfig+0xa4>
 8000b16:	686b      	ldr	r3, [r5, #4]
 8000b18:	03de      	lsls	r6, r3, #15
 8000b1a:	d509      	bpl.n	8000b30 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	039d      	lsls	r5, r3, #14
 8000b20:	d5c9      	bpl.n	8000ab6 <HAL_RCC_OscConfig+0x2a>
 8000b22:	6863      	ldr	r3, [r4, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1c6      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x2a>
        return HAL_ERROR;
 8000b28:	2001      	movs	r0, #1
}
 8000b2a:	b002      	add	sp, #8
 8000b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b30:	6863      	ldr	r3, [r4, #4]
 8000b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b36:	d110      	bne.n	8000b5a <HAL_RCC_OscConfig+0xce>
 8000b38:	682b      	ldr	r3, [r5, #0]
 8000b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b40:	f7ff fd26 	bl	8000590 <HAL_GetTick>
 8000b44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b46:	682b      	ldr	r3, [r5, #0]
 8000b48:	0398      	lsls	r0, r3, #14
 8000b4a:	d4b4      	bmi.n	8000ab6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b4c:	f7ff fd20 	bl	8000590 <HAL_GetTick>
 8000b50:	1b80      	subs	r0, r0, r6
 8000b52:	2864      	cmp	r0, #100	; 0x64
 8000b54:	d9f7      	bls.n	8000b46 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000b56:	2003      	movs	r0, #3
 8000b58:	e7e7      	b.n	8000b2a <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5a:	b99b      	cbnz	r3, 8000b84 <HAL_RCC_OscConfig+0xf8>
 8000b5c:	682b      	ldr	r3, [r5, #0]
 8000b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b62:	602b      	str	r3, [r5, #0]
 8000b64:	682b      	ldr	r3, [r5, #0]
 8000b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fd10 	bl	8000590 <HAL_GetTick>
 8000b70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b72:	682b      	ldr	r3, [r5, #0]
 8000b74:	0399      	lsls	r1, r3, #14
 8000b76:	d59e      	bpl.n	8000ab6 <HAL_RCC_OscConfig+0x2a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b78:	f7ff fd0a 	bl	8000590 <HAL_GetTick>
 8000b7c:	1b80      	subs	r0, r0, r6
 8000b7e:	2864      	cmp	r0, #100	; 0x64
 8000b80:	d9f7      	bls.n	8000b72 <HAL_RCC_OscConfig+0xe6>
 8000b82:	e7e8      	b.n	8000b56 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b88:	682b      	ldr	r3, [r5, #0]
 8000b8a:	d103      	bne.n	8000b94 <HAL_RCC_OscConfig+0x108>
 8000b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b90:	602b      	str	r3, [r5, #0]
 8000b92:	e7d1      	b.n	8000b38 <HAL_RCC_OscConfig+0xac>
 8000b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b98:	602b      	str	r3, [r5, #0]
 8000b9a:	682b      	ldr	r3, [r5, #0]
 8000b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba0:	e7cd      	b.n	8000b3e <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000ba2:	6923      	ldr	r3, [r4, #16]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d904      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x126>
 8000ba8:	f240 11ab 	movw	r1, #427	; 0x1ab
 8000bac:	4860      	ldr	r0, [pc, #384]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000bae:	f7ff fb8c 	bl	80002ca <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000bb2:	6963      	ldr	r3, [r4, #20]
 8000bb4:	2b1f      	cmp	r3, #31
 8000bb6:	d904      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x136>
 8000bb8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8000bbc:	485c      	ldr	r0, [pc, #368]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000bbe:	f7ff fb84 	bl	80002ca <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bc2:	4d5c      	ldr	r5, [pc, #368]	; (8000d34 <HAL_RCC_OscConfig+0x2a8>)
 8000bc4:	686b      	ldr	r3, [r5, #4]
 8000bc6:	f013 0f0c 	tst.w	r3, #12
 8000bca:	d007      	beq.n	8000bdc <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bcc:	686b      	ldr	r3, [r5, #4]
 8000bce:	f003 030c 	and.w	r3, r3, #12
 8000bd2:	2b08      	cmp	r3, #8
 8000bd4:	d110      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x16c>
 8000bd6:	686b      	ldr	r3, [r5, #4]
 8000bd8:	03da      	lsls	r2, r3, #15
 8000bda:	d40d      	bmi.n	8000bf8 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	079b      	lsls	r3, r3, #30
 8000be0:	d502      	bpl.n	8000be8 <HAL_RCC_OscConfig+0x15c>
 8000be2:	6923      	ldr	r3, [r4, #16]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d19f      	bne.n	8000b28 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	6962      	ldr	r2, [r4, #20]
 8000bec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bf0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bf4:	602b      	str	r3, [r5, #0]
 8000bf6:	e761      	b.n	8000abc <HAL_RCC_OscConfig+0x30>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bf8:	6922      	ldr	r2, [r4, #16]
 8000bfa:	4b4f      	ldr	r3, [pc, #316]	; (8000d38 <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	b16a      	cbz	r2, 8000c1a <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_ENABLE();
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c02:	f7ff fcc5 	bl	8000590 <HAL_GetTick>
 8000c06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	079f      	lsls	r7, r3, #30
 8000c0c:	d4ec      	bmi.n	8000be8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0e:	f7ff fcbf 	bl	8000590 <HAL_GetTick>
 8000c12:	1b80      	subs	r0, r0, r6
 8000c14:	2802      	cmp	r0, #2
 8000c16:	d9f7      	bls.n	8000c08 <HAL_RCC_OscConfig+0x17c>
 8000c18:	e79d      	b.n	8000b56 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 8000c1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fcb8 	bl	8000590 <HAL_GetTick>
 8000c20:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c22:	682b      	ldr	r3, [r5, #0]
 8000c24:	0798      	lsls	r0, r3, #30
 8000c26:	f57f af49 	bpl.w	8000abc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c2a:	f7ff fcb1 	bl	8000590 <HAL_GetTick>
 8000c2e:	1b80      	subs	r0, r0, r6
 8000c30:	2802      	cmp	r0, #2
 8000c32:	d9f6      	bls.n	8000c22 <HAL_RCC_OscConfig+0x196>
 8000c34:	e78f      	b.n	8000b56 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000c36:	69a3      	ldr	r3, [r4, #24]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d904      	bls.n	8000c46 <HAL_RCC_OscConfig+0x1ba>
 8000c3c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8000c40:	483b      	ldr	r0, [pc, #236]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c42:	f7ff fb42 	bl	80002ca <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c46:	69a2      	ldr	r2, [r4, #24]
 8000c48:	4d3a      	ldr	r5, [pc, #232]	; (8000d34 <HAL_RCC_OscConfig+0x2a8>)
 8000c4a:	4b3c      	ldr	r3, [pc, #240]	; (8000d3c <HAL_RCC_OscConfig+0x2b0>)
 8000c4c:	b1da      	cbz	r2, 8000c86 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c52:	f7ff fc9d 	bl	8000590 <HAL_GetTick>
 8000c56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c5a:	079b      	lsls	r3, r3, #30
 8000c5c:	d50d      	bpl.n	8000c7a <HAL_RCC_OscConfig+0x1ee>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000c5e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <HAL_RCC_OscConfig+0x2b4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c6a:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000c6c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000c6e:	9b01      	ldr	r3, [sp, #4]
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	9201      	str	r2, [sp, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f9      	bne.n	8000c6c <HAL_RCC_OscConfig+0x1e0>
 8000c78:	e724      	b.n	8000ac4 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c7a:	f7ff fc89 	bl	8000590 <HAL_GetTick>
 8000c7e:	1b80      	subs	r0, r0, r6
 8000c80:	2802      	cmp	r0, #2
 8000c82:	d9e9      	bls.n	8000c58 <HAL_RCC_OscConfig+0x1cc>
 8000c84:	e767      	b.n	8000b56 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_LSI_DISABLE();
 8000c86:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c88:	f7ff fc82 	bl	8000590 <HAL_GetTick>
 8000c8c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c90:	079f      	lsls	r7, r3, #30
 8000c92:	f57f af17 	bpl.w	8000ac4 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c96:	f7ff fc7b 	bl	8000590 <HAL_GetTick>
 8000c9a:	1b80      	subs	r0, r0, r6
 8000c9c:	2802      	cmp	r0, #2
 8000c9e:	d9f6      	bls.n	8000c8e <HAL_RCC_OscConfig+0x202>
 8000ca0:	e759      	b.n	8000b56 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000ca2:	68e3      	ldr	r3, [r4, #12]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d906      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x22a>
 8000ca8:	2b05      	cmp	r3, #5
 8000caa:	d004      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x22a>
 8000cac:	f240 211b 	movw	r1, #539	; 0x21b
 8000cb0:	481f      	ldr	r0, [pc, #124]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000cb2:	f7ff fb0a 	bl	80002ca <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb6:	4d1f      	ldr	r5, [pc, #124]	; (8000d34 <HAL_RCC_OscConfig+0x2a8>)
 8000cb8:	69eb      	ldr	r3, [r5, #28]
 8000cba:	00d8      	lsls	r0, r3, #3
 8000cbc:	d424      	bmi.n	8000d08 <HAL_RCC_OscConfig+0x27c>
      pwrclkchanged = SET;
 8000cbe:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cc0:	69eb      	ldr	r3, [r5, #28]
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	61eb      	str	r3, [r5, #28]
 8000cc8:	69eb      	ldr	r3, [r5, #28]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd2:	4e1c      	ldr	r6, [pc, #112]	; (8000d44 <HAL_RCC_OscConfig+0x2b8>)
 8000cd4:	6833      	ldr	r3, [r6, #0]
 8000cd6:	05d9      	lsls	r1, r3, #23
 8000cd8:	d518      	bpl.n	8000d0c <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cda:	68e3      	ldr	r3, [r4, #12]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d133      	bne.n	8000d48 <HAL_RCC_OscConfig+0x2bc>
 8000ce0:	6a2b      	ldr	r3, [r5, #32]
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000ce8:	f7ff fc52 	bl	8000590 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cec:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cf0:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cf2:	6a2b      	ldr	r3, [r5, #32]
 8000cf4:	079b      	lsls	r3, r3, #30
 8000cf6:	d54c      	bpl.n	8000d92 <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 8000cf8:	2f00      	cmp	r7, #0
 8000cfa:	f43f aee7 	beq.w	8000acc <HAL_RCC_OscConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cfe:	69eb      	ldr	r3, [r5, #28]
 8000d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d04:	61eb      	str	r3, [r5, #28]
 8000d06:	e6e1      	b.n	8000acc <HAL_RCC_OscConfig+0x40>
    FlagStatus       pwrclkchanged = RESET;
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e7e2      	b.n	8000cd2 <HAL_RCC_OscConfig+0x246>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d0c:	6833      	ldr	r3, [r6, #0]
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d14:	f7ff fc3c 	bl	8000590 <HAL_GetTick>
 8000d18:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d1a:	6833      	ldr	r3, [r6, #0]
 8000d1c:	05da      	lsls	r2, r3, #23
 8000d1e:	d4dc      	bmi.n	8000cda <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d20:	f7ff fc36 	bl	8000590 <HAL_GetTick>
 8000d24:	eba0 0008 	sub.w	r0, r0, r8
 8000d28:	2864      	cmp	r0, #100	; 0x64
 8000d2a:	d9f6      	bls.n	8000d1a <HAL_RCC_OscConfig+0x28e>
 8000d2c:	e713      	b.n	8000b56 <HAL_RCC_OscConfig+0xca>
 8000d2e:	bf00      	nop
 8000d30:	08001ea8 	.word	0x08001ea8
 8000d34:	40021000 	.word	0x40021000
 8000d38:	42420000 	.word	0x42420000
 8000d3c:	42420480 	.word	0x42420480
 8000d40:	20000014 	.word	0x20000014
 8000d44:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d48:	b9ab      	cbnz	r3, 8000d76 <HAL_RCC_OscConfig+0x2ea>
 8000d4a:	6a2b      	ldr	r3, [r5, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d4c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d50:	f023 0301 	bic.w	r3, r3, #1
 8000d54:	622b      	str	r3, [r5, #32]
 8000d56:	6a2b      	ldr	r3, [r5, #32]
 8000d58:	f023 0304 	bic.w	r3, r3, #4
 8000d5c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000d5e:	f7ff fc17 	bl	8000590 <HAL_GetTick>
 8000d62:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d64:	6a2b      	ldr	r3, [r5, #32]
 8000d66:	0798      	lsls	r0, r3, #30
 8000d68:	d5c6      	bpl.n	8000cf8 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d6a:	f7ff fc11 	bl	8000590 <HAL_GetTick>
 8000d6e:	1b80      	subs	r0, r0, r6
 8000d70:	4540      	cmp	r0, r8
 8000d72:	d9f7      	bls.n	8000d64 <HAL_RCC_OscConfig+0x2d8>
 8000d74:	e6ef      	b.n	8000b56 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d76:	2b05      	cmp	r3, #5
 8000d78:	6a2b      	ldr	r3, [r5, #32]
 8000d7a:	d103      	bne.n	8000d84 <HAL_RCC_OscConfig+0x2f8>
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	622b      	str	r3, [r5, #32]
 8000d82:	e7ad      	b.n	8000ce0 <HAL_RCC_OscConfig+0x254>
 8000d84:	f023 0301 	bic.w	r3, r3, #1
 8000d88:	622b      	str	r3, [r5, #32]
 8000d8a:	6a2b      	ldr	r3, [r5, #32]
 8000d8c:	f023 0304 	bic.w	r3, r3, #4
 8000d90:	e7a9      	b.n	8000ce6 <HAL_RCC_OscConfig+0x25a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d92:	f7ff fbfd 	bl	8000590 <HAL_GetTick>
 8000d96:	eba0 0008 	sub.w	r0, r0, r8
 8000d9a:	42b0      	cmp	r0, r6
 8000d9c:	d9a9      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x266>
 8000d9e:	e6da      	b.n	8000b56 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000da0:	4d38      	ldr	r5, [pc, #224]	; (8000e84 <HAL_RCC_OscConfig+0x3f8>)
 8000da2:	686b      	ldr	r3, [r5, #4]
 8000da4:	f003 030c 	and.w	r3, r3, #12
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	f43f aebd 	beq.w	8000b28 <HAL_RCC_OscConfig+0x9c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dae:	2a02      	cmp	r2, #2
 8000db0:	4e35      	ldr	r6, [pc, #212]	; (8000e88 <HAL_RCC_OscConfig+0x3fc>)
 8000db2:	d157      	bne.n	8000e64 <HAL_RCC_OscConfig+0x3d8>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8000db4:	6a23      	ldr	r3, [r4, #32]
 8000db6:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8000dba:	d004      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x33a>
 8000dbc:	f240 21c2 	movw	r1, #706	; 0x2c2
 8000dc0:	4832      	ldr	r0, [pc, #200]	; (8000e8c <HAL_RCC_OscConfig+0x400>)
 8000dc2:	f7ff fa82 	bl	80002ca <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8000dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dc8:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 8000dcc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8000dd0:	d010      	beq.n	8000df4 <HAL_RCC_OscConfig+0x368>
 8000dd2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8000dd6:	d00d      	beq.n	8000df4 <HAL_RCC_OscConfig+0x368>
 8000dd8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000ddc:	d00a      	beq.n	8000df4 <HAL_RCC_OscConfig+0x368>
 8000dde:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8000de2:	d007      	beq.n	8000df4 <HAL_RCC_OscConfig+0x368>
 8000de4:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8000de8:	d004      	beq.n	8000df4 <HAL_RCC_OscConfig+0x368>
 8000dea:	f240 21c3 	movw	r1, #707	; 0x2c3
 8000dee:	4827      	ldr	r0, [pc, #156]	; (8000e8c <HAL_RCC_OscConfig+0x400>)
 8000df0:	f7ff fa6b 	bl	80002ca <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000df8:	f7ff fbca 	bl	8000590 <HAL_GetTick>
 8000dfc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dfe:	682b      	ldr	r3, [r5, #0]
 8000e00:	0199      	lsls	r1, r3, #6
 8000e02:	d429      	bmi.n	8000e58 <HAL_RCC_OscConfig+0x3cc>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e04:	6a23      	ldr	r3, [r4, #32]
 8000e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0a:	d10e      	bne.n	8000e2a <HAL_RCC_OscConfig+0x39e>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8000e0c:	68a3      	ldr	r3, [r4, #8]
 8000e0e:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8000e12:	d004      	beq.n	8000e1e <HAL_RCC_OscConfig+0x392>
 8000e14:	f240 21d9 	movw	r1, #729	; 0x2d9
 8000e18:	481c      	ldr	r0, [pc, #112]	; (8000e8c <HAL_RCC_OscConfig+0x400>)
 8000e1a:	f7ff fa56 	bl	80002ca <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e1e:	686b      	ldr	r3, [r5, #4]
 8000e20:	68a2      	ldr	r2, [r4, #8]
 8000e22:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e26:	4313      	orrs	r3, r2
 8000e28:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e2a:	6a23      	ldr	r3, [r4, #32]
 8000e2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e2e:	686a      	ldr	r2, [r5, #4]
 8000e30:	430b      	orrs	r3, r1
 8000e32:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000e36:	4313      	orrs	r3, r2
 8000e38:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e3e:	f7ff fba7 	bl	8000590 <HAL_GetTick>
 8000e42:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	019a      	lsls	r2, r3, #6
 8000e48:	f53f ae4c 	bmi.w	8000ae4 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e4c:	f7ff fba0 	bl	8000590 <HAL_GetTick>
 8000e50:	1b00      	subs	r0, r0, r4
 8000e52:	2802      	cmp	r0, #2
 8000e54:	d9f6      	bls.n	8000e44 <HAL_RCC_OscConfig+0x3b8>
 8000e56:	e67e      	b.n	8000b56 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e58:	f7ff fb9a 	bl	8000590 <HAL_GetTick>
 8000e5c:	1bc0      	subs	r0, r0, r7
 8000e5e:	2802      	cmp	r0, #2
 8000e60:	d9cd      	bls.n	8000dfe <HAL_RCC_OscConfig+0x372>
 8000e62:	e678      	b.n	8000b56 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PLL_DISABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e68:	f7ff fb92 	bl	8000590 <HAL_GetTick>
 8000e6c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e6e:	682b      	ldr	r3, [r5, #0]
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	f57f ae37 	bpl.w	8000ae4 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e76:	f7ff fb8b 	bl	8000590 <HAL_GetTick>
 8000e7a:	1b00      	subs	r0, r0, r4
 8000e7c:	2802      	cmp	r0, #2
 8000e7e:	d9f6      	bls.n	8000e6e <HAL_RCC_OscConfig+0x3e2>
 8000e80:	e669      	b.n	8000b56 <HAL_RCC_OscConfig+0xca>
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
 8000e88:	42420060 	.word	0x42420060
 8000e8c:	08001ea8 	.word	0x08001ea8

08000e90 <HAL_RCC_GetSysClockFreq>:
{
 8000e90:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000e94:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e96:	ac02      	add	r4, sp, #8
 8000e98:	f103 0510 	add.w	r5, r3, #16
 8000e9c:	4622      	mov	r2, r4
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	6859      	ldr	r1, [r3, #4]
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	c203      	stmia	r2!, {r0, r1}
 8000ea6:	42ab      	cmp	r3, r5
 8000ea8:	4614      	mov	r4, r2
 8000eaa:	d1f7      	bne.n	8000e9c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000eac:	2301      	movs	r3, #1
 8000eae:	f88d 3004 	strb.w	r3, [sp, #4]
 8000eb2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000eb4:	4911      	ldr	r1, [pc, #68]	; (8000efc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000eb6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000eba:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ebc:	f003 020c 	and.w	r2, r3, #12
 8000ec0:	2a08      	cmp	r2, #8
 8000ec2:	d117      	bne.n	8000ef4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ec4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000ec8:	a806      	add	r0, sp, #24
 8000eca:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ecc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ece:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ed2:	d50c      	bpl.n	8000eee <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ed4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ed6:	480a      	ldr	r0, [pc, #40]	; (8000f00 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ed8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000edc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ede:	aa06      	add	r2, sp, #24
 8000ee0:	4413      	add	r3, r2
 8000ee2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ee6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000eea:	b007      	add	sp, #28
 8000eec:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ef0:	4350      	muls	r0, r2
 8000ef2:	e7fa      	b.n	8000eea <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000ef6:	e7f8      	b.n	8000eea <HAL_RCC_GetSysClockFreq+0x5a>
 8000ef8:	08001e0c 	.word	0x08001e0c
 8000efc:	40021000 	.word	0x40021000
 8000f00:	007a1200 	.word	0x007a1200
 8000f04:	003d0900 	.word	0x003d0900

08000f08 <HAL_RCC_ClockConfig>:
{
 8000f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f0c:	460e      	mov	r6, r1
  assert_param(RCC_ClkInitStruct != NULL);
 8000f0e:	4604      	mov	r4, r0
 8000f10:	b920      	cbnz	r0, 8000f1c <HAL_RCC_ClockConfig+0x14>
 8000f12:	f240 312e 	movw	r1, #814	; 0x32e
 8000f16:	487f      	ldr	r0, [pc, #508]	; (8001114 <HAL_RCC_ClockConfig+0x20c>)
 8000f18:	f7ff f9d7 	bl	80002ca <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	071d      	lsls	r5, r3, #28
 8000f20:	d104      	bne.n	8000f2c <HAL_RCC_ClockConfig+0x24>
 8000f22:	f240 312f 	movw	r1, #815	; 0x32f
 8000f26:	487b      	ldr	r0, [pc, #492]	; (8001114 <HAL_RCC_ClockConfig+0x20c>)
 8000f28:	f7ff f9cf 	bl	80002ca <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8000f2c:	2e02      	cmp	r6, #2
 8000f2e:	d904      	bls.n	8000f3a <HAL_RCC_ClockConfig+0x32>
 8000f30:	f44f 714c 	mov.w	r1, #816	; 0x330
 8000f34:	4877      	ldr	r0, [pc, #476]	; (8001114 <HAL_RCC_ClockConfig+0x20c>)
 8000f36:	f7ff f9c8 	bl	80002ca <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f3a:	4a77      	ldr	r2, [pc, #476]	; (8001118 <HAL_RCC_ClockConfig+0x210>)
 8000f3c:	6813      	ldr	r3, [r2, #0]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	429e      	cmp	r6, r3
 8000f44:	d83d      	bhi.n	8000fc2 <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	0798      	lsls	r0, r3, #30
 8000f4a:	d447      	bmi.n	8000fdc <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	07da      	lsls	r2, r3, #31
 8000f50:	d470      	bmi.n	8001034 <HAL_RCC_ClockConfig+0x12c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f52:	4a71      	ldr	r2, [pc, #452]	; (8001118 <HAL_RCC_ClockConfig+0x210>)
 8000f54:	6813      	ldr	r3, [r2, #0]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	429e      	cmp	r6, r3
 8000f5c:	f0c0 80b5 	bcc.w	80010ca <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	4d6e      	ldr	r5, [pc, #440]	; (800111c <HAL_RCC_ClockConfig+0x214>)
 8000f64:	f013 0f04 	tst.w	r3, #4
 8000f68:	f040 80bb 	bne.w	80010e2 <HAL_RCC_ClockConfig+0x1da>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	071b      	lsls	r3, r3, #28
 8000f70:	d517      	bpl.n	8000fa2 <HAL_RCC_ClockConfig+0x9a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8000f72:	6923      	ldr	r3, [r4, #16]
 8000f74:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8000f78:	d00c      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x8c>
 8000f7a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f7e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000f82:	d007      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x8c>
 8000f84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000f88:	d004      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x8c>
 8000f8a:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 8000f8e:	4861      	ldr	r0, [pc, #388]	; (8001114 <HAL_RCC_ClockConfig+0x20c>)
 8000f90:	f7ff f99b 	bl	80002ca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f94:	686b      	ldr	r3, [r5, #4]
 8000f96:	6922      	ldr	r2, [r4, #16]
 8000f98:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f9c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fa0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fa2:	f7ff ff75 	bl	8000e90 <HAL_RCC_GetSysClockFreq>
 8000fa6:	686b      	ldr	r3, [r5, #4]
 8000fa8:	4a5d      	ldr	r2, [pc, #372]	; (8001120 <HAL_RCC_ClockConfig+0x218>)
 8000faa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fae:	5cd3      	ldrb	r3, [r2, r3]
 8000fb0:	40d8      	lsrs	r0, r3
 8000fb2:	4b5c      	ldr	r3, [pc, #368]	; (8001124 <HAL_RCC_ClockConfig+0x21c>)
 8000fb4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff faa8 	bl	800050c <HAL_InitTick>
  return HAL_OK;
 8000fbc:	2000      	movs	r0, #0
}
 8000fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fc2:	6813      	ldr	r3, [r2, #0]
 8000fc4:	f023 0307 	bic.w	r3, r3, #7
 8000fc8:	4333      	orrs	r3, r6
 8000fca:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fcc:	6813      	ldr	r3, [r2, #0]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	429e      	cmp	r6, r3
 8000fd4:	d0b7      	beq.n	8000f46 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fdc:	4d4f      	ldr	r5, [pc, #316]	; (800111c <HAL_RCC_ClockConfig+0x214>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fde:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fe2:	bf1e      	ittt	ne
 8000fe4:	686a      	ldrne	r2, [r5, #4]
 8000fe6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000fea:	606a      	strne	r2, [r5, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fec:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fee:	bf42      	ittt	mi
 8000ff0:	686b      	ldrmi	r3, [r5, #4]
 8000ff2:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8000ff6:	606b      	strmi	r3, [r5, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000ff8:	68a3      	ldr	r3, [r4, #8]
 8000ffa:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8000ffe:	d012      	beq.n	8001026 <HAL_RCC_ClockConfig+0x11e>
 8001000:	f023 0220 	bic.w	r2, r3, #32
 8001004:	2a90      	cmp	r2, #144	; 0x90
 8001006:	d00e      	beq.n	8001026 <HAL_RCC_ClockConfig+0x11e>
 8001008:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800100c:	2aa0      	cmp	r2, #160	; 0xa0
 800100e:	d00a      	beq.n	8001026 <HAL_RCC_ClockConfig+0x11e>
 8001010:	f023 0210 	bic.w	r2, r3, #16
 8001014:	2ac0      	cmp	r2, #192	; 0xc0
 8001016:	d006      	beq.n	8001026 <HAL_RCC_ClockConfig+0x11e>
 8001018:	2bf0      	cmp	r3, #240	; 0xf0
 800101a:	d004      	beq.n	8001026 <HAL_RCC_ClockConfig+0x11e>
 800101c:	f240 3156 	movw	r1, #854	; 0x356
 8001020:	483c      	ldr	r0, [pc, #240]	; (8001114 <HAL_RCC_ClockConfig+0x20c>)
 8001022:	f7ff f952 	bl	80002ca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001026:	686b      	ldr	r3, [r5, #4]
 8001028:	68a2      	ldr	r2, [r4, #8]
 800102a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800102e:	4313      	orrs	r3, r2
 8001030:	606b      	str	r3, [r5, #4]
 8001032:	e78b      	b.n	8000f4c <HAL_RCC_ClockConfig+0x44>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001034:	6863      	ldr	r3, [r4, #4]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d904      	bls.n	8001044 <HAL_RCC_ClockConfig+0x13c>
 800103a:	f240 315d 	movw	r1, #861	; 0x35d
 800103e:	4835      	ldr	r0, [pc, #212]	; (8001114 <HAL_RCC_ClockConfig+0x20c>)
 8001040:	f7ff f943 	bl	80002ca <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001044:	6862      	ldr	r2, [r4, #4]
 8001046:	4d35      	ldr	r5, [pc, #212]	; (800111c <HAL_RCC_ClockConfig+0x214>)
 8001048:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104a:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800104c:	d11d      	bne.n	800108a <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001052:	d0c0      	beq.n	8000fd6 <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001054:	686b      	ldr	r3, [r5, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001056:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800105a:	f023 0303 	bic.w	r3, r3, #3
 800105e:	4313      	orrs	r3, r2
 8001060:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001062:	f7ff fa95 	bl	8000590 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001066:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001068:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106a:	2b01      	cmp	r3, #1
 800106c:	d115      	bne.n	800109a <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800106e:	686b      	ldr	r3, [r5, #4]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b04      	cmp	r3, #4
 8001076:	f43f af6c 	beq.w	8000f52 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800107a:	f7ff fa89 	bl	8000590 <HAL_GetTick>
 800107e:	1bc0      	subs	r0, r0, r7
 8001080:	4540      	cmp	r0, r8
 8001082:	d9f4      	bls.n	800106e <HAL_RCC_ClockConfig+0x166>
          return HAL_TIMEOUT;
 8001084:	2003      	movs	r0, #3
 8001086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800108a:	2a02      	cmp	r2, #2
 800108c:	d102      	bne.n	8001094 <HAL_RCC_ClockConfig+0x18c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001092:	e7de      	b.n	8001052 <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	f013 0f02 	tst.w	r3, #2
 8001098:	e7db      	b.n	8001052 <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800109a:	2b02      	cmp	r3, #2
 800109c:	d110      	bne.n	80010c0 <HAL_RCC_ClockConfig+0x1b8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800109e:	686b      	ldr	r3, [r5, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	f43f af54 	beq.w	8000f52 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010aa:	f7ff fa71 	bl	8000590 <HAL_GetTick>
 80010ae:	1bc0      	subs	r0, r0, r7
 80010b0:	4540      	cmp	r0, r8
 80010b2:	d9f4      	bls.n	800109e <HAL_RCC_ClockConfig+0x196>
 80010b4:	e7e6      	b.n	8001084 <HAL_RCC_ClockConfig+0x17c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b6:	f7ff fa6b 	bl	8000590 <HAL_GetTick>
 80010ba:	1bc0      	subs	r0, r0, r7
 80010bc:	4540      	cmp	r0, r8
 80010be:	d8e1      	bhi.n	8001084 <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010c0:	686b      	ldr	r3, [r5, #4]
 80010c2:	f013 0f0c 	tst.w	r3, #12
 80010c6:	d1f6      	bne.n	80010b6 <HAL_RCC_ClockConfig+0x1ae>
 80010c8:	e743      	b.n	8000f52 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ca:	6813      	ldr	r3, [r2, #0]
 80010cc:	f023 0307 	bic.w	r3, r3, #7
 80010d0:	4333      	orrs	r3, r6
 80010d2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010d4:	6813      	ldr	r3, [r2, #0]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	429e      	cmp	r6, r3
 80010dc:	f47f af7b 	bne.w	8000fd6 <HAL_RCC_ClockConfig+0xce>
 80010e0:	e73e      	b.n	8000f60 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80010e2:	68e3      	ldr	r3, [r4, #12]
 80010e4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80010e8:	d00c      	beq.n	8001104 <HAL_RCC_ClockConfig+0x1fc>
 80010ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80010ee:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80010f2:	d007      	beq.n	8001104 <HAL_RCC_ClockConfig+0x1fc>
 80010f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80010f8:	d004      	beq.n	8001104 <HAL_RCC_ClockConfig+0x1fc>
 80010fa:	f240 31b1 	movw	r1, #945	; 0x3b1
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_RCC_ClockConfig+0x20c>)
 8001100:	f7ff f8e3 	bl	80002ca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001104:	686b      	ldr	r3, [r5, #4]
 8001106:	68e2      	ldr	r2, [r4, #12]
 8001108:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800110c:	4313      	orrs	r3, r2
 800110e:	606b      	str	r3, [r5, #4]
 8001110:	e72c      	b.n	8000f6c <HAL_RCC_ClockConfig+0x64>
 8001112:	bf00      	nop
 8001114:	08001ea8 	.word	0x08001ea8
 8001118:	40022000 	.word	0x40022000
 800111c:	40021000 	.word	0x40021000
 8001120:	08001e1c 	.word	0x08001e1c
 8001124:	20000014 	.word	0x20000014

08001128 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_RCC_GetPCLK1Freq+0x14>)
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <HAL_RCC_GetPCLK1Freq+0x18>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001132:	5cd3      	ldrb	r3, [r2, r3]
 8001134:	4a03      	ldr	r2, [pc, #12]	; (8001144 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001136:	6810      	ldr	r0, [r2, #0]
}    
 8001138:	40d8      	lsrs	r0, r3
 800113a:	4770      	bx	lr
 800113c:	40021000 	.word	0x40021000
 8001140:	08001e2c 	.word	0x08001e2c
 8001144:	20000014 	.word	0x20000014

08001148 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_RCC_GetPCLK2Freq+0x14>)
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <HAL_RCC_GetPCLK2Freq+0x18>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001152:	5cd3      	ldrb	r3, [r2, r3]
 8001154:	4a03      	ldr	r2, [pc, #12]	; (8001164 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001156:	6810      	ldr	r0, [r2, #0]
} 
 8001158:	40d8      	lsrs	r0, r3
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000
 8001160:	08001e2c 	.word	0x08001e2c
 8001164:	20000014 	.word	0x20000014

08001168 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001168:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800116c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800116e:	2b01      	cmp	r3, #1
{
 8001170:	4605      	mov	r5, r0
 8001172:	460c      	mov	r4, r1
 8001174:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001178:	d02e      	beq.n	80011d8 <HAL_TIM_ConfigClockSource+0x70>
 800117a:	2301      	movs	r3, #1
 800117c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8001180:	680b      	ldr	r3, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001182:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8001186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118a:	d00c      	beq.n	80011a6 <HAL_TIM_ConfigClockSource+0x3e>
 800118c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001190:	d009      	beq.n	80011a6 <HAL_TIM_ConfigClockSource+0x3e>
 8001192:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8001196:	d006      	beq.n	80011a6 <HAL_TIM_ConfigClockSource+0x3e>
 8001198:	2b40      	cmp	r3, #64	; 0x40
 800119a:	d004      	beq.n	80011a6 <HAL_TIM_ConfigClockSource+0x3e>
 800119c:	f640 7171 	movw	r1, #3953	; 0xf71
 80011a0:	48b5      	ldr	r0, [pc, #724]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 80011a2:	f7ff f892 	bl	80002ca <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80011a6:	682b      	ldr	r3, [r5, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011aa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80011ae:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80011b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80011b4:	6822      	ldr	r2, [r4, #0]
 80011b6:	2a40      	cmp	r2, #64	; 0x40
 80011b8:	f000 8162 	beq.w	8001480 <HAL_TIM_ConfigClockSource+0x318>
 80011bc:	d82c      	bhi.n	8001218 <HAL_TIM_ConfigClockSource+0xb0>
 80011be:	2a10      	cmp	r2, #16
 80011c0:	f000 81b9 	beq.w	8001536 <HAL_TIM_ConfigClockSource+0x3ce>
 80011c4:	d809      	bhi.n	80011da <HAL_TIM_ConfigClockSource+0x72>
 80011c6:	2a00      	cmp	r2, #0
 80011c8:	f000 819b 	beq.w	8001502 <HAL_TIM_ConfigClockSource+0x39a>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80011cc:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80011ce:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80011d0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80011d4:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c

  return HAL_OK;
}
 80011d8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80011da:	2a20      	cmp	r2, #32
 80011dc:	f000 81c5 	beq.w	800156a <HAL_TIM_ConfigClockSource+0x402>
 80011e0:	2a30      	cmp	r2, #48	; 0x30
 80011e2:	d1f3      	bne.n	80011cc <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80011e4:	4aa5      	ldr	r2, [pc, #660]	; (800147c <HAL_TIM_ConfigClockSource+0x314>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00f      	beq.n	800120a <HAL_TIM_ConfigClockSource+0xa2>
 80011ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ee:	d00c      	beq.n	800120a <HAL_TIM_ConfigClockSource+0xa2>
 80011f0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d008      	beq.n	800120a <HAL_TIM_ConfigClockSource+0xa2>
 80011f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d004      	beq.n	800120a <HAL_TIM_ConfigClockSource+0xa2>
 8001200:	f640 71f9 	movw	r1, #4089	; 0xff9
 8001204:	489c      	ldr	r0, [pc, #624]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 8001206:	f7ff f860 	bl	80002ca <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800120a:	682a      	ldr	r2, [r5, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800120c:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800120e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001212:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001216:	e0a9      	b.n	800136c <HAL_TIM_ConfigClockSource+0x204>
  switch (sClockSourceConfig->ClockSource)
 8001218:	2a70      	cmp	r2, #112	; 0x70
 800121a:	f000 80a9 	beq.w	8001370 <HAL_TIM_ConfigClockSource+0x208>
 800121e:	d846      	bhi.n	80012ae <HAL_TIM_ConfigClockSource+0x146>
 8001220:	2a50      	cmp	r2, #80	; 0x50
 8001222:	f000 80e7 	beq.w	80013f4 <HAL_TIM_ConfigClockSource+0x28c>
 8001226:	2a60      	cmp	r2, #96	; 0x60
 8001228:	d1d0      	bne.n	80011cc <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800122a:	4a94      	ldr	r2, [pc, #592]	; (800147c <HAL_TIM_ConfigClockSource+0x314>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d00f      	beq.n	8001250 <HAL_TIM_ConfigClockSource+0xe8>
 8001230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001234:	d00c      	beq.n	8001250 <HAL_TIM_ConfigClockSource+0xe8>
 8001236:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800123a:	4293      	cmp	r3, r2
 800123c:	d008      	beq.n	8001250 <HAL_TIM_ConfigClockSource+0xe8>
 800123e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001242:	4293      	cmp	r3, r2
 8001244:	d004      	beq.n	8001250 <HAL_TIM_ConfigClockSource+0xe8>
 8001246:	f640 71c3 	movw	r1, #4035	; 0xfc3
 800124a:	488b      	ldr	r0, [pc, #556]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 800124c:	f7ff f83d 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8001250:	6863      	ldr	r3, [r4, #4]
 8001252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001256:	d009      	beq.n	800126c <HAL_TIM_ConfigClockSource+0x104>
 8001258:	f033 0202 	bics.w	r2, r3, #2
 800125c:	d006      	beq.n	800126c <HAL_TIM_ConfigClockSource+0x104>
 800125e:	2b0a      	cmp	r3, #10
 8001260:	d004      	beq.n	800126c <HAL_TIM_ConfigClockSource+0x104>
 8001262:	f640 71c6 	movw	r1, #4038	; 0xfc6
 8001266:	4884      	ldr	r0, [pc, #528]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 8001268:	f7ff f82f 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800126c:	68e3      	ldr	r3, [r4, #12]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	d904      	bls.n	800127c <HAL_TIM_ConfigClockSource+0x114>
 8001272:	f640 71c7 	movw	r1, #4039	; 0xfc7
 8001276:	4880      	ldr	r0, [pc, #512]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 8001278:	f7ff f827 	bl	80002ca <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001280:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001282:	68e4      	ldr	r4, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001284:	f020 0010 	bic.w	r0, r0, #16
 8001288:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800128a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800128c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800128e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001292:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001296:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800129a:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800129e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80012a0:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80012a2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012a8:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80012ac:	e0e2      	b.n	8001474 <HAL_TIM_ConfigClockSource+0x30c>
  switch (sClockSourceConfig->ClockSource)
 80012ae:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80012b2:	d044      	beq.n	800133e <HAL_TIM_ConfigClockSource+0x1d6>
 80012b4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80012b8:	d188      	bne.n	80011cc <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80012ba:	4a70      	ldr	r2, [pc, #448]	; (800147c <HAL_TIM_ConfigClockSource+0x314>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00f      	beq.n	80012e0 <HAL_TIM_ConfigClockSource+0x178>
 80012c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c4:	d00c      	beq.n	80012e0 <HAL_TIM_ConfigClockSource+0x178>
 80012c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d008      	beq.n	80012e0 <HAL_TIM_ConfigClockSource+0x178>
 80012ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d004      	beq.n	80012e0 <HAL_TIM_ConfigClockSource+0x178>
 80012d6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80012da:	4867      	ldr	r0, [pc, #412]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 80012dc:	f7fe fff5 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80012e0:	68a3      	ldr	r3, [r4, #8]
 80012e2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80012e6:	d004      	beq.n	80012f2 <HAL_TIM_ConfigClockSource+0x18a>
 80012e8:	f640 71a3 	movw	r1, #4003	; 0xfa3
 80012ec:	4862      	ldr	r0, [pc, #392]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 80012ee:	f7fe ffec 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80012f2:	6863      	ldr	r3, [r4, #4]
 80012f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012f8:	d009      	beq.n	800130e <HAL_TIM_ConfigClockSource+0x1a6>
 80012fa:	f033 0202 	bics.w	r2, r3, #2
 80012fe:	d006      	beq.n	800130e <HAL_TIM_ConfigClockSource+0x1a6>
 8001300:	2b0a      	cmp	r3, #10
 8001302:	d004      	beq.n	800130e <HAL_TIM_ConfigClockSource+0x1a6>
 8001304:	f640 71a4 	movw	r1, #4004	; 0xfa4
 8001308:	485b      	ldr	r0, [pc, #364]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 800130a:	f7fe ffde 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800130e:	68e3      	ldr	r3, [r4, #12]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d904      	bls.n	800131e <HAL_TIM_ConfigClockSource+0x1b6>
 8001314:	f640 71a5 	movw	r1, #4005	; 0xfa5
 8001318:	4857      	ldr	r0, [pc, #348]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 800131a:	f7fe ffd6 	bl	80002ca <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800131e:	682a      	ldr	r2, [r5, #0]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001320:	6860      	ldr	r0, [r4, #4]
 8001322:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr = TIMx->SMCR;
 8001324:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001326:	4303      	orrs	r3, r0
 8001328:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800132a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800132e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001332:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001334:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001336:	6893      	ldr	r3, [r2, #8]
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	e016      	b.n	800136c <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800133e:	4a4f      	ldr	r2, [pc, #316]	; (800147c <HAL_TIM_ConfigClockSource+0x314>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00f      	beq.n	8001364 <HAL_TIM_ConfigClockSource+0x1fc>
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001348:	d00c      	beq.n	8001364 <HAL_TIM_ConfigClockSource+0x1fc>
 800134a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800134e:	4293      	cmp	r3, r2
 8001350:	d008      	beq.n	8001364 <HAL_TIM_ConfigClockSource+0x1fc>
 8001352:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001356:	4293      	cmp	r3, r2
 8001358:	d004      	beq.n	8001364 <HAL_TIM_ConfigClockSource+0x1fc>
 800135a:	f640 717d 	movw	r1, #3965	; 0xf7d
 800135e:	4846      	ldr	r0, [pc, #280]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 8001360:	f7fe ffb3 	bl	80002ca <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001364:	682a      	ldr	r2, [r5, #0]
 8001366:	6893      	ldr	r3, [r2, #8]
 8001368:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800136c:	6093      	str	r3, [r2, #8]
 800136e:	e72d      	b.n	80011cc <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8001370:	4a42      	ldr	r2, [pc, #264]	; (800147c <HAL_TIM_ConfigClockSource+0x314>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d00f      	beq.n	8001396 <HAL_TIM_ConfigClockSource+0x22e>
 8001376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800137a:	d00c      	beq.n	8001396 <HAL_TIM_ConfigClockSource+0x22e>
 800137c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001380:	4293      	cmp	r3, r2
 8001382:	d008      	beq.n	8001396 <HAL_TIM_ConfigClockSource+0x22e>
 8001384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001388:	4293      	cmp	r3, r2
 800138a:	d004      	beq.n	8001396 <HAL_TIM_ConfigClockSource+0x22e>
 800138c:	f640 7186 	movw	r1, #3974	; 0xf86
 8001390:	4839      	ldr	r0, [pc, #228]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 8001392:	f7fe ff9a 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8001396:	68a3      	ldr	r3, [r4, #8]
 8001398:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800139c:	d004      	beq.n	80013a8 <HAL_TIM_ConfigClockSource+0x240>
 800139e:	f640 7189 	movw	r1, #3977	; 0xf89
 80013a2:	4835      	ldr	r0, [pc, #212]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 80013a4:	f7fe ff91 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80013a8:	6863      	ldr	r3, [r4, #4]
 80013aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ae:	d009      	beq.n	80013c4 <HAL_TIM_ConfigClockSource+0x25c>
 80013b0:	f033 0202 	bics.w	r2, r3, #2
 80013b4:	d006      	beq.n	80013c4 <HAL_TIM_ConfigClockSource+0x25c>
 80013b6:	2b0a      	cmp	r3, #10
 80013b8:	d004      	beq.n	80013c4 <HAL_TIM_ConfigClockSource+0x25c>
 80013ba:	f640 718a 	movw	r1, #3978	; 0xf8a
 80013be:	482e      	ldr	r0, [pc, #184]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 80013c0:	f7fe ff83 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80013c4:	68e3      	ldr	r3, [r4, #12]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	d904      	bls.n	80013d4 <HAL_TIM_ConfigClockSource+0x26c>
 80013ca:	f640 718b 	movw	r1, #3979	; 0xf8b
 80013ce:	482a      	ldr	r0, [pc, #168]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 80013d0:	f7fe ff7b 	bl	80002ca <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80013d4:	682a      	ldr	r2, [r5, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013d6:	6860      	ldr	r0, [r4, #4]
 80013d8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr = TIMx->SMCR;
 80013da:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013dc:	4303      	orrs	r3, r0
 80013de:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80013e0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013e4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80013e8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80013ea:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80013ec:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80013ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80013f2:	e7bb      	b.n	800136c <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80013f4:	4a21      	ldr	r2, [pc, #132]	; (800147c <HAL_TIM_ConfigClockSource+0x314>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00f      	beq.n	800141a <HAL_TIM_ConfigClockSource+0x2b2>
 80013fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013fe:	d00c      	beq.n	800141a <HAL_TIM_ConfigClockSource+0x2b2>
 8001400:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001404:	4293      	cmp	r3, r2
 8001406:	d008      	beq.n	800141a <HAL_TIM_ConfigClockSource+0x2b2>
 8001408:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800140c:	4293      	cmp	r3, r2
 800140e:	d004      	beq.n	800141a <HAL_TIM_ConfigClockSource+0x2b2>
 8001410:	f640 71b4 	movw	r1, #4020	; 0xfb4
 8001414:	4818      	ldr	r0, [pc, #96]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 8001416:	f7fe ff58 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800141a:	6863      	ldr	r3, [r4, #4]
 800141c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001420:	d009      	beq.n	8001436 <HAL_TIM_ConfigClockSource+0x2ce>
 8001422:	f033 0202 	bics.w	r2, r3, #2
 8001426:	d006      	beq.n	8001436 <HAL_TIM_ConfigClockSource+0x2ce>
 8001428:	2b0a      	cmp	r3, #10
 800142a:	d004      	beq.n	8001436 <HAL_TIM_ConfigClockSource+0x2ce>
 800142c:	f640 71b7 	movw	r1, #4023	; 0xfb7
 8001430:	4811      	ldr	r0, [pc, #68]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 8001432:	f7fe ff4a 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8001436:	68e3      	ldr	r3, [r4, #12]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d904      	bls.n	8001446 <HAL_TIM_ConfigClockSource+0x2de>
 800143c:	f640 71b8 	movw	r1, #4024	; 0xfb8
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <HAL_TIM_ConfigClockSource+0x310>)
 8001442:	f7fe ff42 	bl	80002ca <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001446:	682b      	ldr	r3, [r5, #0]
 8001448:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 800144a:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800144c:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800144e:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001450:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001454:	f024 0401 	bic.w	r4, r4, #1
 8001458:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800145a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800145c:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800145e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001462:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001468:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800146a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800146c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001470:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	e6a9      	b.n	80011cc <HAL_TIM_ConfigClockSource+0x64>
 8001478:	08001ee0 	.word	0x08001ee0
 800147c:	40012c00 	.word	0x40012c00
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8001480:	4a47      	ldr	r2, [pc, #284]	; (80015a0 <HAL_TIM_ConfigClockSource+0x438>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00f      	beq.n	80014a6 <HAL_TIM_ConfigClockSource+0x33e>
 8001486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148a:	d00c      	beq.n	80014a6 <HAL_TIM_ConfigClockSource+0x33e>
 800148c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001490:	4293      	cmp	r3, r2
 8001492:	d008      	beq.n	80014a6 <HAL_TIM_ConfigClockSource+0x33e>
 8001494:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001498:	4293      	cmp	r3, r2
 800149a:	d004      	beq.n	80014a6 <HAL_TIM_ConfigClockSource+0x33e>
 800149c:	f640 71d2 	movw	r1, #4050	; 0xfd2
 80014a0:	4840      	ldr	r0, [pc, #256]	; (80015a4 <HAL_TIM_ConfigClockSource+0x43c>)
 80014a2:	f7fe ff12 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80014a6:	6863      	ldr	r3, [r4, #4]
 80014a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014ac:	d009      	beq.n	80014c2 <HAL_TIM_ConfigClockSource+0x35a>
 80014ae:	f033 0202 	bics.w	r2, r3, #2
 80014b2:	d006      	beq.n	80014c2 <HAL_TIM_ConfigClockSource+0x35a>
 80014b4:	2b0a      	cmp	r3, #10
 80014b6:	d004      	beq.n	80014c2 <HAL_TIM_ConfigClockSource+0x35a>
 80014b8:	f640 71d5 	movw	r1, #4053	; 0xfd5
 80014bc:	4839      	ldr	r0, [pc, #228]	; (80015a4 <HAL_TIM_ConfigClockSource+0x43c>)
 80014be:	f7fe ff04 	bl	80002ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80014c2:	68e3      	ldr	r3, [r4, #12]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d904      	bls.n	80014d2 <HAL_TIM_ConfigClockSource+0x36a>
 80014c8:	f640 71d6 	movw	r1, #4054	; 0xfd6
 80014cc:	4835      	ldr	r0, [pc, #212]	; (80015a4 <HAL_TIM_ConfigClockSource+0x43c>)
 80014ce:	f7fe fefc 	bl	80002ca <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80014d2:	682b      	ldr	r3, [r5, #0]
 80014d4:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 80014d6:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80014d8:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014da:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014dc:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014e0:	f024 0401 	bic.w	r4, r4, #1
 80014e4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014e6:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80014e8:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014ee:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80014f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80014f4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80014f6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80014f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80014fc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001500:	e7b8      	b.n	8001474 <HAL_TIM_ConfigClockSource+0x30c>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8001502:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <HAL_TIM_ConfigClockSource+0x438>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d00f      	beq.n	8001528 <HAL_TIM_ConfigClockSource+0x3c0>
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150c:	d00c      	beq.n	8001528 <HAL_TIM_ConfigClockSource+0x3c0>
 800150e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001512:	4293      	cmp	r3, r2
 8001514:	d008      	beq.n	8001528 <HAL_TIM_ConfigClockSource+0x3c0>
 8001516:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800151a:	4293      	cmp	r3, r2
 800151c:	d004      	beq.n	8001528 <HAL_TIM_ConfigClockSource+0x3c0>
 800151e:	f640 71e1 	movw	r1, #4065	; 0xfe1
 8001522:	4820      	ldr	r0, [pc, #128]	; (80015a4 <HAL_TIM_ConfigClockSource+0x43c>)
 8001524:	f7fe fed1 	bl	80002ca <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001528:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 800152a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800152c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001530:	f043 0307 	orr.w	r3, r3, #7
 8001534:	e71a      	b.n	800136c <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8001536:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <HAL_TIM_ConfigClockSource+0x438>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d00f      	beq.n	800155c <HAL_TIM_ConfigClockSource+0x3f4>
 800153c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001540:	d00c      	beq.n	800155c <HAL_TIM_ConfigClockSource+0x3f4>
 8001542:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001546:	4293      	cmp	r3, r2
 8001548:	d008      	beq.n	800155c <HAL_TIM_ConfigClockSource+0x3f4>
 800154a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800154e:	4293      	cmp	r3, r2
 8001550:	d004      	beq.n	800155c <HAL_TIM_ConfigClockSource+0x3f4>
 8001552:	f640 71e9 	movw	r1, #4073	; 0xfe9
 8001556:	4813      	ldr	r0, [pc, #76]	; (80015a4 <HAL_TIM_ConfigClockSource+0x43c>)
 8001558:	f7fe feb7 	bl	80002ca <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800155c:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 800155e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001564:	f043 0317 	orr.w	r3, r3, #23
 8001568:	e700      	b.n	800136c <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800156a:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_TIM_ConfigClockSource+0x438>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d00f      	beq.n	8001590 <HAL_TIM_ConfigClockSource+0x428>
 8001570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001574:	d00c      	beq.n	8001590 <HAL_TIM_ConfigClockSource+0x428>
 8001576:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800157a:	4293      	cmp	r3, r2
 800157c:	d008      	beq.n	8001590 <HAL_TIM_ConfigClockSource+0x428>
 800157e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001582:	4293      	cmp	r3, r2
 8001584:	d004      	beq.n	8001590 <HAL_TIM_ConfigClockSource+0x428>
 8001586:	f640 71f1 	movw	r1, #4081	; 0xff1
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <HAL_TIM_ConfigClockSource+0x43c>)
 800158c:	f7fe fe9d 	bl	80002ca <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001590:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8001592:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001598:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800159c:	e6e6      	b.n	800136c <HAL_TIM_ConfigClockSource+0x204>
 800159e:	bf00      	nop
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	08001ee0 	.word	0x08001ee0

080015a8 <HAL_TIM_PeriodElapsedCallback>:
 80015a8:	4770      	bx	lr

080015aa <HAL_TIM_OC_DelayElapsedCallback>:
 80015aa:	4770      	bx	lr

080015ac <HAL_TIM_IC_CaptureCallback>:
 80015ac:	4770      	bx	lr

080015ae <HAL_TIM_PWM_PulseFinishedCallback>:
 80015ae:	4770      	bx	lr

080015b0 <HAL_TIM_TriggerCallback>:
 80015b0:	4770      	bx	lr

080015b2 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015b2:	6803      	ldr	r3, [r0, #0]
{
 80015b4:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015b6:	691a      	ldr	r2, [r3, #16]
{
 80015b8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015ba:	0791      	lsls	r1, r2, #30
 80015bc:	d50e      	bpl.n	80015dc <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	0792      	lsls	r2, r2, #30
 80015c2:	d50b      	bpl.n	80015dc <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015c4:	f06f 0202 	mvn.w	r2, #2
 80015c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ca:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015cc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ce:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015d0:	079b      	lsls	r3, r3, #30
 80015d2:	d077      	beq.n	80016c4 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80015d4:	f7ff ffea 	bl	80015ac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d8:	2300      	movs	r3, #0
 80015da:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	0750      	lsls	r0, r2, #29
 80015e2:	d510      	bpl.n	8001606 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	0751      	lsls	r1, r2, #29
 80015e8:	d50d      	bpl.n	8001606 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015ea:	f06f 0204 	mvn.w	r2, #4
 80015ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015f0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015f2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015f4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015f6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80015fa:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015fc:	d068      	beq.n	80016d0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80015fe:	f7ff ffd5 	bl	80015ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001602:	2300      	movs	r3, #0
 8001604:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	0712      	lsls	r2, r2, #28
 800160c:	d50f      	bpl.n	800162e <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	0710      	lsls	r0, r2, #28
 8001612:	d50c      	bpl.n	800162e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001614:	f06f 0208 	mvn.w	r2, #8
 8001618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800161a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800161c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800161e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001620:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001622:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001624:	d05a      	beq.n	80016dc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001626:	f7ff ffc1 	bl	80015ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162a:	2300      	movs	r3, #0
 800162c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	06d2      	lsls	r2, r2, #27
 8001634:	d510      	bpl.n	8001658 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	06d0      	lsls	r0, r2, #27
 800163a:	d50d      	bpl.n	8001658 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800163c:	f06f 0210 	mvn.w	r2, #16
 8001640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001642:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001644:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001646:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001648:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800164c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800164e:	d04b      	beq.n	80016e8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001650:	f7ff ffac 	bl	80015ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001654:	2300      	movs	r3, #0
 8001656:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	07d1      	lsls	r1, r2, #31
 800165e:	d508      	bpl.n	8001672 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	07d2      	lsls	r2, r2, #31
 8001664:	d505      	bpl.n	8001672 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001666:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800166a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800166c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800166e:	f7ff ff9b 	bl	80015a8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	0610      	lsls	r0, r2, #24
 8001678:	d508      	bpl.n	800168c <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	0611      	lsls	r1, r2, #24
 800167e:	d505      	bpl.n	800168c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001680:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001684:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001686:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001688:	f000 f911 	bl	80018ae <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800168c:	6823      	ldr	r3, [r4, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	0652      	lsls	r2, r2, #25
 8001692:	d508      	bpl.n	80016a6 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	0650      	lsls	r0, r2, #25
 8001698:	d505      	bpl.n	80016a6 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800169a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800169e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016a2:	f7ff ff85 	bl	80015b0 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	0691      	lsls	r1, r2, #26
 80016ac:	d522      	bpl.n	80016f4 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	0692      	lsls	r2, r2, #26
 80016b2:	d51f      	bpl.n	80016f4 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016b4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80016b8:	4620      	mov	r0, r4
}
 80016ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80016c0:	f000 b8f4 	b.w	80018ac <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c4:	f7ff ff71 	bl	80015aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff ff70 	bl	80015ae <HAL_TIM_PWM_PulseFinishedCallback>
 80016ce:	e783      	b.n	80015d8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d0:	f7ff ff6b 	bl	80015aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7ff ff6a 	bl	80015ae <HAL_TIM_PWM_PulseFinishedCallback>
 80016da:	e792      	b.n	8001602 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016dc:	f7ff ff65 	bl	80015aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff ff64 	bl	80015ae <HAL_TIM_PWM_PulseFinishedCallback>
 80016e6:	e7a0      	b.n	800162a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e8:	f7ff ff5f 	bl	80015aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7ff ff5e 	bl	80015ae <HAL_TIM_PWM_PulseFinishedCallback>
 80016f2:	e7af      	b.n	8001654 <HAL_TIM_IRQHandler+0xa2>
 80016f4:	bd10      	pop	{r4, pc}
	...

080016f8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016f8:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80016fa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016fc:	4290      	cmp	r0, r2
 80016fe:	d00a      	beq.n	8001716 <TIM_Base_SetConfig+0x1e>
 8001700:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001704:	d007      	beq.n	8001716 <TIM_Base_SetConfig+0x1e>
 8001706:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800170a:	4290      	cmp	r0, r2
 800170c:	d003      	beq.n	8001716 <TIM_Base_SetConfig+0x1e>
 800170e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001712:	4290      	cmp	r0, r2
 8001714:	d115      	bne.n	8001742 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001716:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800171c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800171e:	4a11      	ldr	r2, [pc, #68]	; (8001764 <TIM_Base_SetConfig+0x6c>)
 8001720:	4290      	cmp	r0, r2
 8001722:	d00a      	beq.n	800173a <TIM_Base_SetConfig+0x42>
 8001724:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001728:	d007      	beq.n	800173a <TIM_Base_SetConfig+0x42>
 800172a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800172e:	4290      	cmp	r0, r2
 8001730:	d003      	beq.n	800173a <TIM_Base_SetConfig+0x42>
 8001732:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001736:	4290      	cmp	r0, r2
 8001738:	d103      	bne.n	8001742 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800173a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800173c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001740:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001742:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001748:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800174a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800174c:	688b      	ldr	r3, [r1, #8]
 800174e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001750:	680b      	ldr	r3, [r1, #0]
 8001752:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <TIM_Base_SetConfig+0x6c>)
 8001756:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001758:	bf04      	itt	eq
 800175a:	690b      	ldreq	r3, [r1, #16]
 800175c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800175e:	2301      	movs	r3, #1
 8001760:	6143      	str	r3, [r0, #20]
 8001762:	4770      	bx	lr
 8001764:	40012c00 	.word	0x40012c00

08001768 <HAL_TIM_Base_Init>:
{
 8001768:	b510      	push	{r4, lr}
  if(htim == NULL)
 800176a:	4604      	mov	r4, r0
 800176c:	2800      	cmp	r0, #0
 800176e:	d049      	beq.n	8001804 <HAL_TIM_Base_Init+0x9c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001770:	6803      	ldr	r3, [r0, #0]
 8001772:	4a25      	ldr	r2, [pc, #148]	; (8001808 <HAL_TIM_Base_Init+0xa0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00e      	beq.n	8001796 <HAL_TIM_Base_Init+0x2e>
 8001778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177c:	d00b      	beq.n	8001796 <HAL_TIM_Base_Init+0x2e>
 800177e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_TIM_Base_Init+0x2e>
 8001786:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800178a:	4293      	cmp	r3, r2
 800178c:	d003      	beq.n	8001796 <HAL_TIM_Base_Init+0x2e>
 800178e:	21d9      	movs	r1, #217	; 0xd9
 8001790:	481e      	ldr	r0, [pc, #120]	; (800180c <HAL_TIM_Base_Init+0xa4>)
 8001792:	f7fe fd9a 	bl	80002ca <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001796:	68a3      	ldr	r3, [r4, #8]
 8001798:	f033 0210 	bics.w	r2, r3, #16
 800179c:	d009      	beq.n	80017b2 <HAL_TIM_Base_Init+0x4a>
 800179e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80017a2:	2a20      	cmp	r2, #32
 80017a4:	d005      	beq.n	80017b2 <HAL_TIM_Base_Init+0x4a>
 80017a6:	2b40      	cmp	r3, #64	; 0x40
 80017a8:	d003      	beq.n	80017b2 <HAL_TIM_Base_Init+0x4a>
 80017aa:	21da      	movs	r1, #218	; 0xda
 80017ac:	4817      	ldr	r0, [pc, #92]	; (800180c <HAL_TIM_Base_Init+0xa4>)
 80017ae:	f7fe fd8c 	bl	80002ca <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80017b2:	6923      	ldr	r3, [r4, #16]
 80017b4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80017b8:	d006      	beq.n	80017c8 <HAL_TIM_Base_Init+0x60>
 80017ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017be:	d003      	beq.n	80017c8 <HAL_TIM_Base_Init+0x60>
 80017c0:	21db      	movs	r1, #219	; 0xdb
 80017c2:	4812      	ldr	r0, [pc, #72]	; (800180c <HAL_TIM_Base_Init+0xa4>)
 80017c4:	f7fe fd81 	bl	80002ca <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80017c8:	69a3      	ldr	r3, [r4, #24]
 80017ca:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80017ce:	d003      	beq.n	80017d8 <HAL_TIM_Base_Init+0x70>
 80017d0:	21dc      	movs	r1, #220	; 0xdc
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <HAL_TIM_Base_Init+0xa4>)
 80017d4:	f7fe fd79 	bl	80002ca <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80017d8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80017dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017e0:	b923      	cbnz	r3, 80017ec <HAL_TIM_Base_Init+0x84>
    htim->Lock = HAL_UNLOCKED;
 80017e2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7fe fe14 	bl	8000414 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80017ec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017ee:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80017f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017f4:	1d21      	adds	r1, r4, #4
 80017f6:	f7ff ff7f 	bl	80016f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017fa:	2301      	movs	r3, #1
  return HAL_OK;
 80017fc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80017fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001802:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001804:	2001      	movs	r0, #1
}
 8001806:	bd10      	pop	{r4, pc}
 8001808:	40012c00 	.word	0x40012c00
 800180c:	08001ee0 	.word	0x08001ee0

08001810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001810:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8001812:	4a24      	ldr	r2, [pc, #144]	; (80018a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8001814:	6803      	ldr	r3, [r0, #0]
{
 8001816:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8001818:	4293      	cmp	r3, r2
{
 800181a:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800181c:	d00f      	beq.n	800183e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 800181e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001822:	d00c      	beq.n	800183e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8001824:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001828:	4293      	cmp	r3, r2
 800182a:	d008      	beq.n	800183e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 800182c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001830:	4293      	cmp	r3, r2
 8001832:	d004      	beq.n	800183e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8001834:	f44f 61c7 	mov.w	r1, #1592	; 0x638
 8001838:	481b      	ldr	r0, [pc, #108]	; (80018a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800183a:	f7fe fd46 	bl	80002ca <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800183e:	682b      	ldr	r3, [r5, #0]
 8001840:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8001844:	d006      	beq.n	8001854 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001846:	2b40      	cmp	r3, #64	; 0x40
 8001848:	d004      	beq.n	8001854 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800184a:	f240 6139 	movw	r1, #1593	; 0x639
 800184e:	4816      	ldr	r0, [pc, #88]	; (80018a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8001850:	f7fe fd3b 	bl	80002ca <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8001854:	686b      	ldr	r3, [r5, #4]
 8001856:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800185a:	d004      	beq.n	8001866 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800185c:	f240 613a 	movw	r1, #1594	; 0x63a
 8001860:	4811      	ldr	r0, [pc, #68]	; (80018a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8001862:	f7fe fd32 	bl	80002ca <assert_failed>

  __HAL_LOCK(htim);
 8001866:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800186a:	2002      	movs	r0, #2
 800186c:	2b01      	cmp	r3, #1
 800186e:	d018      	beq.n	80018a2 <HAL_TIMEx_MasterConfigSynchronization+0x92>

  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001870:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001872:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001876:	685a      	ldr	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001878:	6829      	ldr	r1, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800187a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800187e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001880:	685a      	ldr	r2, [r3, #4]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001882:	2000      	movs	r0, #0
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001884:	430a      	orrs	r2, r1
 8001886:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001888:	689a      	ldr	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800188a:	6869      	ldr	r1, [r5, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800188c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001890:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001898:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800189a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800189e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
}
 80018a2:	bd38      	pop	{r3, r4, r5, pc}
 80018a4:	40012c00 	.word	0x40012c00
 80018a8:	08001f18 	.word	0x08001f18

080018ac <HAL_TIMEx_CommutationCallback>:
 80018ac:	4770      	bx	lr

080018ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018ae:	4770      	bx	lr

080018b0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018b0:	6803      	ldr	r3, [r0, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80018b8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018ba:	695a      	ldr	r2, [r3, #20]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018c2:	2320      	movs	r3, #32
 80018c4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80018c8:	4770      	bx	lr
	...

080018cc <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80018cc:	6842      	ldr	r2, [r0, #4]
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <UART_SetConfig+0x198>)
{
 80018d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80018d4:	429a      	cmp	r2, r3
{
 80018d6:	4681      	mov	r9, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80018d8:	d904      	bls.n	80018e4 <UART_SetConfig+0x18>
 80018da:	f640 11a7 	movw	r1, #2471	; 0x9a7
 80018de:	4862      	ldr	r0, [pc, #392]	; (8001a68 <UART_SetConfig+0x19c>)
 80018e0:	f7fe fcf3 	bl	80002ca <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80018e4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80018e8:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80018ec:	d004      	beq.n	80018f8 <UART_SetConfig+0x2c>
 80018ee:	f640 11a8 	movw	r1, #2472	; 0x9a8
 80018f2:	485d      	ldr	r0, [pc, #372]	; (8001a68 <UART_SetConfig+0x19c>)
 80018f4:	f7fe fce9 	bl	80002ca <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80018f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80018fc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001900:	d007      	beq.n	8001912 <UART_SetConfig+0x46>
 8001902:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001906:	d004      	beq.n	8001912 <UART_SetConfig+0x46>
 8001908:	f640 11a9 	movw	r1, #2473	; 0x9a9
 800190c:	4856      	ldr	r0, [pc, #344]	; (8001a68 <UART_SetConfig+0x19c>)
 800190e:	f7fe fcdc 	bl	80002ca <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8001912:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8001916:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800191a:	4213      	tst	r3, r2
 800191c:	d100      	bne.n	8001920 <UART_SetConfig+0x54>
 800191e:	b923      	cbnz	r3, 800192a <UART_SetConfig+0x5e>
 8001920:	f640 11aa 	movw	r1, #2474	; 0x9aa
 8001924:	4850      	ldr	r0, [pc, #320]	; (8001a68 <UART_SetConfig+0x19c>)
 8001926:	f7fe fcd0 	bl	80002ca <assert_failed>

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800192a:	f8d9 5000 	ldr.w	r5, [r9]
 800192e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8001932:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001934:	f8d9 1010 	ldr.w	r1, [r9, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001938:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800193c:	4313      	orrs	r3, r2
 800193e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001940:	f8d9 3008 	ldr.w	r3, [r9, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001944:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001946:	430b      	orrs	r3, r1
 8001948:	f8d9 1014 	ldr.w	r1, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800194c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001950:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001954:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001956:	4313      	orrs	r3, r2
 8001958:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800195a:	696b      	ldr	r3, [r5, #20]
 800195c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8001960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001964:	4313      	orrs	r3, r2
 8001966:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001968:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <UART_SetConfig+0x1a0>)
 800196a:	2419      	movs	r4, #25
 800196c:	429d      	cmp	r5, r3
 800196e:	d146      	bne.n	80019fe <UART_SetConfig+0x132>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001970:	f7ff fbea 	bl	8001148 <HAL_RCC_GetPCLK2Freq>
 8001974:	fb04 f300 	mul.w	r3, r4, r0
 8001978:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800197c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001980:	00b6      	lsls	r6, r6, #2
 8001982:	fbb3 f3f6 	udiv	r3, r3, r6
 8001986:	fbb3 f3f8 	udiv	r3, r3, r8
 800198a:	011e      	lsls	r6, r3, #4
 800198c:	f7ff fbdc 	bl	8001148 <HAL_RCC_GetPCLK2Freq>
 8001990:	4360      	muls	r0, r4
 8001992:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	fbb0 f7f3 	udiv	r7, r0, r3
 800199c:	f7ff fbd4 	bl	8001148 <HAL_RCC_GetPCLK2Freq>
 80019a0:	4360      	muls	r0, r4
 80019a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ac:	fbb3 f3f8 	udiv	r3, r3, r8
 80019b0:	fb08 7313 	mls	r3, r8, r3, r7
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	3332      	adds	r3, #50	; 0x32
 80019b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80019bc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80019c0:	f7ff fbc2 	bl	8001148 <HAL_RCC_GetPCLK2Freq>
 80019c4:	4360      	muls	r0, r4
 80019c6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	fbb0 faf2 	udiv	sl, r0, r2
 80019d0:	f7ff fbba 	bl	8001148 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019d4:	4360      	muls	r0, r4
 80019d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e0:	fbb3 f3f8 	udiv	r3, r3, r8
 80019e4:	fb08 a313 	mls	r3, r8, r3, sl
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	3332      	adds	r3, #50	; 0x32
 80019ec:	fbb3 f3f8 	udiv	r3, r3, r8
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	433b      	orrs	r3, r7
 80019f6:	4433      	add	r3, r6
 80019f8:	60ab      	str	r3, [r5, #8]
 80019fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019fe:	f7ff fb93 	bl	8001128 <HAL_RCC_GetPCLK1Freq>
 8001a02:	fb04 f300 	mul.w	r3, r4, r0
 8001a06:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001a0a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001a0e:	00b6      	lsls	r6, r6, #2
 8001a10:	fbb3 f3f6 	udiv	r3, r3, r6
 8001a14:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a18:	011e      	lsls	r6, r3, #4
 8001a1a:	f7ff fb85 	bl	8001128 <HAL_RCC_GetPCLK1Freq>
 8001a1e:	4360      	muls	r0, r4
 8001a20:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a2a:	f7ff fb7d 	bl	8001128 <HAL_RCC_GetPCLK1Freq>
 8001a2e:	4360      	muls	r0, r4
 8001a30:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a3e:	fb08 7313 	mls	r3, r8, r3, r7
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	3332      	adds	r3, #50	; 0x32
 8001a46:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a4a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001a4e:	f7ff fb6b 	bl	8001128 <HAL_RCC_GetPCLK1Freq>
 8001a52:	4360      	muls	r0, r4
 8001a54:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	fbb0 faf2 	udiv	sl, r0, r2
 8001a5e:	f7ff fb63 	bl	8001128 <HAL_RCC_GetPCLK1Freq>
 8001a62:	e7b7      	b.n	80019d4 <UART_SetConfig+0x108>
 8001a64:	0044aa20 	.word	0x0044aa20
 8001a68:	08001f53 	.word	0x08001f53
 8001a6c:	40013800 	.word	0x40013800

08001a70 <HAL_UART_Init>:
{
 8001a70:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001a72:	4604      	mov	r4, r0
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d05b      	beq.n	8001b30 <HAL_UART_Init+0xc0>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8001a78:	6981      	ldr	r1, [r0, #24]
 8001a7a:	6803      	ldr	r3, [r0, #0]
 8001a7c:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <HAL_UART_Init+0xc4>)
 8001a7e:	2900      	cmp	r1, #0
 8001a80:	d04a      	beq.n	8001b18 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00c      	beq.n	8001aa0 <HAL_UART_Init+0x30>
 8001a86:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d008      	beq.n	8001aa0 <HAL_UART_Init+0x30>
 8001a8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_UART_Init+0x30>
 8001a96:	f240 110f 	movw	r1, #271	; 0x10f
 8001a9a:	4827      	ldr	r0, [pc, #156]	; (8001b38 <HAL_UART_Init+0xc8>)
 8001a9c:	f7fe fc15 	bl	80002ca <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8001aa0:	69a3      	ldr	r3, [r4, #24]
 8001aa2:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8001aa6:	d004      	beq.n	8001ab2 <HAL_UART_Init+0x42>
 8001aa8:	f44f 7188 	mov.w	r1, #272	; 0x110
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001aac:	4822      	ldr	r0, [pc, #136]	; (8001b38 <HAL_UART_Init+0xc8>)
 8001aae:	f7fe fc0c 	bl	80002ca <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8001ab2:	68a3      	ldr	r3, [r4, #8]
 8001ab4:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8001ab8:	d004      	beq.n	8001ac4 <HAL_UART_Init+0x54>
 8001aba:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001abe:	481e      	ldr	r0, [pc, #120]	; (8001b38 <HAL_UART_Init+0xc8>)
 8001ac0:	f7fe fc03 	bl	80002ca <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001ac4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001ac8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001acc:	b923      	cbnz	r3, 8001ad8 <HAL_UART_Init+0x68>
    huart->Lock = HAL_UNLOCKED;
 8001ace:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7fe fcd6 	bl	8000484 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ad8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001ada:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001adc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001ae0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001ae2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ae8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001aea:	f7ff feef 	bl	80018cc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aee:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b00:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b08:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001b0a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b0c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001b0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001b12:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001b16:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d0ca      	beq.n	8001ab2 <HAL_UART_Init+0x42>
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_UART_Init+0xcc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d0c7      	beq.n	8001ab2 <HAL_UART_Init+0x42>
 8001b22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d0c3      	beq.n	8001ab2 <HAL_UART_Init+0x42>
 8001b2a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001b2e:	e7bd      	b.n	8001aac <HAL_UART_Init+0x3c>
    return HAL_ERROR;
 8001b30:	2001      	movs	r0, #1
}
 8001b32:	bd10      	pop	{r4, pc}
 8001b34:	40013800 	.word	0x40013800
 8001b38:	08001f53 	.word	0x08001f53
 8001b3c:	40004400 	.word	0x40004400

08001b40 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8001b40:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d118      	bne.n	8001b7a <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL) || (Size == 0U)) 
 8001b48:	b1a9      	cbz	r1, 8001b76 <HAL_UART_Transmit_IT+0x36>
 8001b4a:	b1a2      	cbz	r2, 8001b76 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8001b4c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d012      	beq.n	8001b7a <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8001b54:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 8001b56:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b58:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b5a:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 8001b5c:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001b5e:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b60:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b62:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001b66:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8001b68:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001b6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b70:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001b72:	4618      	mov	r0, r3
 8001b74:	4770      	bx	lr
      return HAL_ERROR;
 8001b76:	2001      	movs	r0, #1
 8001b78:	4770      	bx	lr
    return HAL_BUSY;
 8001b7a:	2002      	movs	r0, #2
}
 8001b7c:	4770      	bx	lr

08001b7e <HAL_UART_TxCpltCallback>:
 8001b7e:	4770      	bx	lr

08001b80 <HAL_UART_RxCpltCallback>:
 8001b80:	4770      	bx	lr

08001b82 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001b82:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001b86:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001b88:	2b22      	cmp	r3, #34	; 0x22
 8001b8a:	d136      	bne.n	8001bfa <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b8c:	6883      	ldr	r3, [r0, #8]
 8001b8e:	6901      	ldr	r1, [r0, #16]
 8001b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b94:	6802      	ldr	r2, [r0, #0]
 8001b96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b98:	d123      	bne.n	8001be2 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b9a:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001b9c:	b9e9      	cbnz	r1, 8001bda <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ba2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001ba6:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001ba8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001baa:	3c01      	subs	r4, #1
 8001bac:	b2a4      	uxth	r4, r4
 8001bae:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001bb0:	b98c      	cbnz	r4, 8001bd6 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001bb2:	6803      	ldr	r3, [r0, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	f022 0220 	bic.w	r2, r2, #32
 8001bba:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc2:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001bd2:	f7ff ffd5 	bl	8001b80 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001bd6:	2000      	movs	r0, #0
}
 8001bd8:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	f823 2b01 	strh.w	r2, [r3], #1
 8001be0:	e7e1      	b.n	8001ba6 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001be2:	b921      	cbnz	r1, 8001bee <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001be4:	1c59      	adds	r1, r3, #1
 8001be6:	6852      	ldr	r2, [r2, #4]
 8001be8:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	e7dc      	b.n	8001ba8 <UART_Receive_IT+0x26>
 8001bee:	6852      	ldr	r2, [r2, #4]
 8001bf0:	1c59      	adds	r1, r3, #1
 8001bf2:	6281      	str	r1, [r0, #40]	; 0x28
 8001bf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bf8:	e7f7      	b.n	8001bea <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	bd10      	pop	{r4, pc}

08001bfe <HAL_UART_ErrorCallback>:
 8001bfe:	4770      	bx	lr

08001c00 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c00:	6803      	ldr	r3, [r0, #0]
{
 8001c02:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c04:	681a      	ldr	r2, [r3, #0]
{
 8001c06:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8001c08:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c0a:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c0c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001c0e:	d107      	bne.n	8001c20 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c10:	0696      	lsls	r6, r2, #26
 8001c12:	d55a      	bpl.n	8001cca <HAL_UART_IRQHandler+0xca>
 8001c14:	068d      	lsls	r5, r1, #26
 8001c16:	d558      	bpl.n	8001cca <HAL_UART_IRQHandler+0xca>
}
 8001c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001c1c:	f7ff bfb1 	b.w	8001b82 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c20:	f015 0501 	ands.w	r5, r5, #1
 8001c24:	d102      	bne.n	8001c2c <HAL_UART_IRQHandler+0x2c>
 8001c26:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001c2a:	d04e      	beq.n	8001cca <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c2c:	07d3      	lsls	r3, r2, #31
 8001c2e:	d505      	bpl.n	8001c3c <HAL_UART_IRQHandler+0x3c>
 8001c30:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c32:	bf42      	ittt	mi
 8001c34:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001c36:	f043 0301 	orrmi.w	r3, r3, #1
 8001c3a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c3c:	0750      	lsls	r0, r2, #29
 8001c3e:	d504      	bpl.n	8001c4a <HAL_UART_IRQHandler+0x4a>
 8001c40:	b11d      	cbz	r5, 8001c4a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c4a:	0793      	lsls	r3, r2, #30
 8001c4c:	d504      	bpl.n	8001c58 <HAL_UART_IRQHandler+0x58>
 8001c4e:	b11d      	cbz	r5, 8001c58 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c58:	0716      	lsls	r6, r2, #28
 8001c5a:	d504      	bpl.n	8001c66 <HAL_UART_IRQHandler+0x66>
 8001c5c:	b11d      	cbz	r5, 8001c66 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d066      	beq.n	8001d3a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c6c:	0695      	lsls	r5, r2, #26
 8001c6e:	d504      	bpl.n	8001c7a <HAL_UART_IRQHandler+0x7a>
 8001c70:	0688      	lsls	r0, r1, #26
 8001c72:	d502      	bpl.n	8001c7a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff ff84 	bl	8001b82 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c7a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001c7c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c7e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c80:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c82:	0711      	lsls	r1, r2, #28
 8001c84:	d402      	bmi.n	8001c8c <HAL_UART_IRQHandler+0x8c>
 8001c86:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001c8a:	d01a      	beq.n	8001cc2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001c8c:	f7ff fe10 	bl	80018b0 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	0652      	lsls	r2, r2, #25
 8001c96:	d510      	bpl.n	8001cba <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c98:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001c9a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ca0:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001ca2:	b150      	cbz	r0, 8001cba <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <HAL_UART_IRQHandler+0x13c>)
 8001ca6:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ca8:	f7fe fd04 	bl	80006b4 <HAL_DMA_Abort_IT>
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d044      	beq.n	8001d3a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001cb0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001cb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001cb8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff ff9f 	bl	8001bfe <HAL_UART_ErrorCallback>
 8001cc0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001cc2:	f7ff ff9c 	bl	8001bfe <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc6:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001cca:	0616      	lsls	r6, r2, #24
 8001ccc:	d527      	bpl.n	8001d1e <HAL_UART_IRQHandler+0x11e>
 8001cce:	060d      	lsls	r5, r1, #24
 8001cd0:	d525      	bpl.n	8001d1e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001cd2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001cd6:	2a21      	cmp	r2, #33	; 0x21
 8001cd8:	d12f      	bne.n	8001d3a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cda:	68a2      	ldr	r2, [r4, #8]
 8001cdc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001ce0:	6a22      	ldr	r2, [r4, #32]
 8001ce2:	d117      	bne.n	8001d14 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001ce4:	8811      	ldrh	r1, [r2, #0]
 8001ce6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001cea:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001cec:	6921      	ldr	r1, [r4, #16]
 8001cee:	b979      	cbnz	r1, 8001d10 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001cf0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001cf2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001cf4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001cf6:	3a01      	subs	r2, #1
 8001cf8:	b292      	uxth	r2, r2
 8001cfa:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001cfc:	b9ea      	cbnz	r2, 8001d3a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d04:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001d10:	3201      	adds	r2, #1
 8001d12:	e7ee      	b.n	8001cf2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d14:	1c51      	adds	r1, r2, #1
 8001d16:	6221      	str	r1, [r4, #32]
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	e7ea      	b.n	8001cf4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d1e:	0650      	lsls	r0, r2, #25
 8001d20:	d50b      	bpl.n	8001d3a <HAL_UART_IRQHandler+0x13a>
 8001d22:	064a      	lsls	r2, r1, #25
 8001d24:	d509      	bpl.n	8001d3a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d26:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001d28:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d2e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001d30:	2320      	movs	r3, #32
 8001d32:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001d36:	f7ff ff22 	bl	8001b7e <HAL_UART_TxCpltCallback>
 8001d3a:	bd70      	pop	{r4, r5, r6, pc}
 8001d3c:	08001d41 	.word	0x08001d41

08001d40 <UART_DMAAbortOnError>:
{
 8001d40:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001d42:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d44:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001d46:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d48:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001d4a:	f7ff ff58 	bl	8001bfe <HAL_UART_ErrorCallback>
 8001d4e:	bd08      	pop	{r3, pc}

08001d50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d50:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d52:	e003      	b.n	8001d5c <LoopCopyDataInit>

08001d54 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d56:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d58:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d5a:	3104      	adds	r1, #4

08001d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d5c:	480a      	ldr	r0, [pc, #40]	; (8001d88 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d60:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d62:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d64:	d3f6      	bcc.n	8001d54 <CopyDataInit>
  ldr r2, =_sbss
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d68:	e002      	b.n	8001d70 <LoopFillZerobss>

08001d6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d6c:	f842 3b04 	str.w	r3, [r2], #4

08001d70 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d72:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d74:	d3f9      	bcc.n	8001d6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d76:	f7fe faf3 	bl	8000360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f000 f80f 	bl	8001d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d7e:	f7fe fa77 	bl	8000270 <main>
  bx lr
 8001d82:	4770      	bx	lr
  ldr r3, =_sidata
 8001d84:	08001f94 	.word	0x08001f94
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d8c:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8001d90:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8001d94:	200000c4 	.word	0x200000c4

08001d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d98:	e7fe      	b.n	8001d98 <ADC1_2_IRQHandler>
	...

08001d9c <__libc_init_array>:
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	2500      	movs	r5, #0
 8001da0:	4e0c      	ldr	r6, [pc, #48]	; (8001dd4 <__libc_init_array+0x38>)
 8001da2:	4c0d      	ldr	r4, [pc, #52]	; (8001dd8 <__libc_init_array+0x3c>)
 8001da4:	1ba4      	subs	r4, r4, r6
 8001da6:	10a4      	asrs	r4, r4, #2
 8001da8:	42a5      	cmp	r5, r4
 8001daa:	d109      	bne.n	8001dc0 <__libc_init_array+0x24>
 8001dac:	f000 f822 	bl	8001df4 <_init>
 8001db0:	2500      	movs	r5, #0
 8001db2:	4e0a      	ldr	r6, [pc, #40]	; (8001ddc <__libc_init_array+0x40>)
 8001db4:	4c0a      	ldr	r4, [pc, #40]	; (8001de0 <__libc_init_array+0x44>)
 8001db6:	1ba4      	subs	r4, r4, r6
 8001db8:	10a4      	asrs	r4, r4, #2
 8001dba:	42a5      	cmp	r5, r4
 8001dbc:	d105      	bne.n	8001dca <__libc_init_array+0x2e>
 8001dbe:	bd70      	pop	{r4, r5, r6, pc}
 8001dc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dc4:	4798      	blx	r3
 8001dc6:	3501      	adds	r5, #1
 8001dc8:	e7ee      	b.n	8001da8 <__libc_init_array+0xc>
 8001dca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dce:	4798      	blx	r3
 8001dd0:	3501      	adds	r5, #1
 8001dd2:	e7f2      	b.n	8001dba <__libc_init_array+0x1e>
 8001dd4:	08001f8c 	.word	0x08001f8c
 8001dd8:	08001f8c 	.word	0x08001f8c
 8001ddc:	08001f8c 	.word	0x08001f8c
 8001de0:	08001f90 	.word	0x08001f90

08001de4 <memset>:
 8001de4:	4603      	mov	r3, r0
 8001de6:	4402      	add	r2, r0
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d100      	bne.n	8001dee <memset+0xa>
 8001dec:	4770      	bx	lr
 8001dee:	f803 1b01 	strb.w	r1, [r3], #1
 8001df2:	e7f9      	b.n	8001de8 <memset+0x4>

08001df4 <_init>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	bf00      	nop
 8001df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfa:	bc08      	pop	{r3}
 8001dfc:	469e      	mov	lr, r3
 8001dfe:	4770      	bx	lr

08001e00 <_fini>:
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e02:	bf00      	nop
 8001e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e06:	bc08      	pop	{r3}
 8001e08:	469e      	mov	lr, r3
 8001e0a:	4770      	bx	lr
